<apex:component controller="ADM_WorkRelatedListController" allowDML="true">
<apex:attribute name="AWorkID" description="Reference to the ID of the object" type="Id" required="required" assignTo="{!workid}"/>  
<apex:outputPanel rendered="{!NOT(Work.RecordType.Name == 'Template')}">
<script type="text/javascript"> 

  /* Description: Sets the first two inputs inside the parentTarget element to match the input of the parentSource
     For example when a record is edited and you want to pre-load a text box client side and also preload a hidden input so you have access to the original
     data before any edits were made on the server.
  */
  function setTextBoxValue(parentSource, parentTarget) {
    //alert('Source:' + parentSource + ' Target:' + parentTarget);
    var sourceSpan = document.getElementById(parentSource);
    var sChildren = sourceSpan.childNodes;
    //alert('Parent Source:' + parentSource + ' Source Span:' + sourceSpan + ' S Children:' + sChildren);
    for( var i = 0; i < sChildren.length; i++ ){
      var elID = sChildren[i].getAttribute( "id" );
      //alert('ID:' + elID);

    }
    var content = document.getElementById(elID).innerHTML;
    //alert('Content:' + content + ' Parent Target:' + parentTarget);
    var targetSpan = document.getElementById(parentTarget);
    //alert('Target Span:' + targetSpan);
    var tChildren = targetSpan.childNodes;
    for( var i = 0; i < tChildren.length; i++ ){
      if(i == 0) {
        //set 1st element value so user can see what their editing
        tChildren[i].value = content
        //set the 2nd element so that edit method can locate the record being edited.  Passing this is a hidden value saves a round trip to the server
        tChildren[i +1].value = content
      }
    }
  }

  /* Description: Sets the first input of parentTarget element to equal the hidvalue variable. Used to populate a hidden input. */
  function setHiddenInputValue(parentTarget, hidvalue) {
    var targetSpan = document.getElementById(parentTarget);
    var tChildren = targetSpan.childNodes;

    for( var i = 0; i < tChildren.length; i++ ){
      if(i == 1) {
        //the first child is the text both the second the hidden input.
        tChildren[i].value = hidvalue
      }
    }


  }

  /* Description: Special method to handle the inline edit of a Parent Work object.  The parent work output field is wrapped in a href tag
  generated by the platform without an id.  Hence this edge case needs its own method */
  function setEditParentValue(parentSource, parentTarget) {
    //alert('Source:' + parentSource + ' Target:' + parentTarget);
    var sourceSpan = document.getElementById(parentSource);
    var sChildren = sourceSpan.childNodes;
    //alert('Parent Source:' + parentSource + ' Source Span:' + sourceSpan + ' S Children:' + sChildren);
    //1st child node is a link, extract Work ID from link
    var elID = sChildren[0].getAttribute( "id" );
    //the link generated by the apex:outPutField tag does not have an id and therefore can't be looked up.  Having to resort to indexOf().

    var link = document.getElementById(elID).innerHTML;
    //alert('Link:' + link);
    var beginindex = link.indexOf('>');
    var endindex = link.indexOf('</a>');
    if(endindex == -1) {
      //IE7 appears to captilize content gathered via innerHTML so check for captial
      endindex = link.indexOf('</A>');
    }
    //alert('begin:' + beginindex + ' end:' + endindex);
    var content = link.substring(beginindex +1, endindex);
    //alert('Content:' + content);
    var targetSpan = document.getElementById(parentTarget);
    var tChildren = targetSpan.childNodes;
    tChildren[0].value = content;

  }
  
  
  var relatedListWithOpenLookupID = '';
  
  function registerLookup(relatedListID) {
  		
  		relatedListWithOpenLookupID = relatedListID;
  		//alert('inside registerLookup relatedListWithOpenLookupID:' + relatedListWithOpenLookupID);
  		
  
  }
  
  
  function setLookupWorkID(workID) {
  		//alert('inside setLookupWorkID relatedListWithOpenLookupID:' + relatedListWithOpenLookupID);
  		var inputT = document.getElementById(relatedListWithOpenLookupID);
  		//alert('relatedListWithOpenLookupID:' + relatedListWithOpenLookupID + ' inputT:' + inputT + ' workID:' + workID);
  		inputT.value = workID;
  }


</script>

<style type="text/css">
.actionLink{font-weight: bold}
.actionFooter {  background: #e3e3d7;}
</style>

<apex:repeat value="{!FatalErrorMessages}" var="error" id="fatalerrors">
    <apex:image url="{!URLFOR($Resource.silkIcons, 'icons/exclamation.png')}" style="vertical-align:text-top;padding-bottom:4px" /> &nbsp;<apex:outputText value="{!error}" styleClass="errorMsg" /><br/>
</apex:repeat>

<c:ADM_Overlay />

<c:ADM_ParentWorkRelatedList aworkID="{!workID}" />

<c:ADM_WorkTree aworkID="{!workID}" /> 




</apex:outputPanel>
</apex:component>