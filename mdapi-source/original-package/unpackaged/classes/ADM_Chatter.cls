global class ADM_Chatter {    public static String follow {        get {            follow = '+ Follow';            return follow;        }        set;    }    public static String unfollow {        get {            unfollow = '- Unfollow';            return unfollow;        }        set;    }        public static void massCreate(List<Map<String,String>> subs2create) {    	List<EntitySubscription> subs = new List<EntitySubscription>();    	ADM_errorUtils errorUtils = new ADM_errorUtils();    	    	for(Map<String,String> sub2create: subs2create) {	    	for(String parentId : sub2create.keySet()) {	            EntitySubscription sub = new EntitySubscription();	            sub.ParentId = parentId;	            sub.SubscriberId = sub2create.get(parentId);	            subs.add(sub);	            if(subs.size() == 200) {	                try {	                    insert subs;	                } catch(System.DmlException e) {	                    System.debug('An error occurred creating chatter subscriptions: ' + errorUtils.getErrorMessage(e));	                }	                subs = new List<EntitySubscription>();	            }	        }	
    	}    	    	if(!subs.isEmpty()) {    		try {    		  insert subs;    		} catch(System.DmlException e) {    			System.debug('An error occurred creating chatter subscriptions: ' + errorUtils.getErrorMessage(e));
    		}
    	}
    }            WebService static EntitySubscription[] getSubscriptionsForParentId(String parentId, String subscriberId) {        List<EntitySubscription> esubs = new List<EntitySubscription>();        esubs = [SELECT Id, SubscriberId, ParentId FROM EntitySubscription WHERE SubscriberId =: subscriberId AND ParentId =: parentId limit 1000];        return esubs;    }        WebService static Boolean isSubscribed(String parentId, String subscriberId) {        List<EntitySubscription> esubs = getSubscriptionsForParentId(parentId, subscriberId);        Boolean isSubscribed = false;        if(esubs.size() == 1) {            isSubscribed = true;        }        return isSubscribed;    }        WebService static String chatterValue(String parentId, String subscriberId) {        if(isSubscribed(parentId, subscriberId)) {            return unfollow;        } else {            return follow;        }    }        WebService static String toggleSubscription(String parentId, String subscriberId) {        List<EntitySubscription> esubs = getSubscriptionsForParentId(parentId, subscriberId);        String chatterValue = '';                try {            if(esubs.size() == 1) {                delete esubs[0];                chatterValue = follow;            } else if(esubs.size() == 0) {                EntitySubscription sub = new EntitySubscription();                sub.SubscriberId = subscriberId;                sub.ParentId = parentId;                insert sub;                chatterValue = unfollow;            }        } catch(System.DmlException e) {            ADM_errorUtils errorUtils = new ADM_errorUtils();            chatterValue = 'An error occurred updating the chatter subscription for this work record: ' + errorUtils.getErrorMessage(e);        }                return chatterValue;    }}