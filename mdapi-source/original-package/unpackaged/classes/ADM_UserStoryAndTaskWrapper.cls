public class ADM_UserStoryAndTaskWrapper {        //contains all of the tasks     private List<ADM_Task__c> m_tasks;        private TaskList m_plannedTasks;    private TaskList m_inProgressTasks;    private TaskList m_completedTasks;        private ADM_Work__c m_story;    private RecordType recordType;    private String themeCsv;    private List<String> availableStatusValues;        private Boolean m_showCompletedTasks;            /*    You must provide a story joined with its tasks to this class with the tasks having Status__c, Subject__c, Owner.Id, Owner.Name,     Hours_Remaining__c, Order__c fields loaded on those tasks.    */    public ADM_UserStoryAndTaskWrapper( ADM_Work__c story) {        m_story = story;                m_tasks = new List<ADM_Task__c>();                m_plannedTasks = new TaskList();        m_inProgressTasks = new TaskList();        m_completedTasks = new TaskList();                for (ADM_Task__c t:m_story.Tasks__r ) {                        addTask( t );        }                m_showCompletedTasks = false;    }        /*    You must provide a story joined with its tasks to this class with the tasks having Status__c, Subject__c, Owner.Id, Owner.Name,     Hours_Remaining__c, Order__c fields loaded on those tasks.    */    public ADM_UserStoryAndTaskWrapper(ADM_Work__c story, RecordType recordType) {    	this(story);    	this.recordType = recordType;    }        //GETTER    public ADM_Task__c[] getTasks() {        return m_tasks;    }        public ADM_Task__c[] getPlannedTasks() {        return m_plannedTasks.asList();    }        public ADM_Task__c[] getInProgressTasks() {        return m_inProgressTasks.asList();    }        public ADM_Task__c[] getCompletedTasks() {        return m_completedTasks.asList();    }        public Boolean getHaveCompletedTasks() {         return !m_completedTasks.isEmpty();     }    public ADM_Work__c getWork() {        return m_story;    }        public ADM_Work__c getStory() {        return getWork();        }        public Id getId() {        return m_story.Id;    }        public String getSubject() {        return m_story.Subject__c;    }        public Boolean getCapexEnabled() {        return m_story.Capex_Enabled__c;    }    public Datetime getLastModifiedDate() {        return m_story.LastModifiedDate;    }        public Boolean getShouldShowCompletedTasks() {         return m_showCompletedTasks;     }        public RecordType getRecordType() {        if(recordType == null) {            recordType = ADM_RecordType.get(m_story.recordTypeId);        }        return recordType;    }        public String getThemeNameCsv() {        if(themeCsv == null) {            themeCsv = '';            for(ADM_Theme_Assignment__c themeAssignment : m_story.Theme_Assignments__r) {                if(themeCsv.length() > 0) {                    themeCsv += ', ';                }                themeCsv += themeAssignment.Theme__r.Name;            }    	}    	return themeCsv;    }        /**     * Determines if this user story should be shown.     */    public Boolean getIsVisible() {    	if(System.today() >= m_story.Sprint__r.Start_Date__c && System.today() <= m_story.Sprint__r.End_Date__c) {    		return m_story.Closed__c == 0;    	} else {	    	return true;    	}    }        public Boolean insertedTask( ADM_Task__c t ) {            if ( m_story.Id == t.Work__c ) {            m_plannedTasks.add( t );            return true;            }        return false;    }        /**     * Updates the task within the task collection     */    public Boolean updatedTask( ADM_Task__c t ) {                if(m_plannedTasks.contains( t.Id )) {                        if(t.Status__c == 'Not Started') {                m_plannedTasks.add(t);            } else {                m_plannedTasks.remove(t.Id);                                addTask(t);            }            return true;        }                if(m_inProgressTasks.contains(t.Id)) {                        if (t.Status__c == 'In Progress' ) {                m_inProgressTasks.add(t);            } else {                m_inProgressTasks.remove(t.Id);                                addTask(t);            }            return true;            }                if(m_completedTasks.contains(t.Id)) {                        if ( t.Status__c == 'Completed' ){                m_completedTasks.add(t);            } else {                m_completedTasks.remove(t.Id);                                addTask(t);                                //if the completed tasks is now empty, then we should automatically                //turn off the show completed column                if(m_completedTasks.isEmpty()) {                    m_showCompletedTasks = false;                }            }            return true;        }                return false;        }        //PRIVATE HELPER FUNCTIONS        private void addTask( ADM_Task__c t ) {                if(t == null) {            return;        }                m_tasks.add(t);                if ( t.Status__c == 'In Progress' ) {            m_inProgressTasks.add(t);                    } else if ( t.Status__c == 'Completed' ) {            m_completedTasks.add(t);                    } else {             //if status is unrecognized assume it is in planned status            m_plannedTasks.add(t);        }    }        static testMethod void testInitialization() {        ADM_Work__c story = ADM_Work.createTestWork(ADM_Work.RECORD_TYPE_NAME_USERSTORY);        ADM_Task__c task = new ADM_Task__c(Subject__c = 'task1', Assigned_To__c = UserInfo.getUserId(), Hours_Remaining__c = 10, Starting_Hours__c = 10, Work__c = story.id);        insert task;                //refresh the story        story = [SELECT Id, Name, Subject__c, Assignee__r.FirstName, Status__c, Sprint__c, RecordType.Name, Theme__r.Name, Scheduled_Build__r.Name, Story_Points__c, (SELECT Id, Assigned_To__c, Assigned_To__r.Name, Assigned_To__r.FirstName, Hours_Remaining__c, Subject__c, Status__c, Work__c From Tasks__r ) FROM ADM_Work__c WHERE Id = :story.Id ORDER BY Priority_Rank__c ASC limit 1];                ADM_UserStoryAndTaskWrapper wrapper = new ADM_UserStoryAndTaskWrapper(story);        System.assertEquals(1, wrapper.getTasks().size(), 'Expected wrapper to return the task using getTasks()');        System.assertEquals(1, wrapper.getPlannedTasks().size(), 'Expected wrapper to assign the task to Planned');        System.assertEquals(0, wrapper.getCompletedTasks().size(), 'Expected the completed task list to be empty');        System.assertEquals(0, wrapper.getInProgressTasks().size(), 'Expected the "In Progress" task list to be empty');    }        /**     * Wrapper around a list of tasks that ensures a task is never entered twice      * and allows indexing of tasks by ID.      */    private class TaskList {        private List<ADM_Task__c> tasks = new List<ADM_Task__c>();        private Map<Id, ADM_Task__c> idIndex;                public Boolean isEmpty() {            return tasks.isEmpty();        }                public void remove(Id id) {            Integer index = getListIndex(id);            if(index != -1) {                tasks.remove(index);            }                        if(idIndex != null) {                idIndex.remove(id);            }        }                /**         * Adds a task to the list of tasks.  The tasks are kept in the order added         * If a task with the same ID is already within the collection, it is         * moved to the end.         */        public void add(ADM_Task__c task) {            if(task == null) {                return;            }                        //if the task is already found, then remove the task            Integer index = getListIndex(task.Id);            if(index != -1) {                tasks.remove(index);            }                        //add it to the end            tasks.add(task);                        //add to the index if it has been initialized            if(idIndex != null) {                idIndex.put(task.Id, task);            }        }                public Boolean contains(Id id) {            initializeIdIndex();            return idIndex.containsKey(id);        }                public List<ADM_Task__c> asList() {            return tasks;        }                /**         * Gets the index of the task within the ordered list of tasks         */        private Integer getListIndex(Id id) {            for(Integer index = 0; index < tasks.size(); index++) {                if(tasks.get(index).Id == id) {                    return index;                }            }            return -1;        }                private void initializeIdIndex() {            if(idIndex == null) {                idIndex = new Map<Id, ADM_Task__c>(tasks);            }        }    }}