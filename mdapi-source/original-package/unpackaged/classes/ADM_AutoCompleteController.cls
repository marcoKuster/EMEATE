public with sharing class ADM_AutoCompleteController {       public ADM_AutoCompleteController() {}        public ADM_AutoCompleteController(ApexPages.StandardController controller) {}    private List<String> resultsname = new List<String>();    public Boolean hasparams = false;    private Boolean hasnoresults = false;        public Boolean getHasparams() {        return hasparams;            }        public void clearValues() {                hasparams = false;            }        public Boolean getHasnoresults() {            return hasnoresults;        }    public void avoidRefresh() {}    	public PageReference searchSuggestions() {		//Initalize variables, hasparams just indicates that a search has started        resultsname.clear();           hasparams = true;        hasnoresults = false;        //Obtain current parameters        String sobjectname = System.currentPageReference().getParameters().get('objectname');        String stext = System.currentPageReference().getParameters().get('aname')+'%';        String scrumteamId = System.currentPageReference().getParameters().get('scrumteamId');                //Limit Suggestions to 10 Results        Integer iLimit = 10;             	//Validate theres an input and get results, new objects will require more else if statments     	//Could possibly replace with dynamic table name but that might lead to injection attacks     	     if(stext.length() > 2) {        	        try {	            if(sobjectname.equalsIgnoreCase('build')) {                	               for(ADM_Build__c x: [select name from ADM_Build__c where name like :stext  limit :iLimit]) {                	                    addResults(x.name);	               }    	            } else if(sobjectname.equalsIgnoreCase('user')) {            	               for(User x: [select name from User where name like :stext and IsActive = true limit :iLimit]) {                		                    addResults(x.name);	               }	            	            } else if(sobjectname.equalsIgnoreCase('scrum')) {            	               for(ADM_Scrum_Team__c x: [select name from ADM_Scrum_Team__c where name like :stext and Active__c = true limit :iLimit]) {                	                    addResults(x.name);	               }	            	            } else if(sobjectname.equalsIgnoreCase('release')) {	                for(ADM_Release__c release : [select name from ADM_Release__c where name like :stext limit :iLimit]) {	                    addResults(release.Name);	                }	            } else if(sobjectname.equalsIgnoreCase('theme')) {	                for(ADM_Theme__c el : [select name from ADM_Theme__c where name like :stext limit :iLimit]) {	                    addResults(el.Name);	                }	           	            } else if(sobjectname.equalsIgnoreCase('solution overview')) {	                for(ADM_Solution_Overview__c el : [select name from ADM_Solution_Overview__c where name like :stext limit :iLimit]) {	                    addResults(el.Name);	                }	            } else if(sobjectname.equalsIgnoreCase('sprint')) {	            	if(scrumteamId != null && scrumteamId.trim().length() > 0) {			                for(ADM_Sprint__c el : [select name from ADM_Sprint__c where (Name like :stext and Scrum_Team__c = :scrumteamId) and (End_Date__c = null or End_Date__c > : System.today()) limit :iLimit]) {		                    addResults(el.Name);		                }		                	            	} else {		                for(ADM_Sprint__c el : [select name from ADM_Sprint__c where Name like :stext limit :iLimit]) {		                    addResults(el.Name);		                }            			            	}	            }	        } catch(Exception e) {	            				resultsname.add('Unexpected Error while attempting autocomplete.'); 	        }		}		return null;	}  	private void addResults(String name) {		resultsname.add(String.escapeSingleQuotes(name));  		}  	testMethod static void testSearchSuggestionsBuilds() {        System.currentPageReference().getParameters().put('objectname', 'build');        ADM_Build__c el = ADM_Build.createTestBuild();        System.currentPageReference().getParameters().put('aname', el.Name);           ADM_Work__c work = ADM_Work.createTestWork();            ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.searchSuggestions();        System.assert(ac.getResultsName() != null);	}    	testMethod static void testSearchSuggestionsUsers() {		System.currentPageReference().getParameters().put('objectname', 'User');        User user = ADM_WorkUser.createTestUser();        user.LastName = 'O\'Shea';        update user;        System.currentPageReference().getParameters().put('aname', user.FirstName);           ADM_Work__c work = ADM_Work.createTestWork();           	ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.searchSuggestions();        System.assert(ac.getResultsName() != null);	}    	testMethod static void testSearchSuggestionsScrum() {        System.currentPageReference().getParameters().put('objectname', 'Scrum');        ADM_Scrum_Team__c el = ADM_ScrumTeam.createTestScrumTeam();                System.currentPageReference().getParameters().put('aname', el.Name);   		ADM_Work__c work = ADM_Work.createTestWork();           	ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.searchSuggestions();        System.assert(ac.getResultsName() != null);   	}    	   	testMethod static void testSearchSuggestionsRelease() {        System.currentPageReference().getParameters().put('objectname', 'release');        ADM_Release__c el = new ADM_Release__c();        el.Name = 'Loremipsumdolorsitamet' + String.valueOf(Math.random());        insert el;        System.currentPageReference().getParameters().put('aname', el.name);           ADM_Work__c work = ADM_Work.createTestWork();            ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.searchSuggestions();        System.assert(ac.getResultsName() != null);	}    	testMethod static void testSearchSuggestionsTheme() {        System.currentPageReference().getParameters().put('objectname', 'theme');        ADM_Theme__c el = new ADM_Theme__c();        el.Name = 'Loremipsumdolorsitamet' + String.valueOf(Math.random());        insert el;        System.currentPageReference().getParameters().put('aname', el.name);           ADM_Work__c work = ADM_Work.createTestWork();            ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.searchSuggestions();        System.assert(ac.getResultsName() != null);	}   	testMethod static void testSearchSuggestionsSolutionOveriew() {        System.currentPageReference().getParameters().put('objectname', 'solution overview');        ADM_Solution_Overview__c el = new ADM_Solution_Overview__c();        el.Name = 'Loremipsumdolorsitamet' + String.valueOf(Math.random());        insert el;        System.currentPageReference().getParameters().put('aname', el.name);           ADM_Work__c work = ADM_Work.createTestWork();            ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.searchSuggestions();        System.assert(ac.getResultsName() != null);	}   	testMethod static void testSearchSuggestionsSprint() {        System.currentPageReference().getParameters().put('objectname', 'sprint');        Test.startTest();            ADM_Sprint__c el = ADM_Sprint.createTestSprint();        Test.stopTest();        System.currentPageReference().getParameters().put('aname', el.name);           ADM_Work__c work = ADM_Work.createTestWork();            ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));                ac.searchSuggestions();                System.assert(ac.getResultsName() != null);	}	     testMethod static void testAvoidRefresh() {           ADM_Work__c work = ADM_Work.createTestWork();            ADM_AutoCompleteController ac = new ADM_AutoCompleteController(new ApexPages.StandardController(work));        ac.avoidRefresh();    	    }        testMethod static void testADM_AutoCompleteController() {        ADM_AutoCompleteController ac = new ADM_AutoCompleteController();        System.assert(ac != null);        ADM_Work__c work = ADM_Work.createTestWork();            ApexPages.StandardController stdController = new ApexPages.StandardController(work);        ADM_AutoCompleteController ac2 = new ADM_AutoCompleteController(stdController );        System.assert(ac2 != null);        System.assert(ac2.getHasparams() != null);        System.assert(ac2.getHasnoresults() != null);        }         	public List<String> getResultsname() {	  	//Make sure to clear past values	  	clearValues();	  	if(resultsname.isEmpty()) {	    	hasnoresults = true;	    	resultsname.add('No Results');	  	}    		return resultsname;  	}}