public class ADM_ReleasedIn {	public static Integer size(Id releaseId){		Integer i = [select count() from ADM_Released_In__c where Release__c =: releaseId];		return i;	}	static testMethod void testSize() {		ADM_Release__c release = ADM_Release.createTestRelease();		//should be zero stamps at first		System.assertEquals(0, ADM_ReleasedIn.size(release.id));		ADM_Released_In__c stamp = ADM_Release.createTestReleasedIn(release);		//now one should exist		System.assertEquals(1, ADM_ReleasedIn.size(release.id));	}	public static void relocateAll(String releaseFrom, String releaseTo, Boolean isCopy) {		List<Map<String, ADM_Released_In__c>> allReleaseStampsFrom = new List<Map<String, ADM_Released_In__c>>();		List<Map<String, ADM_Released_In__c>> allReleaseStampsTo = new List<Map<String, ADM_Released_In__c>>();		Boolean hasMatch = false;	}    public static List<Map<String, ADM_Released_In__c>> getStampsFromQuery(String query) {        Map<String, ADM_Released_In__c> stamps = new Map<String, ADM_Released_In__c>();        List<Map<String, ADM_Released_In__c>> allStamps = new List<Map<String, ADM_Released_In__c>>();        Integer i = 0;        for( ADM_Released_In__c stamp : Database.query(query)){            stamps.put(stamp.Work__c, stamp);            i++;            if(stamps.size() == 1000) {                allStamps.add(stamps);                stamps = new Map<String,ADM_Released_In__c>();            }        }        if(!stamps.isEmpty()) {            allStamps.add(stamps);        }        return allStamps;    }	public static List<Map<String, ADM_Released_In__c>> getStampsForRelease(Id releaseId) {		Map<String, ADM_Released_In__c> stamps = new Map<String, ADM_Released_In__c>();		List<Map<String, ADM_Released_In__c>> allStamps = new List<Map<String, ADM_Released_In__c>>();		Integer i = 0;		for(ADM_Released_In__c stamp : [select Work__c, Work__r.Name, CreatedDate, Reverted__c, Stamped_On__c from ADM_Released_In__c where Release__c = :releaseID order by Work__r.Name, CreatedDate]) {			stamps.put(stamp.Work__c, stamp);			i++;			if(stamps.size() == 1000) {				allStamps.add(stamps);				stamps = new Map<String,ADM_Released_In__c>();			}		}		if(!stamps.isEmpty()) {			allStamps.add(stamps);		}		return allStamps;	}	static testMethod void testGetStampsForRelease() {		ADM_Release__c release = ADM_Release.createTestRelease();		ADM_Released_In__c stamp = ADM_Release.createTestReleasedIn(release);		List<Map<String, ADM_Released_In__c>> stampMap = ADM_ReleasedIn.getStampsForRelease(release.id);		System.assert(stampMap != null);		System.assertEquals(1, stampMap.size());		System.assert(stampMap.get(0).containsKey(stamp.Work__c));	}	public static List<List<ADM_Released_In__c>> getAllForRelease(String Id) {		List<List<ADM_Released_In__c>> allStamps = new List<List<ADM_Released_In__c>>();		List<ADM_Released_In__c> stamps = new List<ADM_Released_In__c>();		Integer numStamps = 0;		for(ADM_Released_In__c stamp : [select Work__c, Selected__c, Work__r.Name, Work__r.Scheduled_Build__c, Work__r.Scheduled_Build__r.Name, Work__r.Subject__c, Work__r.Status__c, Work__r.Priority__c, CreatedDate, CreatedBy.Name, LastModifiedDate, LastModifiedBy.Name, Reverted__c, Stamped_On__c from ADM_Released_In__c where Release__c = :Id order by CreatedDate]) {			stamps.add(stamp);						numStamps++;			if(stamps.size() == 1000) {				allStamps.add(stamps);				stamps.clear();				return allStamps;			}		}		if(!stamps.isEmpty()) {			numStamps = numStamps + stamps.size();			allStamps.add(stamps);			stamps.clear();		}		return allStamps;	}	static testMethod void testGetAllForRelease() {		ADM_Release__c release = ADM_Release.createTestRelease();		ADM_Released_In__c stamp = ADM_Release.createTestReleasedIn(release);		List<List<ADM_Released_In__c>> stampListOfLists = ADM_ReleasedIn.getAllForRelease(release.id);		System.assert(stampListOfLists != null);		System.assertEquals(1, stampListOfLists.size());	}}