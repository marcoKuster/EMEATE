/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * * Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an organization are executed whenever Apex code is deployed * to a production organization to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production organization. In addition, all triggers must have some code coverage. * * The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the organization size limit for all Apex scripts. * * See the Apex Language Reference for more information about Testing and Code Coverage. */@isTestprivate class QA_addUStoTPExtensionTest {	private static QA_Test_Plan__c testPlan {		get {			if(testPlan == null) {				testPlan = new QA_Test_Plan__c();		        testPlan.Name = 'new Test Plan';		        testPlan.Description__c = 'just really brief';		        insert testPlan;			}			return testPlan;		}		set;	}	private static ADM_Work__c userStory {		get {			if(userStory == null) {				userStory = ADM_Work.setupTestWork('User Story');				userStory.Priority__c = 'P1';			}			return userStory;		}		set;	}	private static ADM_Work__c work {		get {			if(work == null) {				work = ADM_Work.setupTestWork('Bug', 'P1');			}			return work;		}		set;	}	private static String testPlanId {		get {			if(testPlanId == null) {				testPlanId = testPlan.Id;			}			return testPlanId;		}		set;	}/** * testcaseID * @userStory * @hierarchy * @expectedResults */    static testMethod void verifyMembers() {        System.assertNotEquals(null, testPlan);        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        System.assertEquals(0,controller.membersToDelete.size());    }/** * testcaseID * @userStory * @hierarchy * @expectedResults */    static testMethod void verifyAddMembers() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        System.assertEquals(5, controller.addMember().size());    }/** * testcaseID * @userStory * @hierarchy * @expectedResults */    static testMethod void verifyRetUrl() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        Pagereference pr = controller.getRetURL();        System.assertEquals(true, pr.getUrl().toLowerCase().contains('/home/home.jsp'), '->' + pr.getUrl());    }/** * testcaseID * @userStory * @hierarchy * @expectedResults */    static testMethod void verifyTestPlanName() {    	ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        System.assertEquals(testPlan.Name, controller.testPlanName);    }    /** * testcaseID a0B20000009dmS4EAI * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Add a User Story * @expectedResults A user story is saved to the test plan */    static testMethod void verifyAddingUsToTp() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        insert userStory;        List<QA_Test_Execution__c> members = controller.members;        members[0].User_Story__c = userStory.Id;        Pagereference pr = controller.saveUS();        System.assertNotEquals(true, Apexpages.hasMessages());    } /** * testcaseID a0B20000009dmU4EAI * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Add a User Story * @expectedResults 20 user stories are saved but User story # 21 is not saved in the test plan, error message occurs */    static testMethod void verifyAddingMoreThanTwentyUsToTp() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        List<ADM_Work__c> userStories = new List<ADM_Work__c>();        for(Integer i = 0; i < 25; i++) {        	ADM_Work__c temp = userStory.clone(true,false);        	temp.Subject__c =+ ' #' + String.valueOf(i);        	temp.Test_Plan__c = testPlanId;        	userStories.add(temp);        }        userStories.add(userStory);        insert userStories;        List<QA_Test_Execution__c> members = controller.members;        members[0].User_Story__c = userStory.Id;        Pagereference pr = controller.saveUS();        System.assertNotEquals(false, Apexpages.hasMessages());    } /** * testcaseID a0B20000009dmS3EAI * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Remove a User Story * @expectedResults A user story is removed from the test plan */    static testMethod void verifyDeletingUsFromTP() {        userStory.Test_Plan__c = testPlanId;        insert userStory;        ApexPages.currentPage().getParameters().put('deleteId', userStory.Id);        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        Pagereference pr = controller.deleteMember();        System.assertNotEquals(true, Apexpages.hasMessages());    }    /** * testcaseID a0B20000009f84nEAA * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Remove a User Story * @expectedResults Error occurs: No work was entered to add to this test plan */    static testMethod void verifyAddingUsToTpWithNothingToAdd() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        Pagereference pr = controller.saveUS();        System.assertNotEquals(false, Apexpages.hasMessages());    }    /** * testcaseID a0B20000009dmU3EAI * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Add a User Story * @expectedResults A user story is not saved twice to the test plan */    static testMethod void verifyAddingUsToTpWithDuplicates() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        insert userStory;        List<QA_Test_Execution__c> members = controller.members;        members[0].User_Story__c = userStory.Id;        members[1].User_Story__c = userStory.Id;        Pagereference pr = controller.saveUS();        System.assertNotEquals(false, Apexpages.hasMessages());    }    /** * testcaseID a0B20000009f87wEAA * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Add a User Story * @expectedResults Error occurs: Value does not exist or is not a User Story */    static testMethod void verifyAddingUsToTpWithWork() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        insert work;        List<QA_Test_Execution__c> members = controller.members;        members[0].User_Story__c = work.Id;        Pagereference pr = controller.saveUS();        System.assertNotEquals(false, Apexpages.hasMessages());    }    /** * testcaseID a0B20000009f87xEAA * @userStory a07B0000000DfN3 * @hierarchy GUS.QaforceToGUS.Add/Remove User Stories.Add a User Story * @expectedResults Error occurs: Work already assigned to test plan */    static testMethod void verifyAddingUsToTpWithUSAlreadyInTP() {        ApexPages.currentPage().getParameters().put('id', testPlanId);        Apexpages.Standardcontroller standardController = new Apexpages.Standardcontroller(testPlan);        QA_addUStoTPExtension controller = new QA_addUStoTPExtension(standardController);        userStory.Test_Plan__c = testPlanId;        insert userStory;        List<QA_Test_Execution__c> members = controller.members;        members[0].User_Story__c = userStory.Id;        Pagereference pr = controller.saveUS();        System.assertNotEquals(true, Apexpages.hasMessages());    }}