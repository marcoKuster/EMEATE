public with sharing class QA_TEReportExtension {    private Id id;    private String sobjectType;    private Double total = 0;    private Double inProgress = 0;    private Double passed = 0;    private Double failed = 0;    private Double blocked = 0;    private Double planned = 0;        private Boolean isInitialized = false;        public void setId(Id newId) {    	    	this.id = newId;    }        public Id getId() {    	return id;    }        public String getSObjectType() {    	return this.sobjectType;    }        public void setSObjectType(String sot) {    	this.sobjectType = sot;    	    }            public QA_TEReportExtension() {        /*This controller is called from QA_TestExecutionReport.component on the Work Detail Page            The id isn't set at the time this is initialized so it gets it from the paremeters */        try {                        this.id = ApexPages.currentPage().getParameters().get('id');        } catch (Exception e) {                    }              }        public QA_TEReportExtension(ApexPages.StandardController stdController){        try {		this.id = stdController.getId(); //get the id of the controller calling the class        	this.sobjectType = String.valueOf(stdController.getRecord().getSObjectType()); //get the type of controller calling the class	} catch (Exception e) {                    }       }		private void initController() {						//finalize initialization once the comonent parameter for work is set.  If you attempt this in the constructor work will be null because visual    	//force components call the constructor before the components parameters have been populated    	if (this.sobjectType == 'ADM_Sprint__c'){            for(QA_Test_Execution__c curTE: [Select Status__c From QA_Test_Execution__c WHERE User_Story__r.Sprint__c  =: id]){                if (curTE.Status__c == 'In Progress') this.inProgress++;                else if (curTE.Status__c == 'Passed') this.passed++;                else if (curTE.Status__c == 'Failed') this.failed++;                else if (curTE.Status__c == 'Blocked') this.blocked++;                else if (curTE.Status__c == 'Planned') this.planned++;                                  this.total++;            }    	} else if(this.sobjectType == 'QA_Test_Plan__c'){            for(QA_Test_Execution__c curTE: [Select Status__c From QA_Test_Execution__c WHERE User_Story__r.Test_Plan__c  =: id]){                if (curTE.Status__c == 'In Progress') this.inProgress++;                else if (curTE.Status__c == 'Passed') this.passed++;                else if (curTE.Status__c == 'Failed') this.failed++;                else if (curTE.Status__c == 'Blocked') this.blocked++;                else if (curTE.Status__c == 'Planned') this.planned++;                                  this.total++;            }        } else {                        for(QA_Test_Execution__c curTE: [Select Status__c From QA_Test_Execution__c WHERE User_Story__c  =: id]){                if (curTE.Status__c == 'In Progress') this.inProgress++;                else if (curTE.Status__c == 'Passed') this.passed++;                else if (curTE.Status__c == 'Failed') this.failed++;                else if (curTE.Status__c == 'Blocked') this.blocked++;                else if (curTE.Status__c == 'Planned') this.planned++;                                  this.total++;            }        }					}	    public String getInProgress() {        ensureInitialized();        if (this.total==0) return 'NaN%';        return (this.inProgress.intValue() + ' : ' + Math.round((this.inProgress/this.total)*100) + '%');    }        public String getPassed() {        ensureInitialized();        if (this.total==0) return 'NaN%';        return (this.passed.intValue() + ' : ' + Math.round((this.passed/this.total)*100) + '%');    }        public String getFailed() {        ensureInitialized();        if (this.total==0) return 'NaN%';        return (this.failed.intValue() + ' : ' + Math.round((this.failed/this.total)*100) + '%');    }        public String getBlocked() {        ensureInitialized();        if (this.total==0) return 'NaN%';        return (this.blocked.intValue() + ' : ' + Math.round((this.blocked/this.total)*100) + '%');    }        public String getPlanned() {        ensureInitialized();        if (this.total==0) return 'NaN%';        return (this.planned.intValue() + ' : ' + Math.round((this.planned/this.total)*100) + '%');    }        public String getTotal() {    	ensureInitialized();        return (Math.round(this.total).format());    }        private void ensureInitialized() {        if(isInitialized) {        	return;        }        this.initController();        this.isInitialized = true;    }        private static testMethod void testReportNoTEs() {        ADM_Work__c us = ADM_Work.createTestWork(ADM_Work.RECORD_TYPE_NAME_USERSTORY);            	        ApexPages.standardController control = new ApexPages.standardController(us);         		QA_TEReportExtension te = new QA_TEReportExtension(control);		te.id = us.id;		system.assertEquals('NaN%',te.getPassed());		system.assertEquals('NaN%',te.getFailed());		system.assertEquals('NaN%',te.getBlocked());		system.assertEquals('NaN%',te.getPlanned());		system.assertEquals('NaN%',te.getInProgress());    }        private static testMethod void testReportWithTEs() {        ADM_Work__c us = ADM_Work.createTestWork(ADM_Work.RECORD_TYPE_NAME_USERSTORY);                      ApexPages.standardController control = new ApexPages.standardController(us);                 //create a Test Case        if([select count() from QA_Hierarchy__c where Name = 'Analytics'] == 0) {            QA_Hierarchy__c analyticsHierarchy = new QA_Hierarchy__c();            analyticsHierarchy.Name = 'Analytics';            analyticsHierarchy.Depth__c = 0;            insert analyticsHierarchy;        }        QA_Test_Case__c testcase = new QA_Test_Case__c();        testcase.Hierarchy__c = 'Analytics.Testing';        testcase.Brief_Description__c = 'Automation Test';        testcase.Expected_Results__c = 'Pass';        testcase.Execution_Type__c = 'Manual';        insert(testcase);                //create a Test Execution record with Status as Passed and Number of Execution = 0 and Bugs = null        //This should invoke the trigger and automatically update Number of Execution = 1 when it is Passed or Failed        QA_Test_Execution__c te1 = new QA_Test_Execution__c();        te1.Test_Case__c = testcase.id;        te1.Status__c = 'Passed';        te1.Assignee__c = UserInfo.getUserId();        te1.User_Story__c = us.id;                QA_Test_Execution__c te2 = new QA_Test_Execution__c();        te2.Test_Case__c = testcase.id;        te2.Status__c = 'Failed';        te2.Assignee__c = UserInfo.getUserId();        te2.User_Story__c = us.id;                QA_Test_Execution__c te3 = new QA_Test_Execution__c();        te3.Test_Case__c = testcase.id;        te3.Status__c = 'Blocked';        te3.Assignee__c = UserInfo.getUserId();        te3.User_Story__c = us.id;                QA_Test_Execution__c te4 = new QA_Test_Execution__c();        te4.Test_Case__c = testcase.id;        te4.Status__c = 'Planned';        te4.Assignee__c = UserInfo.getUserId();        te4.User_Story__c = us.id;                QA_Test_Execution__c te5 = new QA_Test_Execution__c();        te5.Test_Case__c = testcase.id;        te5.Status__c = 'In Progress';        te5.Assignee__c = UserInfo.getUserId();        te5.User_Story__c = us.id;                    insert(te1);        insert(te2);        insert(te3);        insert(te4);        insert(te5);                QA_TEReportExtension te = new QA_TEReportExtension(control);        te.id = us.id;                system.assertEquals('1 : 20%',te.getPassed(), ' Passed:' + te.passed + ' Total:' + te.total);        system.assertEquals('1 : 20%',te.getFailed());        system.assertEquals('1 : 20%',te.getBlocked());        system.assertEquals('1 : 20%',te.getPlanned());        system.assertEquals('1 : 20%',te.getInProgress());                system.assertEquals('5',te.getTotal());    }}