public with sharing class ADM_AddWorkToPrioritizerExtension {    //test12345689
    public transient String message;    transient String filterId { get; set; }    Integer hasBeenLoaded { get; set; }    public List<String> messages {    	get {    		if(messages == null) messages = new List<String>();    		return messages;    	}    	set; 	}    public String templateName {     	get {    		return ADM_Work.TEMPLATE_RECORD_TYPE_NAME;    	}    	set;    }        public String getMessage() {         return message;    }        public String scrumteamId {         get {            if(scrumteamId == null) scrumteamId = System.currentPageReference().getParameters().get('scrumteamId');            if(scrumteamId == null) scrumteamId = '';            return scrumteamId;        }         set;     }        public ADM_Scrum_Team__c scrumteam {    	get {            if(scrumteam == null) {	            List<ADM_Scrum_Team__c> teams = ADM_ScrumTeam.get('Id', new List<String>{scrumteamId});	            if(!teams.isEmpty()) {	                scrumteam = teams.get(0);
	            } else {	            	scrumteam = new ADM_Scrum_Team__c();   
	            }            }            return scrumteam;    	}    	set;    }            public ADM_AddWorkToPrioritizerExtension(ApexPages.StandardController controller) {    }        public ADM_AddWorkToPrioritizerExtension(ApexPages.StandardsetController c) {    	setController = c;    	    	setController.setPageSize(10);    	        message = System.currentPageReference().getParameters().get('message');        filterId = System.currentPageReference().getParameters().get('filterId');                if(hasBeenLoaded == null) {            if(message != null) {                ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,message));            }                           if(filterId != null) {            	setController.setFilterId(filterId);            }            hasBeenLoaded = 1;                          }    }        public Apexpages.Standardsetcontroller setController { get; set; }        public List<ADM_WorkWrapper> workWrapper { get; set; }        public List<ADM_WorkWrapper> getWorks() {        workWrapper = new List<ADM_WorkWrapper>();        List<String> ids = new List<String>();                if(setController == null || setController.getRecords() == null) return workWrapper;                for(ADM_Work__c work : (List<ADM_Work__c>) setController.getRecords()) {            ids.add(work.Id);        }                if(ids.isEmpty()) {            ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'No records to display'));        } else {        	List<ADM_Work__c> workFromSetController = ADM_Work.getAllBy('Id', ids, 1, 1000, 'Id', 'ASC');        	for(ADM_Work__c work : workFromSetController) {        		workWrapper.add(new ADM_WorkWrapper(work, work.Use_Prioritizer__c));        	}        }                return workWrapper;    }          public Integer rowStart {        get {                   if(!setController.getHasPrevious()) {                if(setController.getResultSize() == 0) {                    return 0;                } else {                    return 1;                }            } else {                return setController.getPageSize() * (setController.getPageNumber() - 1) + 1;            }        }        set;    }         public Integer rowEnd {        get {            if(!setController.getHasNext()) {                return setController.getResultSize();            } else {                return setController.getPageSize() * setController.getPageNumber();            }        }        set;    }        public Pagereference create() {       Pagereference pr = Page.ADM_WorkEdit;       pr.setRedirect(true);       return pr;       }        public Pagereference prioritize() {        return null;    }        public PageReference save() {        try {            List<ADM_Work__c> updateList = new List<ADM_Work__c>();            if(workWrapper != null) {                for(ADM_WorkWrapper w : workWrapper) {                	if(w.work.Use_Prioritizer__c != w.checked) { 	                    w.work.Use_Prioritizer__c = w.checked;	                    updateList.add(w.work);                	}                }                if(updateList.isEmpty()) {                    ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'Nothing to update'));                	                    return null;                }                update updateList;            }        } catch(System.Exception e) {        	return null;        }        		Pagereference pr = Page.ADM_AddWorkToPrioritizer;		pr.setRedirect(true);		pr.getParameters().put('message','Update view successful');		pr.getParameters().put('filterId',setController.getFilterId());		pr.getParameters().put('scrumteamId', scrumteamId);		return pr;    }}