public with sharing class QA_AddTestCasesController {       TCContainer[] testCases = new TCContainer[]{};    Integer numCols = 10;    Boolean initRun = false;        //container class so that I can number the test cases and hold insert errors    public class TCContainer {    	QA_Test_Case__c TC;    	Integer index;    	Boolean insertCase;    	Boolean isHierError = false;    	String hierError;    	Boolean isDescError = false;    	String descError;    	public TCContainer (QA_Test_Case__c tc, Integer i){ //constructor for the container    		this.index = i;    		this.TC = tc;    		this.insertCase = false;    		this.isHierError = false;    	}    	public Integer getIndex(){ return this.index; }    	public QA_Test_Case__c getTc(){ return this.TC; }    	public Boolean getIsHierError(){ return this.isHierError; }    	public String getHierError() { return this.hierError; }    	public Boolean getIsDescError(){ return this.isDescError; }    	public String getDescError(){ return this.descError; }    }        //initialized the variables and adds the hierarchy to the test cases    public String getInit() {    	if (!initRun) {	    	for(Integer i=1; i<=numCols; i++) {	    		QA_Test_Case__c t = new QA_Test_Case__c(); 	    		t.Hierarchy__c = ApexPages.currentPage().getParameters().get('hier');	    		t.Brief_Description__c = '';	    		testCases.add(new TCContainer(t,i));	    	}	    	initRun = true;    	}    	return null;    }        //returns the test cases for the repeat component    public TCContainer[] getTestCases() {    	return testCases;    }        //queries the Test_Case__c object and returns the list of possible options for the Execution type field    //this was used instead of the default apex:inputType component because they default display for this field is     //very bulky and didn't fit well in the spreadsheet    public List<SelectOption> getExecOptions() {        List<SelectOption> execOptions = new List<SelectOption>();		Schema.DescribeFieldResult F = QA_Test_Case__c.Execution_Type__c.getDescribe();        List<Schema.PicklistEntry> executionTypes = F.getPicklistValues();        for (Schema.PicklistEntry executionType : executionTypes )        execOptions.add( new SelectOption( executionType.getLabel(), executionType.getLabel() ) );        return execOptions;    }        public PageReference save() {    	Boolean isError = false;    	QA_Test_Case__c[] toInsert = new QA_Test_Case__c[]{};    	    	QA_Hierarchy__c[] temp = [SELECT Name FROM QA_Hierarchy__c WHERE Depth__c = 0];    	String[] baseHierArr = new List<String>();    	for (QA_Hierarchy__c h : temp) baseHierArr.Add(h.Name);    	    	for (TCContainer t : testCases) {    		Boolean noErrorAndNotEmpty = true;    		t.hierError = '';    		t.isHierError = false;    		t.descError = '';    		t.isDescError = false;    		//check to see if everything is empty and skip the error checking if it is    		String[] hierArr = new List<String>();    		if (t.tc.Hierarchy__c != null) hierArr = t.tc.Hierarchy__c.split('\\.',0);    		    		    		//skip validation if the row is blank     		if (t.tc.Hierarchy__c == null && t.tc.Brief_Description__c == null && t.tc.Steps_To_Reproduce__c == null && t.tc.Expected_Results__c == null) continue;    		    		//skip validation if the row is blank (but has the hierarchies filled in from the param)    		if (null != ApexPages.currentPage().getParameters().get('hier') && !ApexPages.currentPage().getParameters().get('hier').equals(''))    			if (t.tc.Hierarchy__c != null &&     				t.tc.Brief_Description__c == null && t.tc.Steps_To_Reproduce__c == null && t.tc.Expected_Results__c == null)    					continue;    		    		if (t.tc.Hierarchy__c == null) {    			isError = true;    			t.isHierError = true;    			t.hierError = 'Hierarchy required!';    			noErrorAndNotEmpty=false;    		} else if (t.tc.Brief_Description__c == null) {    			isError = true;    			t.isDescError = true;    			t.descError = 'Brief Description required!';    			noErrorAndNotEmpty=false;    		} else if (hierArr.size() < 2) {    			isError = true;	    			t.isHierError = true;    			t.hierError = 'The hierarchy must have a depth of at least 2!';    			noErrorAndNotEmpty=false;    		} else if (hierArr.size() > 5) {    			isError = true;    			t.isHierError = true;    			t.hierError = '	The hierarchy can have a depth of at most 5!';    			noErrorAndNotEmpty=false;    		} else {    			Integer ifValidHier = -1;				for(Integer j=0; j < baseHierArr.size(); j++){					if(hierArr.get(0).equalsIgnoreCase(baseHierArr.get(j))){						t.tc.Hierarchy__c.replaceFirst(hierArr.get(0), baseHierArr.get(j));						ifValidHier = 1;						break;					}				}				for(Integer j=0; j<hierArr.size(); j++){					if(hierArr[j].equals('')){						ifValidHier = -2;						break;					}				}	    			if(ifValidHier == -1){					isError = true;					t.isHierError = true;					t.hierError = 'Please provide a valid base hierarchy!';					noErrorAndNotEmpty=false;    			} else if (ifValidHier == -2){    				isError = true;    				t.isHierError = true;    				t.hierError = 'Hierarchy elements must not be empty!';    				noErrorAndNotEmpty=false;    			}    		}    		    		if(noErrorAndNotEmpty) toInsert.add(t.tc); //if there are no errors and the row contains info    		    	}    	if (!isError) {	    	try {	    		insert(toInsert);	    	} catch (Exception e) {	    			    		return null;	    	}	    	return Page.QA_TestCaseLibrary;    	}    	else return null;    }        public PageReference cancel() {    	testCases.clear();    	return Page.QA_TestCaseLibrary;	    }        public PageReference addRow() {    	if (numCols >= 200) {    		ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'You cannot add more than 200 Test Cases at a time!');            ApexPages.AddMessage(myMsg);  	    		return null;    	}    	    	for(Integer i=0; i<5; i++) {	    	QA_Test_Case__c temp = new QA_Test_Case__c();	    	temp.Hierarchy__c = ApexPages.currentPage().getParameters().get('hier');	    	numCols++;	    	testCases.add(new TCContainer(temp,numCols));    	}    	    	return null;	    }        /**    *@testcaseID a0B20000009dtSeEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Add 5 rows    *@userstory a07B0000000DfMmIAK    *@expectedResults 5 empty rows should be added along with the rows that already existed*/ /**    *@testcaseID a0B20000009dtScEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case with all fields    *@userstory a07B0000000DfMmIAK    *@expectedResults A test case gets created that contains a record ID, hierarchy, brief description, long description, expected results, priority and execution type. User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtSgEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case without brief description    *@userstory a07B0000000DfMmIAK    *@expectedResults No test case gets created (an error message should show up indicating brief description is a mandatory field). User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtUSEAY    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case without execution type    *@userstory a07B0000000DfMmIAK    *@expectedResults A test case gets created that contains a record ID, hierarchy, brief description, long description, expected results, priority. Execution type is an optional field. User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtUOEAY    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case without expected results    *@userstory a07B0000000DfMmIAK    *@expectedResults A test case gets created that contains a record ID, hierarchy, brief description, long description, priority and execution type. Expected results is an optional field. User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtSfEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case without hierarchy    *@userstory a07B0000000DfMmIAK    *@expectedResults No test case gets created (an error message should show up indicating hierarchy is a mandatory field). User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtUNEAY    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case without long description    *@userstory a07B0000000DfMmIAK    *@expectedResults A test case gets created that contains a record ID, hierarchy, brief description, expected results, priority and execution type. Long description is an optional field. User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtU8EAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create new test case without priority    *@userstory a07B0000000DfMmIAK    *@expectedResults A test case gets created that contains a record ID, hierarchy, brief description, long description, expected results and execution type. Priority is an optional field. User is taken back to the test case library page*/ /**    *@testcaseID a0B20000009dtSdEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Create several test cases    *@userstory a07B0000000DfMmIAK    *@expectedResults All test cases should be created and user is taken back to the Test case Library page*/ /**    *@testcaseID a0B20000009dtShEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Tab down thru fields    *@userstory a07B0000000DfMmIAK    *@expectedResults User is able to navigate field by field by holding down the SHIFT key and press ARROW UP/DOWN to move down*/ /**    *@testcaseID a0B20000009dtSkEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Tab left thru fields    *@userstory a07B0000000DfMmIAK    *@expectedResults User is able to navigate left by using SHIFT-TAB/TAB key*/ /**    *@testcaseID a0B20000009dtSjEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Tab right thru fields    *@userstory a07B0000000DfMmIAK    *@expectedResults User is able to navigate right by using the tab key*/ /**    *@testcaseID a0B20000009dtSiEAI    *@hierarchy GUS.QaforceToGUS.Add Test Cases.Tab up thru fields    *@userstory a07B0000000DfMmIAK    *@expectedResults User is able to navigate field by field by holding down the SHIFT key and press ARROW UP/DOWN to move down*/    private static testMethod void testAddTestCases() {    	if([select count() from QA_Hierarchy__c where Name = 'API'] == 0) {            QA_Hierarchy__c hierarchy = new QA_Hierarchy__c();            hierarchy.Name = 'API';            hierarchy.Depth__c = 0;            insert hierarchy;    	}        //create a test case        QA_Test_Case__c testTC = new QA_Test_Case__c();        testTC.Brief_Description__c = 'TestTC1';        testTC.Hierarchy__c = 'API.TCMassEdit.Test';        testTC.Priority__c = 'Medium';        testTC.Execution_Type__c = 'Manual';        testTC.Steps_To_Reproduce__c = 'I like testing :)';        testTC.Expected_Results__c = 'The test is expected to pass';        insert(testTC);                                 QA_Test_Case__c testTC2 = new QA_Test_Case__c();        testTC2.Brief_Description__c = 'TestTC1';        testTC2.Hierarchy__c = 'API.TCMassEdit.Test';        testTC2.Priority__c = 'Medium';        testTC2.Execution_Type__c = 'Manual';        testTC2.Steps_To_Reproduce__c = 'I like testing :)';        testTC2.Expected_Results__c = 'The test is expected to pass';        insert(testTC2);        delete(testTC2);                                 //create a sprint       	Date startDate = Date.today().addDays(60); //sprint is created two months in the future with a span of 2 weeks.  		Date endDate = Date.today().addDays(74);				String sprintMonth = startDate.month().format();		if(sprintMonth.length() == 1) {			sprintMonth = '0' + sprintMonth;		}		String sprintName = startDate.year() + '.' + sprintMonth + 'aTCTest';				ADM_Scrum_Team__c st = new ADM_Scrum_Team__c(Name='Test Case Library Test Team');		st.Cloud__c = 'Chatter';		insert st;		ADM_Sprint__c testSprint = new ADM_Sprint__c(Name = sprintName, Scrum_Team__c = st.id, Start_Date__c = startDate, End_Date__c = endDate);		insert testSprint;                 Test.startTest();         //create a user story        ADM_Work__c testUS = ADM_Work.setupTestWork('User Story');        testUS.Sprint__c = testSprint.Id;        testUS.Priority__c = 'P1';        insert(testUS);                //create a test execution        QA_Test_Execution__c testTE = new QA_Test_Execution__c();        testTE.Test_Case__c = testTC.Id;        testTE.Status__c = 'Blocked';        testTE.Bugs__c = '123456,234567';        testTE.User_Story__c = testUS.Id;        testTE.Assignee__c = ADM_WorkUser.createTestUser().id;        testTE.Number_Of_Executions__c = 1;        insert(testTE);                                        ADM_Work__c testBug = ADM_Work.createTestWork('Bug');        List<QA_ExecutionBug__c> tempEBList = new QA_ExecutionBug__c[]{};        for(Integer i=0; i<201; i++) {        	QA_ExecutionBug__c testEB = new QA_ExecutionBug__c();        	testEB.Execution__c = testTE.Id;        	testEB.Work__c = testBug.Id;        	tempEBList.add(testEB);        }        insert(tempEBList);    	    	Test.stopTest();    	    	/////////////////////////    	// TESTING THIS CLASS  //    	/////////////////////////    	    	QA_AddTestCasesController testATC = new QA_AddTestCasesController();    	System.assertEquals(testATC.cancel().getURL(), Page.QA_TestCaseLibrary.getURL());     	testATC.getInit();    	System.assertEquals(testATC.getTestCases(), testATC.testcases);    	System.assertEquals(testATC.getExecOptions()[0].getLabel(), 'Manual');    	    	System.assertEquals(testATC.testCases[0].getIndex(), 1);    	QA_Test_Case__c t = new QA_Test_Case__c();    	t.Hierarchy__c = null;	    t.Brief_Description__c = '';    	System.assertEquals(testATC.testCases[0].getTc(), t);    	System.assertEquals(testATC.testCases[0].getIsHierError(), false);    	System.assertEquals(testATC.testCases[0].getHierError(), null);    	System.assertEquals(testATC.testCases[0].getIsDescError(), false);    	System.assertEquals(testATC.testCases[0].getDescError(), null);    	testATC.addRow();    	System.assertEquals(testATC.numCols, 15);    	testATC.save();    	// testCases[0], Hierarchy has content, Brief_Description = null,     	// Expected_Results__c = null, Steps_To_Reproduce__c = null    	testATC.testCases[0].tc.Hierarchy__c = 'Analytics.One.Two.Three.Four'; 		// testCases[1], something in Brief_Description, Hierarchy = null  		testATC.testCases[1].tc.Brief_Description__c = 'This is a brief description'; 		testATC.testCases[1].tc.Hierarchy__c = null; 		// testCases[2], briefdesc empty and all others have something there 		testATC.testCases[2].tc.Brief_Description__c = null; 		testATC.testCases[2].tc.Hierarchy__c = 'Hierarchy here'; 		testATC.testCases[2].tc.Expected_Results__c = 'These are the expected results'; 		testATC.testCases[2].tc.Steps_To_Reproduce__c = 'These are the steps to reproduce'; 		// testCases[3],hiersize < 2 		testATC.testCases[3].tc.Brief_Description__c = 'Brief Desc here'; 		testATC.testCases[3].tc.Hierarchy__c = 'Hierarchy.Here'; 		testATC.testCases[3].tc.Expected_Results__c = 'These are the expected results'; 		testATC.testCases[3].tc.Steps_To_Reproduce__c = 'These are the steps to reproduce'; 		// testCases[4], hiersize > 5 		testATC.testCases[4].tc.Brief_Description__c = 'Brief Desc here'; 		testATC.testCases[4].tc.Hierarchy__c = 'Hierarchy.Here.More.Haha.Random.Big.ReallyLong.More.Again'; 		testATC.testCases[4].tc.Expected_Results__c = 'These are the expected results'; 		testATC.testCases[4].tc.Steps_To_Reproduce__c = 'These are the steps to reproduce'; 		// testCases[5], completely nulled model 		testATC.testCases[5].tc.Brief_Description__c = null; 		testATC.testCases[5].tc.Hierarchy__c = null; 		testATC.testCases[5].tc.Expected_Results__c = null; 		testATC.testCases[5].tc.Steps_To_Reproduce__c = null; 		    	testATC.save();    	System.assertEquals(testATC.testCases[1].isHierError, true);    	//repeat with hierarchy less then 2 (should also trigger errror flag)    	testATC.testCases[4].tc.Hierarchy__c = 'Hierarchy';    	testATC.save();    	System.assertEquals(testATC.testCases[4].isHierError, true);    	//repeat with empty hierarchy - should also trigger error    	testATC.testCases[4].tc.Hierarchy__c = '';    	testATC.save();    	System.assertEquals(testATC.testCases[4].isHierError, true);    	    }        private static testMethod void testHeirarchyDepthIsEnforced() {    	    	    	    	    }    }