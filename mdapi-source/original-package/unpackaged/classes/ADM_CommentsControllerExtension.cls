public with sharing class ADM_CommentsControllerExtension {        //member variable to hold the current work item being viewed - initialized in standard controller    ADM_Work__c work;      ADM_Comment__c[] comments;    ADM_Severity__c[] severities;    ADM_Work_Subscriber__c[] subscribers;    ADM_Work_Subscriber__c subscriber;    User user;    String subscribe;    String priority;    String status;    String helpStatus;    String workType;         String severity;     String productArea;    String majorFunctionalArea;    String productChild;    String showAllComments;     RecordType recordType;    String tabStyle;        Map<String, Boolean> editableFields;    Map<String, Boolean> fieldsBeingEdited;    Map<String, String> allComments;        Boolean hasComments;        public ADM_CommentsControllerExtension() {     	    }              public ADM_CommentsControllerExtension(ApexPages.StandardController stdController) {        //populate the work object        this.work = (ADM_Work__c)stdController.getRecord();        initController();    }		        public ADM_Work__c getWork() { return this.work; }	public void setWork(ADM_Work__c w) {    	if(this.work == null) {	    	this.work = w;	    	//finalize initialization once the comonent parameter for work is set.  If you attempt this in the constructor work will be null because visual	    	//force components call the constructor before the components parameters have been populated	    		    	initController();    	}	    }        private void initController() {    	//grab the user data and set it        setUser();                //initialize the comments to not be expanded        toggleComments();        if(work != null && work.Id != null) {                        //set the comments array if we haven't already            if(comments == null) {                setComments();                setHasComments();            }                    }        	    }        private void setUser() { this.user = ADM_WorkUser.get(UserInfo.getUserId()); }        public User getUser() { return this.user; }        // here we're deciding whether or not we'd like to show all of the comments for a work record on the screen the user is viewing    // we're gonna use this later to do a AJAX update to the page    public void toggleComments() {                       if(allComments == null) {            allComments = new Map<String, String>();        }                if(allComments.get('show') != null) {            if(allComments.get('show').equalsIgnoreCase('true')) {                                      this.allComments.put('show','false');                this.allComments.put('style','display:true');                             }            else{                 this.allComments.put('show','true');                this.allComments.put('style','display:none');            }                }           else{            if(user.Show_All_Work_Comments__c) {                 this.allComments.put('show','false');                this.allComments.put('style','display:true');            }               else{                 this.allComments.put('show','true');                this.allComments.put('style','display:none');                            }        }    }        //used to return all comments associated with the work record    public ADM_Comment__c[] getComments() { return this.comments; }            //used to set the comments array from the value returned by the getAll method in the ADM_Comment class    public void setComments() {  this.comments = ADM_Comment.getAll( work.Id ); }                 public Boolean getHasComments() { return this.hasComments; }        public void setHasComments() {        Boolean b = false;                if(getComments() != null && getComments().size() > 0) {            b = true;        }                this.hasComments = b;    }	            //return a reference to the allComments map that will be used to decide whether or not we're going to show all of the comments in the UI    public String getShowAllComments() { return allComments.get('show'); }        //return a reference to the allComments map value that will be used to decide if the display block should be something like none or block    public String getCommentsStyle() { return allComments.get('style'); }}