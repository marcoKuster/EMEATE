/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * * Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an organization are executed whenever Apex code is deployed * to a production organization to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production organization. In addition, all triggers must have some code coverage. *  * The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the organization size limit for all Apex scripts. * * See the Apex Language Reference for more information about Testing and Code Coverage. */@isTestprivate class ADM_ScrumTeamMembersOutOfOfficeTest {    private static ADM_Scrum_Team__c scrumteam {        get {            if(scrumteam == null) {                scrumteam = ADM_ScrumTeam.createTestScrumTeam(String.valueOf(Math.random()));                       }            return scrumteam;           }        set;    }        private static User u {        get {            if(u == null) {                u = ADM_WorkUser.createTestUser();            }            return u;                   }    }        private static ADM_Scrum_Team_Member__c member {        get {            if(member == null) {                            member = new ADM_Scrum_Team_Member__c();                member.Scrum_Team__c = scrumteam.Id;                member.Member_Name__c = u.Id;                insert member;              }            return member;        }    }   /* @testcaseID  a1DB00000000QWU @userstoryID a0790000000DAda @Hierarchy GUS.ScrumTeams.Team Information.Detail Scrum Team page @ExpectedResults Team Member out of office */    static testMethod void testADM_ScrumTeamMembersOutOfOffice() {        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam();        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c teamMember = new ADM_Scrum_Team_Member__c();        teamMember.Scrum_Team__c = team.Id;        teamMember.Member_Name__c = user.Id;        insert teamMember;        System.currentPageReference().getParameters().put('id', team.id);                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_ScrumTeamMembersOutOfOffice extension = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assert(extension.teamMembersOutOfOffice.isEmpty(),'Expected this list to be empty!' + extension.teamMembersOutOfOffice);    }  /* @testcaseID  a1DB000000013tv @userstoryID a0790000000DAda @Hierarchy GUS.SystemIntegrations.Email2GUS.Reply All to bug @ExpectedResults Every user should only get the OOO Auto-reply email and nothing else. Out of Office auto-replies should not be added as comments in the GUS record */        static testMethod void testWithOOOToday() {             ADM_Scrum_Team_Member__c m = member;        System.currentPageReference().getParameters().put('id', scrumteam.Id);                ADM_Time_Off_Log__c ooo = new ADM_Time_Off_Log__c();        ooo.User__c = m.Member_Name__c;        ooo.Start_Date__c = System.now().date();        ooo.End_Date__c = System.now().date();        ooo.Description__c = 'Lorem ipsum dolor sit amet';        List<RecordType> recs = ADM_RecordType.getAllBy('Name', new List<String>{'Out of Office'});        if(!recs.isEmpty()) ooo.RecordTypeId = recs[0].Id;        insert ooo;                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(scrumteam);        ADM_ScrumTeamMembersOutOfOffice ext = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assertEquals(1, ext.teamMembersOutOfOffice.size());    }      /* @testcaseID  a1DB000000013tu @userstoryID a0790000000DAda @Hierarchy GUS.SystemIntegrations.Email2GUS.Reply to bug @ExpectedResults Every user should only get the OOO Auto-reply email and nothing else. Out of Office auto-replies should not be added as comments in the GUS record */    static testMethod void testWithOutOfOffice() {                  ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam();        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c teamMember = new ADM_Scrum_Team_Member__c();        teamMember.Scrum_Team__c = team.Id;        teamMember.Member_Name__c = user.Id;        insert teamMember;                System.currentPageReference().getParameters().put('id', team.id);                System.assert([select count() from ADM_Scrum_Team_Member__c where Scrum_Team__c =: team.Id] == 1);                ADM_Time_Off_Log__c ooo = new ADM_Time_Off_Log__c();        ooo.User__c = user.Id;        ooo.Start_Date__c = System.now().date();        ooo.End_Date__c = System.now().date().addDays(1);        ooo.Description__c = 'Testing!';        ooo.RecordTypeId = [select Id from RecordType where Name = 'Out of Office'].Id;        insert ooo;                List<Id> teamMemberIds = new List<Id>();                for (ADM_Scrum_Team_Member__c teamMemberId : [select Member_Name__c from ADM_Scrum_Team_Member__c where Scrum_Team__c = : team.Id]) {            teamMemberIds.add(teamMemberId.Member_Name__c);        }                List<ADM_Time_Off_Log__c> teamMembersOutOfOffice = [            select RecordType.Name, Id,User__r.Name, User__r.Id, Start_Date__c, End_Date__c, Allocation__c, Description__c, Approved__c             from ADM_Time_Off_Log__c             where User__r.Id in : teamMemberIds                             and End_Date__c > : System.today()                    and (RecordType.Name = 'Out of Office' or (RecordType.Name = 'PTOn (Paid Time On)' and Approved__c = true))                        and User__r.Id != null            order by Start_Date__c asc        ];                System.assert(teamMembersOutOfOffice.size() == 1);                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_ScrumTeamMembersOutOfOffice extension = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assert(!extension.teamMembersOutOfOffice.isEmpty(),'Expected this list not to be empty! + ooo' + ooo + extension.teamMembersOutOfOffice);        }      /* @testcaseID   @userstoryID  @Hierarchy  @ExpectedResults  */    static testMethod void testWithOutOfCompanyHoliday() {                  ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam();        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c teamMember = new ADM_Scrum_Team_Member__c();        teamMember.Scrum_Team__c = team.Id;        teamMember.Member_Name__c = user.Id;        insert teamMember;        ADM_Time_Off_Log__c ooo = new ADM_Time_Off_Log__c();        ooo.User__c = user.Id;        ooo.Start_Date__c = System.now().date();        ooo.End_Date__c = System.now().date().addDays(1);        ooo.Description__c = 'Testing!';        ooo.RecordTypeId = [select Id from RecordType where Name = 'Company Holiday'].Id;        insert ooo;        System.currentPageReference().getParameters().put('id', team.id);                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_ScrumTeamMembersOutOfOffice extension = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assert(extension.teamMembersOutOfOffice.isEmpty(),'Expected this list to be empty!' + extension.teamMembersOutOfOffice);        }      /* @testcaseID   @userstoryID  @Hierarchy  @ExpectedResults  */    static testMethod void testWithApprovedPTOn() {                  ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam();        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c teamMember = new ADM_Scrum_Team_Member__c();        teamMember.Scrum_Team__c = team.Id;        teamMember.Member_Name__c = user.Id;        insert teamMember;        ADM_Time_Off_Log__c ooo = new ADM_Time_Off_Log__c();        ooo.User__c = user.Id;        ooo.Start_Date__c = System.now().date();        ooo.End_Date__c = System.now().date().addDays(1);        ooo.Description__c = 'Testing!';        ooo.RecordTypeId = [select Id from RecordType where Name like 'PTOn%'].Id;        ooo.Approved__c = true;        insert ooo;        System.currentPageReference().getParameters().put('id', team.id);                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_ScrumTeamMembersOutOfOffice extension = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assert(!extension.teamMembersOutOfOffice.isEmpty(),'Expected this list not to be empty!' + extension.teamMembersOutOfOffice);        }  /* @testcaseID   @userstoryID  @Hierarchy  @ExpectedResults  */        static testMethod void testWithUnApprovedPTOn() {                  ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam();        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c teamMember = new ADM_Scrum_Team_Member__c();        teamMember.Scrum_Team__c = team.Id;        teamMember.Member_Name__c = user.Id;        insert teamMember;        ADM_Time_Off_Log__c ooo = new ADM_Time_Off_Log__c();        ooo.User__c = user.Id;        ooo.Start_Date__c = System.now().date();        ooo.End_Date__c = System.now().date().addDays(1);        ooo.Description__c = 'Testing!';        ooo.RecordTypeId = [select Id from RecordType where Name like 'PTOn%'].Id;        ooo.Approved__c = false;        insert ooo;        System.currentPageReference().getParameters().put('id', team.id);                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_ScrumTeamMembersOutOfOffice extension = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assert(extension.teamMembersOutOfOffice.isEmpty(),'Expected this list to be empty!' + extension.teamMembersOutOfOffice);        }  /* @testcaseID   @userstoryID  @Hierarchy  @ExpectedResults  */        static testMethod void testWithApprovedPTOnNotInFuture() {                  ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam();        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c teamMember = new ADM_Scrum_Team_Member__c();        teamMember.Scrum_Team__c = team.Id;        teamMember.Member_Name__c = user.Id;        insert teamMember;        ADM_Time_Off_Log__c ooo = new ADM_Time_Off_Log__c();        ooo.User__c = user.Id;        ooo.Start_Date__c = System.now().date();        ooo.End_Date__c = System.now().date();        ooo.Description__c = 'Testing!';        ooo.RecordTypeId = [select Id from RecordType where Name like 'PTOn%'].Id;        ooo.Approved__c = true;        insert ooo;        System.currentPageReference().getParameters().put('id', team.id);                Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_ScrumTeamMembersOutOfOffice extension = new ADM_ScrumTeamMembersOutOfOffice(controller);        System.assertNotEquals(true, extension.teamMembersOutOfOffice.isEmpty());        }}