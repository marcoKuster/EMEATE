public with sharing class QA_addUStoTPExtension {    ADM_Work__c[] arrUS = new ADM_Work__c[]{};    public String errorMsgDuplicate  {        get {            return 'Duplicate user story records detected';        }        set;    }    public String errorMsgNothing {        get {            return 'No user story was entered to add to this test plan';        }        set;    }    public String errorMsgExisting {        get {            return 'This user story is already assigned to another test plan';        }        set;    }    public String errorMsgRecordType {    	get {    		return 'Only work of record type user story can be assigned to a test plan';    	}    	set;    }    public String errorMsgTooMany {    	get {    		return 'You are only allowed to have 20 user stories to one test plan!';    	}    	set;    }    public QA_Test_Plan__c testPlan { get; set; }    public String testPlanId { get; set; }    public String testPlanName {        get {            if(testPlanName == null) {                testPlanName =  [select Name from QA_Test_Plan__c where Id = : testPlanId].Name;            }            return testPlanName;        }        set;    }    public List<QA_Test_Execution__c> members { get; set; }    public List<ADM_Work__c> membersToDelete {        get {            if(membersToDelete == null) {                membersToDelete = new List<ADM_Work__c>();                membersToDelete = ADM_Work.getAllBy('Test_Plan__c', new List<String>{testPlanId}, 1, 20, 'Id', 'ASC');            }            return membersToDelete;        }        set;    }    public static final String HOME = '/home/home.jsp';    private String retURL;    private void reInitMembersToDelete() {        membersToDelete = ADM_Work.getAllBy('Test_Plan__c', new List<String>{testPlanId}, 1, 20, 'Id', 'ASC');    }    public QA_addUStoTPExtension(ApexPages.StandardController controller) {        testPlan = (QA_Test_Plan__c) controller.getRecord();        testPlanId = controller.getId();        retURL = System.currentPageReference().getParameters().get('retURL');        members = addMember();    }    public pageReference saveUS() {        try{            arrUS = saveMembers(members);            if(!Apexpages.hasMessages() && !arrUS.isEmpty()) {                //checking to see that the user will not end up with more than 20 user stories related to that test plan                if(membersToDelete.size() + arrUS.size() <= 20) {                    update(arrUS);                    return getRetURL();                }                else{                    members[arrUS.size()-1].User_Story__c.addError(errorMsgTooMany);                }            } else if(!Apexpages.hasMessages() && arrUS.isEmpty()){                ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,errorMsgNothing));            }        } catch(Exception e) {            ApexPages.addMessages(e);        }        return null;    }    public Set<String> duplicates { get; set; }    public ADM_Work__c[] saveMembers(List<QA_Test_Execution__c> executionList) {        ADM_Work__c[] addMe = new ADM_Work__c[]{};        List<String> ids = ADM_WorkUtils.extractElsFromSobjects(executionList, 'User_Story__c');        Map<Id, ADM_Work__c> work2execute = ADM_Work.getAllByAsMap('Id', ids, 0, 200, 'Id', 'ASC');        ADM_Work__c work = new ADM_Work__c();        duplicates = new Set<String>();        for(Integer counter = 0; counter < executionList.size(); counter++) {            work = work2execute.get(executionList[counter].User_Story__c);            if(work != null) {                //checking to see if the user is trying to add a user story that's already assigned to a different test plan.                if(duplicates.contains(work.Id)) {                    ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,work.Name + ': ' + errorMsgDuplicate));                    executionList[counter].User_Story__c.addError(errorMsgDuplicate);                } else {                    duplicates.add(work.Id);                    if(work.Test_Plan__c != null && work.Test_Plan__c != testPlanId) {                        ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,work.Name + ': ' + errorMsgExisting));                        executionList[counter].User_Story__c.addError(errorMsgExisting);                    }                    if(!work.RecordType.Name.equalsIgnoreCase(ADM_Work.RECORD_TYPE_NAME_USERSTORY)) {                    	ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,work.Name + ': ' + errorMsgRecordType));                        executionList[counter].User_Story__c.addError(errorMsgRecordType);                    }                }                work.Test_Plan__c = testPlanId;                addMe.add(work);            }        }        return addMe;    }    public  List<QA_Test_Execution__c> addMember() {        List<QA_Test_Execution__c> addMe = new List<QA_Test_Execution__c>{};        for(Integer i= 0; i<5; i++) {            QA_Test_Execution__c te = new QA_Test_Execution__c();            addMe.add(te);        }        return addMe;    }    public PageReference getRetURL() {        if(retURL == null) {            return new PageReference(HOME);        } else {            return new PageReference(retUrl);        }    }    public PageReference deleteMember() {            String deleteId = System.currentPageReference().getParameters().get('deleteId');            List<ADM_Work__c> membersToDeleteTemp = deleteMembers(deleteId,membersToDelete);            for(ADM_Work__c us : membersToDeleteTemp) {                membersToDelete.add(us);            }            update membersToDelete;            reInitMembersToDelete();            return null;    }    public List<ADM_Work__c> deleteMembers(String deleteId, List<ADM_Work__c> deleteList) {        List<ADM_Work__c> deleteMe = new List<ADM_Work__c>();        for(Integer i = 0; i < deleteList.size(); i++) {            ADM_Work__c u = deleteList.get(i);            String uid = u.id;            if(uid.equals(deleteId)) {                deleteList.remove(i);                u.Test_Plan__c = null;                deleteMe.add(u);            }        }        return deleteMe;    }}