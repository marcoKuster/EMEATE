public with sharing class QA_TEBugDetailController {     Id id;     List<ADM_Work__c> bugsList;//create a List of QAForce Bug for the corresponding Test Execution(TE) record     String sortDirection = '^';     String sortVariableName = 'BugNumber ASC';     public QA_TEBugDetailController(){     }     public QA_TEBugDetailController(ApexPages.StandardController stdController){        this.id = stdController.getId(); //initialize id by getting it from the URL     }     //Get the bugs associated to a TE record and initialize it a bugList    public List<ADM_Work__c> getBugs(){        Set<String> bugsSet = new Set<String>();        for(QA_Test_Execution__c record: [select Bugs__c from QA_Test_Execution__c where Id =: this.id ] ){            if(record.Bugs__c != null){                String[] bugsArray = record.Bugs__c.split('[,]');                for (Integer i = 0; i < bugsArray.size(); i++){                    //ignore the duplicate bugs by comparing it with the set object before adding it to a set                    if(!bugsSet.contains(bugsArray[i])){                        bugsSet.add(bugsArray[i]);                    }                }            }        }        //get the bug number, status and description associated to the bug        if(sortVariableName == 'BugNumber ASC')            bugsList = [select Id, Name, Priority__c, QA_Engineer__c, Subject__c, Assignee__c, Scheduled_Build__c, Bug_Number__c, Status__c, Description__c from ADM_Work__c where Name in :bugsSet ORDER BY Name ASC LIMIT 100];        if(sortVariableName == 'BugNumber DESC')            bugsList = [select Id, Name, Priority__c, QA_Engineer__c, Subject__c, Assignee__c, Scheduled_Build__c, Bug_Number__c, Status__c, Description__c from ADM_Work__c where Name in :bugsSet ORDER BY Name DESC LIMIT 100];        //if there are no bugs associated to the TE record then return null        if(bugsList.isEmpty())            return null;        else{            return bugsList;        }    }    public Integer getBugsListSize(){        return bugsList.size();    }    public void orderBugNumber(){        if (sortDirection == '^') {            sortDirection = 'v';            sortVariableName = 'BugNumber DESC';        }        else {            sortDirection = '^';            sortVariableName = 'BugNumber ASC';        }    }    public String getsortDirection(){        return sortDirection;    }    public String getProductArea(){        String[] productAreaArr = new String[]{'Administration','Analytics','ApexPlatform','API','AppExchangeApps','AppExchangeDirectory','ApplicationDistribution','Apps','Appstore','CMI','Core','CSP','CTI','DeclarativeAppBuilder','DesktopClients','ExchangeEdition','Fatboy','Financial Services','FinancialServices','Ideas','KMST','Marketing','MarketingWebsite','Messaging','MobileClients','MobileServices','ODD','OrderCenter','PACS','PartnerNetwork','PartnerNetworklist','PRM','Provisioning','SalesforceContent','Schema','SFACore','SFGA','Sharing','SSP1_0','SSS','TerritoryManagement','UserInterface','Visualforce','Webstore','WorkflowAndApprovals'};        Set<String> bugsSet = new Set<String>(productAreaArr);        String tgtProductArea;        String result = '-- --';        for(QA_Test_Execution__c record: [select Test_Case__r.Hierarchy__c from QA_Test_Execution__c where Id =: this.id ] ){            if(record.Test_Case__c != null){                String hierarchy = record.Test_Case__r.Hierarchy__c;                tgtProductArea = hierarchy.subString(0,hierarchy.indexOf('.'));                    if(bugsSet.contains(tgtProductArea)){                        result = tgtProductArea;                    }            }        }     return result;    }        /**    * @testcaseID a0B20000009gZvUEAU    * @userStory a07B0000000DfNp    * @hierarchy GUS.QaforceToGUS.Test Execution.Test Execution Detail    * @expected Results The following fields show on the Bugs section: Bug Link, Bug Number, Subject, Priority, Bug Status, QA Engineer, Assignee, Schedule Build    */        private static testMethod void testTEBugsDetail(){        //create a TCBugDetail object        QA_TEBugDetailController testObj = new QA_TEBugDetailController();        List<ADM_Work__c> bugsList;        //create user story        ADM_Work__c us = ADM_Work.createTestWork('User Story');        //create a Test Case        QA_Test_Case__c testcase = new QA_Test_Case__c();        Test.startTest();        QA_Hierarchy__c h = new QA_Hierarchy__c();        h.Name = 'Financial Services';        h.Full_Path__c = 'Financial Services';        h.Count__c = 0;        h.Depth__c = 0;        insert(h);        Test.stopTest();        testcase.Hierarchy__c = h.Name + '.Base Level';        testcase.Brief_Description__c = 'Trigger Test';        testcase.Expected_Results__c = 'Pass';        testcase.Execution_Type__c = 'Manual';        insert(testcase);        //create a Test Execution record with Status as Passed and Number of Execution = 0 and Bugs = null        //This should invoke the trigger and automatically update Number of Execution = 1 when it is Passed or Failed        QA_Test_Execution__c testExecution_1 = new QA_Test_Execution__c();        testExecution_1.Test_Case__c = testcase.id;        testExecution_1.Status__c = 'Passed';        testExecution_1.Assignee__c = UserInfo.getUserId();        testExecution_1.User_Story__c = us.id;        testExecution_1.Number_of_Executions__c = 0;        testExecution_1.Bugs__c = null;        testExecution_1.Date_of_Last_Execution__c = null;        insert(testExecution_1);        testObj.id = testExecution_1.id;        testObj.sortDirection = 'v';        testObj.orderBugNumber();        bugsList = testObj.getBugs(); //get the bugs associated to the TC        String[] bugsArray;        Integer ctr = 0;        Set<String> bugs;        try{            if(bugsList != null){ //if there are any bugs associated to TC then get the details of the bug            bugsArray = testExecution_1.Bugs__c.split('[,]');            bugs = new Set<String>(bugsArray);                for(ADM_Work__c bug : bugsList){                    if(bugs.contains(bug.Bug_Number__c)){                    ctr++;                    System.assertEquals(bug.Status__c,'New');                    System.assertEquals(bug.Description__c, null);                    }                }                System.assertEquals(ctr,bugs.size());            }else{                System.assertEquals(bugsList,null);            }        }catch(Exception e){        }        //create a Test Case        QA_Test_Case__c testtestExecution_1 = new QA_Test_Case__c();        testtestExecution_1.Hierarchy__c = 'Financial Services.Base Level.Level1';        testtestExecution_1.Brief_Description__c = 'Trigger Test';        testtestExecution_1.Expected_Results__c = 'Pass';        testtestExecution_1.Execution_Type__c = 'Manual';        insert(testtestExecution_1);        //create a Test Execution record with Status as Passed and Number of Execution = 0        //This should invoke the trigger and automatically update Number of Execution = 1 when it is Passed or Failed        QA_Test_Execution__c testExecution_2 = new QA_Test_Execution__c();        testExecution_2.Test_Case__c = testtestExecution_1.id;        testExecution_2.Status__c = 'Passed';        testExecution_2.Assignee__c = UserInfo.getUserId();        testExecution_2.User_Story__c = us.id;        testExecution_2.Number_of_Executions__c = 0;        testExecution_2.Bugs__c = '2234,22345,223456';        insert(testExecution_2);        testObj.id = testExecution_2.id;        testObj.sortDirection = testObj.getsortDirection();        testObj.orderBugNumber();        bugsList = testObj.getBugs(); //get the bugs associated to the TC        Integer bugCount = testObj.getBugsListSize();        if(bugsList != null){ //if there are any bugs associated to TC then get the details of the bug        bugsArray = testExecution_2.Bugs__c.split('[,]');        bugs = new Set<String>(bugsArray);        ctr =0;                for(ADM_Work__c bug : bugsList){                    if(bugs.contains(bug.Bug_Number__c)){                    	ctr++;                        System.assertEquals(bug.Status__c,'New');                        System.assertEquals(bug.Description__c, null);                    }            }           System.assertEquals(ctr,bugCount);           System.assertEquals('v',testObj.getsortDirection());        }else{            System.assertEquals(bugsList,null);        }        //create a Test Case in the same hierarchy        QA_Test_Case__c testtestExecution_2 = new QA_Test_Case__c();        testtestExecution_2.Hierarchy__c = 'Financial Services.Base Level.Level1';        testtestExecution_2.Brief_Description__c = 'Trigger Test1';        testtestExecution_2.Expected_Results__c = 'Pass';        testtestExecution_2.Execution_Type__c = 'Manual';        insert(testtestExecution_2);        //create a Test Execution record with Status as In Progress and Number of Execution < 0 and Date of Last execution > current date        //This should invoke the trigger and it should throw an error message for Number of Execution < 0 and Date of Last execution > current date        QA_Test_Execution__c testExecution_3 = new QA_Test_Execution__c();        testExecution_3.Test_Case__c = testcase.id;        testExecution_3.Status__c = 'In Progress';        testExecution_3.Assignee__c = UserInfo.getUserId();        testExecution_3.User_Story__c = us.id;        testExecution_3.Number_of_Executions__c = -1;        testExecution_3.Date_of_Last_Execution__c = datetime.now()+1;        try {        insert(testExecution_3);        delete(testExecution_3);            System.assert(false); // should have triggered an exception;        } catch (Exception e) {        }        //In this case bug field white space,tab space and extra comma should be trimmed and only the digits seperated by comma should be stored        QA_Test_Execution__c testExecution_4 = new QA_Test_Execution__c();        testExecution_4.Test_Case__c = testcase.id;        testExecution_4.Status__c = 'In Progress';        testExecution_4.Assignee__c = UserInfo.getUserId();        testExecution_4.User_Story__c = us.id;        testExecution_4.Number_of_Executions__c = 1;        testExecution_4.Date_of_Last_Execution__c = datetime.now();        testExecution_4.Bugs__c = ',,,,,90  091,90    092,,,,,00000090920,';        insert(testExecution_4);        Set<String> expectedBugs = new Set<String>();        expectedBugs.add( '90091' );        expectedBugs.add( '90092' );        expectedBugs.add( '90920' );        List<String> actualBugs = [SELECT Bugs__c FROM QA_Test_Execution__c where id =: testExecution_4.id ].Bugs__c.split( '[,]' );        System.assertEquals( expectedBugs.size(), actualBugs.size() );        for( String actualBug : actualBugs )        	System.assert( expectedBugs.contains( actualBug ) );        testExecution_4.Bugs__c = ',,12345,0001000,,123456    ,';        update(testExecution_4);        expectedBugs = new Set<String>();        expectedBugs.add( '12345' );        expectedBugs.add( '1000' );        expectedBugs.add( '123456' );        actualBugs = [SELECT Bugs__c FROM QA_Test_Execution__c where id =: testExecution_4.id ].Bugs__c.split( '[,]' );        System.assertEquals( expectedBugs.size(), actualBugs.size() );        for( String actualBug : actualBugs ) {        	System.assert( expectedBugs.contains( actualBug ) );        }		System.assertEquals('Financial Services',testObj.getProductArea()); //check for the retrived product area                if([select count() from QA_Hierarchy__c where Name = 'Apex'] == 0) {            QA_Hierarchy__c apexHierarchy = new QA_Hierarchy__c();            apexHierarchy.Name = 'Apex';            apexHierarchy.Depth__c = 0;            insert apexHierarchy;        }        testtestExecution_1.Hierarchy__c = 'Apex.Level1';        update(testtestExecution_1);        System.assertEquals('-- --',testObj.getProductArea()); //check for the retrived product area        //update TE without US        testExecution_4.User_Story__c = null;        try{        update(testExecution_4);        } catch (DmlException e) {        System.assertEquals('Test Execution Insert|Update Error: User Story is mandatory to insert|update a test execution record.',e.getDmlMessage(0));        }       //check for an incorrect bug format        testExecution_4.User_Story__c = us.id;        testExecution_4.Bugs__c = 'X-1234';        try{        update(testExecution_4);        }catch(DmlException e){        System.assertEquals('Bug# '+testExecution_4.Bugs__c+ ' has an incorrect range or incorrect format. Bugs should be a number between 1000 - 10000000 or else it should start with \'W-\' followed by a six digit number',e.getDmlMessage(0));        }        testExecution_4.Bugs__c = '1234';        //check for min hierarchy depth        testtestExecution_2.Hierarchy__c = 'Financial Services';        try{        update(testtestExecution_2);        }catch(DmlException e){        System.assertEquals('The hierarchy must have a depth of at least 2!',e.getDmlMessage(0));        }        //check for max hierarchy depth        testtestExecution_2.Hierarchy__c = 'Financial Services.Level2.Level3.Level4.Level5.Level6';        try{        update(testtestExecution_2);        }catch(DmlException e){        System.assertEquals('The hierarchy can have a depth of at most 5!',e.getDmlMessage(0));        }        //check for invalid hierarchy        testtestExecution_2.Hierarchy__c = 'Financial Services..Level3.Level4';        try{        update(testtestExecution_2);        }catch(DmlException e){        System.assertEquals('The hierarchy must not contain empty elements!',e.getDmlMessage(0));        }        //check for invalid base hierarchy name        testtestExecution_2.Hierarchy__c = 'Financial.Level2.Level3.Level4.Level5';        try{        update(testtestExecution_2);        }catch(DmlException e){        System.assertEquals('Please provide a valid base hierarchy!',e.getDmlMessage(0));        }        //Clean up        delete(testExecution_1);        delete(testExecution_2);        delete(testExecution_4);        try{        String name = [Select Id,Status__c from QA_Test_Execution__c where Id =: testExecution_4.Id].Status__c;        System.assert(false); // should have triggered an exception;        }        catch(Exception e){        }        undelete(testExecution_4);        System.assertEquals('In Progress',[Select Id,Status__c from QA_Test_Execution__c where Id =: testExecution_4.Id].Status__c);        delete(testtestExecution_2);        delete(testtestExecution_1);        delete(testcase);        delete(us);     }}