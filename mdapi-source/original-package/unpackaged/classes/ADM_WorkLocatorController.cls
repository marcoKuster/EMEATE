/* * Copyright, 2008, SALESFORCE.com* All Rights Reserved* Company Confidential** Redirect to connect to links from external sources such as 62 Org Case object to GUS.*   */public with sharing class ADM_WorkLocatorController {		private static final Integer ROW_START = 0;	private static final Integer ROW_END = 1000;	private static final String SORT_BY = 'id';	private static final String SORT_ORDER = 'ASC';		private static final String DELIMITER = ',';	private String message;			private List<ADM_Work__c> worklist;	private Boolean chooseWorkItem = false;		public ADM_WorkLocatorController() {						}			//Based on the provided id locate the work record and redirect user to its detail page	public PageReference locateWorkAndRedirect() {		return processExternalID(parseExternalID());				}		private PageReference processExternalID(String externalID) {		if(externalID != null && externalID.length() > 0) {    				List<ADM_Work__c> works = new List<ADM_Work__c>();					Map<String, List<String>> queryString = new Map<String, List<String>>();						if (externalID.contains(DELIMITER)) {				//multiple ids have been passed display list of choices				setChooseWorkItem(true);				String[] externalIDs = externalID.split(DELIMITER);				queryString = loadQueryString(externalIDs);			} else {				queryString = loadQueryString(externalID);			}			 							works = getWorkRecordsQueryString(works, queryString);								if (works.size() == 1) {				// Redirect to just the work ID and let the existing WorkRedirector				// route it to either the legacy or the new Work page.				PageReference detail = new PageReference('/' + works.get(0).Id);				return detail;								} else if(works.size() > 1) {				String legacyItem = '';				if(!queryString.get('bugIds').isEmpty()) {					legacyItem = 'bugforce number';				} else if(!queryString.get('scrumforceIds').isEmpty()) {					legacyItem = 'scrumforce ID';				}				setMessage('Multiple Work Items have been found matching the legacy ' + legacyItem + ':' + parseExternalID());				//display the items which were found - this should never happen but if it does list helps troubleshooting				setWorkList(works);			 				} else {								setMessage('No Work Items have been found matching the id provided:' + parseExternalID());			}		} else {            setMessage('No Work Items have been found');            }					 		return null;	}		private List<ADM_Work__c> getWorkRecordsQueryString(List<ADM_Work__c> works, Map<String, List<String>> queryString) {		ADM_Work__c[] worksQuery = null;				if(!queryString.get('workIds').isEmpty()) {			worksQuery = ADM_Work.getAllBy('Id', queryString.get('workIds'), ROW_START, ROW_END, SORT_BY, SORT_ORDER);			works.addAll(worksQuery);			}		if(!queryString.get('workNames').isEmpty()) {			worksQuery = ADM_Work.getAllBy('Name', queryString.get('workNames'), ROW_START, ROW_END, SORT_BY, SORT_ORDER);			works.addAll(worksQuery);					}		if(!queryString.get('bugIds').isEmpty()) {			worksQuery = ADM_Work.getAllBy('External_ID__c', queryString.get('bugIds'), ROW_START, ROW_END, SORT_BY, SORT_ORDER);			works.addAll(worksQuery);								}        if(!queryString.get('bugNumbers').isEmpty()) {            worksQuery = ADM_Work.getAllBy('Bug_Number__c', queryString.get('bugNumbers'), ROW_START, ROW_END, SORT_BY, SORT_ORDER);            works.addAll(worksQuery);                               }        if(!queryString.get('scrumforceIds').isEmpty()) {            worksQuery = ADM_Work.getAllLike('Scrumforce_ID__c', queryString.get('scrumforceIds'), ROW_START, ROW_END, SORT_BY, SORT_ORDER);            works.addAll(worksQuery);                               }					return works;	}		private Map<String, List<String>> loadQueryString(String s, Map<String, List<String>> queryString) {		String workPrefix = Schema.SObjectType.ADM_Work__c.getKeyPrefix();		    						if(s.contains(workPrefix) && ADM_TextUtils.isValidId(s)) {			queryString.get('workIds').add(s);		} else if(s.toLowerCase().startsWith('w-')) {			queryString.get('workNames').add(s);		} else if(s.startsWith('1000000') && s.length() == 15) {			queryString.get('bugIds').add(s);		} else if(s.startsWith('a01') && ADM_TextUtils.isValidIdFormat(s)) {			queryString.get('scrumforceIds').add(s);		} else {			queryString.get('bugNumbers').add(s);		}				return queryString;	}		private Map<String, List<String>> loadQueryString(String columnValue) {		List<String> columnValues = new List<String>();		columnValues.add(columnValue);				return loadQueryString(columnValues);	}		private Map<String, List<String>> loadQueryString(List<String> columnValues) {				Map<String, List<String>> queryString = new Map<String, List<String>>();		List<String> workNames = new List<String>();		List<String> workIds = new List<String>();		List<String> bugIds = new List<String>();		List<String> bugNumbers = new List<String>();		List<String> scrumforceIds = new List<String>();				queryString.put('workNames', workNames);			queryString.put('workIds', workIds);			queryString.put('bugIds', bugIds);			queryString.put('bugNumbers', bugNumbers);		queryString.put('scrumforceIds', scrumforceIds);				for(String s : columnValues) {			queryString = loadQueryString(s, queryString);							}				return queryString;	}			static testMethod void testProcessExternalID() {		ADM_WorkLocatorController wlc = new ADM_WorkLocatorController();		//create work to be located		ADM_Work__c work = ADM_Work.createTestWork();				ADM_Work__c workBugId = ADM_Work.createTestWork();		workBugId.External_ID__c = '100000099999999';		upsert workBugId;		String workName = (ADM_Work.get('id', work.id, 'id', 'asc')).Name;					//this work should be found		PageReference result = wlc.processExternalID(workName);		System.assert(result != null);					result = wlc.processExternalID(work.Id + ',' + workBugId.External_ID__c);		System.assert(wlc.getWorkList().isEmpty() != true);				//finally for garbage ID user should not be fwd'd		result = wlc.processExternalID('dsfsdfdsf');		System.assert(result == null);				String testMessage = 'testMessage';		wlc.setMessage(testMessage); 		System.assert(wlc.getMessage().equalsIgnoreCase(testMessage) == true);					wlc.setChooseWorkItem(true);		System.assert(wlc.getChooseWorkItem() == true);			}			//Retrieve the user provided id - passed as a request parameter	private String parseExternalID() {		//retrieve the bugforce or gus id number from the url		return System.currentPageReference().getParameters().get('bugorworknumber');	}		/*	 * Getters and Setters to handle presentation 	 */		public String getMessage() {		return message;		}		public void setMessage(String newMessage) {		message = newMessage;		}		public List<ADM_Work__c> getWorkList() {		return worklist;		}					public void setWorkList(List<ADM_Work__c> works) {			worklist = works;	}		public Boolean getChooseWorkItem() {		return chooseWorkItem;		}			public void setChooseWorkItem(Boolean arg) {		chooseWorkItem = arg;		}						}