/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * * Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an organization are executed whenever Apex code is deployed * to a production organization to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production organization. In addition, all triggers must have some code coverage. *  * The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the organization size limit for all Apex scripts. * * See the Apex Language Reference for more information about Testing and Code Coverage. */@isTestprivate class ADM_ChatterTest {    public static ADM_Work__c work {        get {            List<ADM_Work__c> works = ADM_Work.getAll(parentId);            work = works.get(0);            return work;        }        set;    }        public static ADM_Work__c userStory {        get {            if(userStory == null) {                             userStory = ADM_Work.createTestWork(ADM_Work.RECORD_TYPE_NAME_USERSTORY);            }            return userStory;        }        set;    }        public static ADM_Work__c todo {        get {            if(todo == null) {                todo = ADM_Work.createTestTodo();            }            return todo;        }        set;    }        public static String parentId {        get {          if(parentId == null) {            ADM_Work__c temp = ADM_Work.createTestWork();            parentId = temp.Id;          }           return parentId;        }        set;    }        public static String subscriberId {        get {            if(subscriberId == null) {                 User user = ADM_WorkUser.createTestUser();                subscriberId = user.Id;            }            return subscriberId;        }        set;    }        public static User user {        get {            if(user == null) {                user = [select Id, UserPreferencesDisableAutoSubForFeeds from User where Id =: Userinfo.getUserId()];                toggleUserPreferencesDisableAutoSubForFeed();            }            return user;        }        set;    }        private static void toggleUserPreferencesDisableAutoSubForFeed() {        if(user.UserPreferencesDisableAutoSubForFeeds) {            user.UserPreferencesDisableAutoSubForFeeds = false;        } else {            user.UserPreferencesDisableAutoSubForFeeds = true;        }        update user;    }/**    Create work of record type bug and follow    *@testcaseID a0B20000005wJjxEAE    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults The Follow chatter button appears next to the "Perforce Checkin Request" button at the top and bottom of the Work detail section. Once the user clicks on this button, the "-Unfollow" button appears*/    static testMethod void testCreateSubscriptionFromWork() {        String chatterValue = ADM_Chatter.toggleSubscription(parentId, subscriberId);        System.assertEquals(ADM_Chatter.unfollow,chatterValue);    }/**    Follow a work record of type bug and clone to create a new bug    *@testcaseID a0B20000006dmduEAA    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults Cloning a bug doesn't clone the Follow functionality*/    static testMethod void testCreateSubscriptionOnClonedBug() {        String chatterValue = ADM_Chatter.toggleSubscription(parentId, subscriberId);        ADM_Work__c clone = work.clone(false,false);        clone.Priority__c = null;        insert clone;        System.assertEquals(false,ADM_Chatter.isSubscribed(clone.Id, subscriberId));    }/**    Follow a work record of type ToDo and clone to create a new Todo    *@testcaseID a0B20000007lHZYEA2    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults Cloning a ToDo doesn't clone the Follow functionality*/    static testMethod void testCreateSubscriptionOnClonedTodo() {        String chatterValue = ADM_Chatter.toggleSubscription(todo.Id, subscriberId);        ADM_Work__c clone = todo.clone(false,false);        clone.Priority__c = 'P1';        insert clone;        System.assertEquals(false,ADM_Chatter.isSubscribed(clone.Id, subscriberId));    }/**    Follow a work record of type user story and clone to create a new user story    *@testcaseID a0B20000007lHZXEA2    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults Cloning a user story doesn't clone the Follow functionality*/    static testMethod void testCreateSubscriptionOnClonedUserStory() {        String chatterValue = ADM_Chatter.toggleSubscription(userStory.Id, subscriberId);        ADM_Work__c clone = userStory.clone(false,false);        clone.Priority__c = 'P1';        insert clone;        System.assertEquals(false,ADM_Chatter.isSubscribed(clone.Id, subscriberId));    }    /**    Open a bug that's being followed by one user and not the other    *@testcaseID a0B20000007lHaAEAU    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults bug should be followed only by user 1*/        static testMethod void testSubscribingBugOnlyForCorrectUser() {        String chatterValue = ADM_Chatter.toggleSubscription(parentId, subscriberId);        User tempUser = ADM_WorkUser.createTestUser();        System.assertEquals(false,ADM_Chatter.isSubscribed(parentId, tempUser.Id));    }    /**    Open a user story that's being followed by one user and not the other    *@testcaseID a0B20000007lJJREA2    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults user story should be followed only by user 1*/            static testMethod void testSubscribingUserStoryOnlyForCorrectUser() {        String chatterValue = ADM_Chatter.toggleSubscription(userStory.Id, userStory.Id);        User tempUser = ADM_WorkUser.createTestUser();        System.assertEquals(false,ADM_Chatter.isSubscribed(userStory.Id, userStory.Id));    }/**    Open a todo that's being followed by one user and not the other    *@testcaseID a0B20000007lJJSEA2    *@hierarchy GUS.ScrumforceToGUS.Chatter.Follow a work record    *@userstory a0790000000DE4n    *@expectedResults todo should be followed only by user 1*/        static testMethod void testSubscribingTodoOnlyForCorrectUser() {        String chatterValue = ADM_Chatter.toggleSubscription(todo.Id, subscriberId);        User tempUser = ADM_WorkUser.createTestUser();        System.assertEquals(false,ADM_Chatter.isSubscribed(todo.Id, tempUser.Id));        String result = ADM_Chatter.chatterValue(todo.Id, subscriberId);        System.assertEquals(chatterValue,result);    }     /**    Unfollow a user story from the home page    *@testcaseID a0B20000007lH5hEAE    *@hierarchy GUS.ScrumforceToGUS.Chatter.Unfollow a work record    *@userstory a0790000000DE4n    *@expectedResults Unfollowing a user story from the home page reflects on the work detail page by showing the "Follow" button*/        static testMethod void testDeleteSubscriptionUserStory() {        String chatterValue = ADM_Chatter.chatterValue(userStory.Id, subscriberId);        System.assertEquals(ADM_Chatter.follow,chatterValue);                Boolean isSubscribed = ADM_Chatter.isSubscribed(userStory.Id, subscriberId);        System.assertEquals(false,isSubscribed);                chatterValue = ADM_Chatter.toggleSubscription(userStory.Id, subscriberId);        System.assertEquals(ADM_Chatter.unfollow,chatterValue);                isSubscribed = ADM_Chatter.isSubscribed(userStory.Id, subscriberId);        System.assertEquals(true,isSubscribed);                String result = ADM_Chatter.chatterValue(userStory.Id, subscriberId);        System.assertEquals(chatterValue,result);                        chatterValue = ADM_Chatter.toggleSubscription(userStory.Id, subscriberId);                isSubscribed = ADM_Chatter.isSubscribed(userStory.Id, subscriberId);        System.assertEquals(false,isSubscribed);    }       /**    Unfollow a bug from the home page    *@testcaseID a0B20000007lHCmEAM    *@hierarchy GUS.ScrumforceToGUS.Chatter.Unfollow a work record    *@userstory a0790000000DE4n    *@expectedResults Unfollowing a bug from the home page reflects on the work detail page by showing the "Follow" button*/        static testMethod void testDeleteSubscriptionWork() {        String chatterValue = ADM_Chatter.chatterValue(parentId, subscriberId);        System.assertEquals(ADM_Chatter.follow,chatterValue);                Boolean isSubscribed = ADM_Chatter.isSubscribed(parentId, subscriberId);        System.assertEquals(false,isSubscribed);                chatterValue = ADM_Chatter.toggleSubscription(parentId, subscriberId);        System.assertEquals(ADM_Chatter.unfollow,chatterValue);                isSubscribed = ADM_Chatter.isSubscribed(parentId, subscriberId);        System.assertEquals(true,isSubscribed);                String result = ADM_Chatter.chatterValue(parentId, subscriberId);        System.assertEquals(chatterValue,result);                        chatterValue = ADM_Chatter.toggleSubscription(parentId, subscriberId);                isSubscribed = ADM_Chatter.isSubscribed(parentId, subscriberId);        System.assertEquals(false,isSubscribed);    }     /**    Unfollow a ToDo from the home page    *@testcaseID a0B20000007lH5iEAE    *@hierarchy GUS.ScrumforceToGUS.Chatter.Unfollow a work record    *@userstory a0790000000DE4n    *@expectedResults Unfollowing a todo from the home page reflects on the work detail page by showing the "Follow" button*/        static testMethod void testDeleteSubscriptionTodo() {        String chatterValue = ADM_Chatter.chatterValue(todo.Id, subscriberId);        System.assertEquals(ADM_Chatter.follow,chatterValue);                Boolean isSubscribed = ADM_Chatter.isSubscribed(todo.Id, subscriberId);        System.assertEquals(false,isSubscribed);                chatterValue = ADM_Chatter.toggleSubscription(todo.Id, subscriberId);        System.assertEquals(ADM_Chatter.unfollow,chatterValue);                isSubscribed = ADM_Chatter.isSubscribed(todo.Id, subscriberId);        System.assertEquals(true,isSubscribed);                String result = ADM_Chatter.chatterValue(todo.Id, subscriberId);        System.assertEquals(chatterValue,result);                        chatterValue = ADM_Chatter.toggleSubscription(todo.Id, subscriberId);                isSubscribed = ADM_Chatter.isSubscribed(todo.Id, subscriberId);        System.assertEquals(false,isSubscribed);    }         static testMethod void testCreateSubscriptionWithInvalidUserId() {        //must have one sObject Id + user Id... we are actually using the work id as the user id which is not valid        String chatterValue = ADM_Chatter.toggleSubscription(parentId, parentId);        System.assertEquals(false,chatterValue.contains('ollow'));    }        static testMethod void testDeletingAnotherUsersSubscription() {        String chatterValue = ADM_Chatter.toggleSubscription(parentId, Userinfo.getUserId());        chatterValue = ADM_Chatter.toggleSubscription(parentId, subscriberId);        Boolean isSubscribed = ADM_Chatter.isSubscribed(parentId, Userinfo.getUserId());        System.assertEquals(true,isSubscribed);    }}