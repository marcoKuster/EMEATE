//@author Ari Rubinsteinpublic with sharing class QA_GenerateAnnotationsController {    //List containing all the test case annotations    public List<TestCaseAnnotation> testCaseAnnotations {get;set;}        	//Constructor    public QA_GenerateAnnotationsController(){    	testCaseAnnotations = new List<TestCaseAnnotation>();    	String testcaseids = null;        try{			testcaseids = System.currentPageReference().getParameters().get('cases');			parseTestCases(testcaseids);        }catch(Exception e){        	//couldnt parse querystring, do nothing        }    }        public void parseTestCases(String testCaseQueryString){	    if(testCaseQueryString == ''){			ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.FATAL, 				'No Test Cases selected, please go back and select at least one Test Case to generate Annotations for.'));	    	return;	    } else {			this.testCaseAnnotations = new List<TestCaseAnnotation>();            //Split the string containing all ids into a list            String[] caseIds = new String[]{};            caseIds = testCaseQueryString.split(';',0);            //Retrieve the TCs            try{                for (QA_Test_Case__c tc : [SELECT Id, Name, Brief_Description__c, Hierarchy__c, Execution_Type__c, Priority__c, Order__c,                								Steps_to_Reproduce__c, Expected_Results__c, (select  Name, Id, User_Story__c, User_Story__r.name from Test_Executions__r )                							FROM QA_Test_Case__c WHERE id in: caseIds]){                	this.addTestCase(tc);                }            } catch(Exception e){				//error fetching test case            }		return;	    }    }        public void addTestCase(QA_Test_Case__c tc) {    	this.testCaseAnnotations.add(new TestCaseAnnotation(tc));
    } 	// a dummy method for returning a null page reference, to be used with any button w/o an action	public PageReference returnNull () {		// we need to resolve user story names for tests cases that got stories added on the fly		List<String> tcIds = new List<String>();		for(TestCaseAnnotation tc: testCaseAnnotations) {			if(tc.TestExecutionProxy.user_story__c!=null && tc.TestExecutionProxy.user_story__r==null) {				tcIds.add(tc.TestExecutionProxy.user_story__c);
			}
		}		if(tcIds.size()>0) {			Map<ID, ADM_Work__c> addedUS = new Map<ID,ADM_Work__c>([SELECT Name FROM ADM_Work__c WHERE id in :tcIds]);		for(TestCaseAnnotation tc: testCaseAnnotations) {			if(tc.TestExecutionProxy.user_story__c!=null && tc.TestExecutionProxy.user_story__r==null) {				tc.updateUserStory(addedUS);			}		}										
		}		return null;	}			//Wrapper Class for Test Case Annotations	public class TestCaseAnnotation {				public QA_Test_Case__c TestCase {get;set;}				public QA_Test_Execution__c TestExecutionProxy {get;set;}				private String JAVADOC_PREFIX = ' * ';		private String JAVADOC_SUFFIX = '\n';				public Boolean canRender(){			return getUserStoryName() != null;		}						public void updateUserStory(Map<ID, ADM_Work__c> addedUS) {			if(this.TestExecutionProxy.user_story__c!=null && this.TestExecutionProxy.user_story__r==null) {				this.TestExecutionProxy.user_story__r = addedUS.get(this.TestExecutionProxy.user_story__c);
			}
		}				private TestCaseAnnotation(QA_Test_Case__c t){			this.TestCase = t;				if(t.test_executions__r.size()==0)				this.TestExecutionProxy = new QA_Test_Execution__c();			else				this.TestExecutionProxy = t.test_executions__r[0];							}				public String getUserStoryName(){			if (this.TestExecutionProxy.User_Story__c == null)				return null;			try {											return this.TestExecutionProxy.User_Story__r.Name;			} catch (Exception e){								//no user stories				return null;			}			}				public String enforceTrailingPeriod(String input){			if (!input.endswith('.'))				return input + '.';			return input;		}				public String wrapForJavadoc(String inputstring){			integer MAX_LINE_LENGTH = 80;			String newstring = '';			integer lastwrap = 0;			String[] lines = inputstring.split('\n');			for (integer i = 0; i < lines.size(); i++){				integer j = 0;				if (lines[i].length() == 0){					newstring += JAVADOC_PREFIX + JAVADOC_SUFFIX;				} else {					while (j < lines[i].length()){						newstring += JAVADOC_PREFIX;						if (lines[i].length() - j <= MAX_LINE_LENGTH){							newstring += lines[i].substring(j, lines[i].length());							j = lines[i].length();						} else {							integer splitmeat = lines[i].substring(j, j+MAX_LINE_LENGTH).lastIndexOf(' ');							if (splitmeat == -1){								splitmeat = MAX_LINE_LENGTH;							}							newstring += lines[i].substring(j, j+splitmeat+ 1);							j += splitmeat + 1;													}						newstring += JAVADOC_SUFFIX;											}				}			}						return newstring;		}				public String getAnnotation(){			if (canRender()){				String annot = '<PRE>/**\n';								//Subject				if (this.TestCase.Brief_Description__c != null)					annot += wrapForJavadoc(enforceTrailingPeriod(this.TestCase.Brief_Description__c)); 								//Description				if (this.TestCase.Steps_to_Reproduce__c != null)					annot += wrapForJavadoc(enforceTrailingPeriod(this.TestCase.Steps_to_Reproduce__c)); 				annot += JAVADOC_PREFIX + JAVADOC_SUFFIX;								//userStorySyncIdOrName				if (getUserStoryName() != null)					annot += wrapForJavadoc('@userStory '+getUserStoryName()); 				//hierarchy				if (this.TestCase.Hierarchy__c != null)					annot += JAVADOC_PREFIX + '@hierarchy ' + this.TestCase.Hierarchy__c + JAVADOC_SUFFIX;				//priority				if (this.TestCase.Priority__c != null)					annot += JAVADOC_PREFIX + '@priority '+this.TestCase.Priority__c + JAVADOC_SUFFIX; 				//expectedResults				if (this.TestCase.Expected_Results__c != null)					annot += wrapForJavadoc('@expectedResults '+this.TestCase.Expected_Results__c);								annot += ' */</PRE>';				return annot;			} else {				return '';			}		}	}		}