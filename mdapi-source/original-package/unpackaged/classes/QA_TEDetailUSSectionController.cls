public with sharing class QA_TEDetailUSSectionController {        Id id;    ADM_Work__c userStory = null;    QA_Test_Execution__c te = null;    String reason;    String description;    String goal;    String name;    String editions;    String userType;    String release;    String ownerId;    String parentUserStory;    String theme;    String sprintBacklog;    String storyPoints;    String priorityRank;    String subject;    User owner;    String userStoryId;            public QA_TEDetailUSSectionController(ApexPages.StandardController stdController){        try{            id = stdController.getId();        } catch (Exception e) {            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Error: ' + e.getMessage());            ApexPages.AddMessage(myMsg);        }    }        public void getFindUserStory() {        te = [select User_Story__c, User_Story__r.User_Type__c, User_Story__r.Subject__c, User_Story__r.Assignee__c, User_Story__r.Description__c, User_Story__r.Name, User_Story__r.Release__r.Name, User_Story__r.OwnerId, User_Story__r.Theme__r.Name, User_Story__r.Sprint__r.Name, User_Story__r.Story_Points__c, User_Story__r.Priority_Rank__c from QA_Test_Execution__c where Id = :id];        description = te.User_Story__r.Description__c;        name = te.User_Story__r.Name;        subject = te.User_Story__r.Subject__c;        release = te.User_Story__r.Release__r.Name;        userType = te.User_Story__r.User_Type__c;        theme = te.User_Story__r.Theme__r.Name;        sprintBacklog = te.User_Story__r.Sprint__r.Name;        storyPoints = String.valueOf(te.User_Story__r.Story_Points__c);        priorityRank = String.valueOf(te.User_Story__r.Priority_Rank__c);        userStoryId = te.User_Story__c;     }        public String getId() { return this.id; }    public String getUserStoryId() { return this.userStoryId; }    public String getName() { return this.name; }    public String getSubject() { return this.subject; }    public String getGoal() { return this.goal; }    public String getReason() { return this.reason; }    public String getEditions() { return editions; }    public String getUserType() { return userType; }    public String getRelease() { return release; }    public String getOwnerId() { return ownerId; }    public String getParentUserStory() { return parentUserStory; }    public String getTheme() { return theme; }    public String getSprintBacklog() { return sprintBacklog; }    public String getStoryPoints() { return storyPoints; }    public String getPriorityRank() { return priorityRank; }    public String getFirstName() { return owner.FirstName; }    public String getLastName() { return owner.LastName; }                private static QA_Test_Case__c createTC(String description, String baseHier){                QA_Test_Case__c newTC = new QA_Test_Case__c();        newTC = new QA_Test_Case__c(Brief_Description__c = description, Hierarchy__c = baseHier,                                       Priority__c = 'Medium', Execution_Type__c = 'Automated');        insert(newTC);        return newTC;    }        private static ADM_Work__c createUS(String name){        ADM_Work__c newUS = ADM_Work.createTestWork('User Story');        return newUS;    }        private static QA_Hierarchy__c createBaseHiers(String path){        String[] pathArr = path.split('[.]');                QA_Hierarchy__c newHier = new QA_Hierarchy__c(Name = pathArr[pathArr.size()-1], Depth__c = pathArr.size()-1, Count__c = 0, Full_Path__c = path);        insert(newHier);        return newHier;    }        public static QA_Test_Execution__c createTE(ADM_Work__c us, QA_Test_Case__c tc) {                String userId = UserInfo.getUserId();        QA_Test_Execution__c te = new QA_Test_Execution__c(User_Story__c = us.Id, Test_Case__c = tc.Id, Assignee__c = userId, Number_of_Executions__c = 0, Status__c = 'Planned');        insert(te);        return te;    }        public static ADM_Theme__c createTheme(String name) {                ADM_Theme__c theme = new ADM_Theme__c(Name = name);        insert(theme);        return theme;            }        public static ADM_Sprint__c createSprint(String name) {        ADM_Sprint__c sprint = ADM_Sprint.createTestSprint();        return sprint;    }        public static ADM_Release__c createRelease(String name) {                 ADM_Release__c release = new ADM_Release__c(Name = name);        insert(release);        return release;    }        }