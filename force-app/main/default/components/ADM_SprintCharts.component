<apex:component controller="ADM_SprintChartsController" allowDML="true">  
    <apex:attribute name="teamId" description="need this to get the sprint details for a team" type="String" required="required" assignTo="{!m_teamId}" />
    <apex:attribute name="sprintId" description="used to determine what to do" type="String" required="required" assignTo="{!m_sprintId}"/>
    <apex:attribute name="gaugeId" description="Id of the div to render a gauge into" type="String" />
    <apex:attribute name="imageChartId" description="Id of the div to render a gauge into" type="String" />
    
    <apex:includeScript value="{!$Resource.GoogleChartsJs}"/>
    <script type="text/javascript">
        Array.prototype.reduce=function(fun){var len=this.length>>>0;if(typeof fun!="function")throw new TypeError;if(len==0&&arguments.length==1)throw new TypeError;var i=0;if(arguments.length>=2)var rv=arguments[1];else{do{if(i in this){var rv=this[i++];break}if(++i>=len)throw new TypeError;}while(true)}for(;i<len;i++)if(i in this)rv=fun.call(undefined,rv,this[i],i,this);return rv}; 
    </script>    
    <apex:outputPanel id="containerBlock">
        <script type="text/javascript">
            google.charts.load('current', {packages: ['gauge','corechart']});
			google.charts.setOnLoadCallback(initDraw);
            var sprints = new Array();
            var currPoints = 0;         
            var avgVelocity, maxVelocity, minVelocity, spValue;
            var totalSprints = 0;           
            var statsi = 0;
            var numSprints = '6';
            var teamIdAndNumSprints = '{!teamId},' + numSprints;
            var imageChart = document.getElementById('{!imageChartId}');
            
            function calcStats() {
                var totalPts = 0;
                var storyPts = 0;
                maxVelocity = 0;
                
                for(var i = 0; i < sprints.length; i++) {
                    //#1 get total pts for the calcuation of the avg
                    storyPts = parseInt(sprints[i].Completed_Story_Points__c);
                    totalPts += storyPts;
                    //#2 evaluate the max
                    if(storyPts > maxVelocity) maxVelocity = storyPts;
                    if(i == 0) {
                        minVelocity = storyPts;
                    } else if(minVelocity > storyPts) {
                        minVelocity = storyPts;
                    }
                }
                if(totalPts > 0) {
                    avgVelocity = totalPts / sprints.length;
                } else {
                    avgVelocity = 0;
                    minVelocity = 0;
                }
            }
            
            function updateSprints(selEl) {       
                console.debug('you selected to view sprints: ' + selEl.value);      
                teamIdAndNumSprints = selEl.value;
                createCookie("apex__s2v{!teamId}", teamIdAndNumSprints, 1);
                getTotalSprints();
            }
            
            function getTotalSprints() {
                ADM_SprintChartsController.getTotalSprints('{!teamId}', handleTotalSprints);
            }
            
            function handleTotalSprints(result, event) {
                if(event.type == 'exception') {
                    console.debug('handleTotalSprints err: ' + event.message);
                } else if(result != null) {
                    totalSprints = result;
                    getCurrSprints();
                } else {
                    console.debug('handleTotalSprints err: result is null');
                }
            }
            
            function getCurrSprints() {
                console.debug('cookie?: ' + readCookie("apex__s2v{!teamId}"));
                var currCookieVal = readCookie("apex__s2v{!teamId}");               
                if(currCookieVal != null) {
                    teamIdAndNumSprints = currCookieVal;
                    spValue = currCookieVal;
                }
                ADM_SprintChartsController.getCurrSprints(teamIdAndNumSprints, handleCurrSprints);              
            }
            
            function handleCurrSprints(result, event) {
                var date;
                if(event.type == 'exception') {
                    console.debug('An exception occurred handleCurrSprints: ' + event.message);
                } else if(result != null) {
                    sprints = result;   
                    if(sprints != null && sprints.length > 0) {
                        imageChart.innerHTML = '';
                    }   
                    calcStats();
                    console.debug('sprintsize = ' + sprints.length + ' currPts: ' + currPoints + ' maxVelocity: ' + maxVelocity + ' minVelocity: ' + minVelocity + ' avgVelocity: ' + avgVelocity);
                                    
                    drawImageChart();
                } 
            }
          
            function updateDraw() {
                console.debug('update drawing now');
                if('{!imageChartId}' != '') getTotalSprints();
            }
          
            function initDraw() {
                console.debug('init drawing now');
                if('{!imageChartId}' != '') getTotalSprints();
            }
        
            function createCookie(name,value,days) {
                if(days) {
                    var date = new Date();
                    date.setTime(date.getTime()+(days*24*60*60*1000));
                    var expires = "; expires="+date.toGMTString();
                } else {
                    var expires = "";
                }
                document.cookie = name+"="+value+expires+"; path=/";
            }
            
            function readCookie(name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for(var i=0;i < ca.length;i++) {
                    var c = ca[i];
                    while (c.charAt(0)==' ') c = c.substring(1,c.length);
                    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
                }
                return null;
            }
            
            function drawImageChart() {
                var data = new google.visualization.DataTable();
                data.addColumn('string', 'End Date');
                data.addColumn('number', 'Average');
                data.addColumn('number', 'Actual');
                
                for(var i = sprints.length - 1; i >= 0 ; i--) {
                    var sprint = sprints[i]; 
                    
                    sprintDate = new Date(parseInt(sprint.End_Date__c));
                    console.debug('sprint.End_Date__c: ' + sprint.End_Date__c + ' sprintDate: ' + sprintDate);
                    sprintDate.setDate(sprintDate.getDate() + 1);
                    console.debug('updated sprintDate: ' + sprintDate); 
                    //note: format dates since toDateString() is too verbose.  Add 1 to month as value returned is 0-11 see http://w3schools.com/jsref/jsref_obj_date.asp
                    var formattedDate = + (sprintDate.getMonth() + 1) + '/' + sprintDate.getDate() + '/' + sprintDate.getFullYear(); 
                                        
                    data.addRow([formattedDate, parseInt(avgVelocity), parseInt(sprint.Completed_Story_Points__c)]);
                }
                
                if(sprints.length == 0) {
                    var today = new Date();
                    var tomorrow = new Date();
                    tomorrow.setDate(today.getDate()+1);
                    console.debug('today: ' + today + ' tomorrow: ' + tomorrow);
                    data.addRow([today, parseInt(avgVelocity), parseInt(avgVelocity)]);
                    data.addRow([tomorrow, parseInt(avgVelocity), parseInt(avgVelocity)]);
                }
                
                if(spValue == null) {
                    spValue = '{!cookie.activeTab}';
                }
                var s2vEl = document.getElementById('sprints2view');
                
                if(s2vEl != null && s2vEl.options.length < 1 && totalSprints > 1) {
                    var s2vSelected = false;
                    var s2vLabel;
                    var s2vValue;
                    for(var i = 2; i <= totalSprints; i++) {
                        s2vLabel = i;
                        s2vValue = '{!teamId},' + i;
                        console.debug(spValue + ' - spValue');
                        console.debug(s2vValue + ' - s2vValue');
                        if(spValue == s2vValue) {
                            s2vSelected = true;
                        } else {
                            s2vSelected = false;
                        }
                        s2vEl.options[i-2] = new Option(s2vLabel, s2vValue, false, s2vSelected);
                    }
                } 
                
                var chart = new google.visualization.AreaChart(imageChart);
                
                
                chart.draw(data, {width: 800, height: 240, title: 'Team Velocity' ,
                    hAxis: {title: 'End Date of Sprint', titleTextStyle: {color: '#FF0000'}}
                });
            }
        </script>   
        <apex:outputPanel layout="block" id="imageChartContainer">
            <apex:pageBlockSection id="snpPBS" columns="1" showHeader="false">              
                <apex:outputPanel layout="block">
                    Sprints to Show&nbsp;
                    <apex:outputPanel rendered="{!sprints.size > 2}">                   
                        <select id="sprints2view" onchange="updateSprints(this);"></select>
                    </apex:outputPanel>         
                    <script>console.debug('{!$Component.container.funcDrawImageChart}');</script>
                    <apex:outputText value="{!sprints.size}" rendered="{!sprints.size < 3}"></apex:outputText>
                </apex:outputPanel>
            </apex:pageBlockSection>
        </apex:outputPanel>     
    </apex:outputPanel>
</apex:component>