/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * * Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an organization are executed whenever Apex code is deployed * to a production organization to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production organization. In addition, all triggers must have some code coverage. *  * The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the organization size limit for all Apex scripts. * * See the Apex Language Reference for more information about Testing and Code Coverage. */@isTestprivate class ADM_AddWorkToPrioritizerExtensionTest {    private static ADM_Build__c build = ADM_Build.createTestBuild();     private static ADM_Theme__c theme = new ADM_Theme__c(Name = 'Theme test');    private static ADM_Sprint__c sprint = ADM_Sprint.createTestSprint();    private static String successMessage = 'Your request has been successfully completed.';    private static User user = ADM_WorkUser.createTestUser();    private static String success = 'Update view successful';        private static ADM_Work__c[] works{    	get {	    	if(works == null) {    			            works = ADM_Work.getAllBy('Sprint__c', new List<String>{String.valueOf(sprint.Id)}, 0, 5, 'Id', 'asc');	    	}	    	return works;    	}    	set;    }        private static ADM_Scrum_Team__c team {    	get {    		if(team == null) {    		  team = ADM_ScrumTeam.get('Id', sprint.Scrum_Team__c, 'Name', 'asc');	    		}    		return team;    	}    	set;    }        private static ADM_Work__c work {    	get {    		if(work == null) {                Id Id_UserStory = ADM_RecordType.getId(ADM_Work.RECORD_TYPE_NAME_USERSTORY);    			work = works[0];		        work.Use_Prioritizer__c = true;		        work.Template_Name__c = 'junk';		        work.RecordTypeId = Id_UserStory;    		}    		return work;    	}    	set;    }        private static ADM_Work__c story {        get {            if(work == null) {                work = works[0];                                work.Use_Prioritizer__c = true;                work.Template_Name__c = 'junk';            }            return work;        }        set;        	    }    private static ADM_Work__c getStory() {        story.Template_Name__c = 'junk';        story.Use_Prioritizer__c = true;                return story;    }        private static ADM_AddWorkToPrioritizerExtension getExtension() {        System.currentPageReference().getParameters().put('scrumteamId', team.id);        Apexpages.Standardcontroller controller = new Apexpages.Standardcontroller(team);        ADM_AddWorkToPrioritizerExtension extension = new ADM_AddWorkToPrioritizerExtension(controller);        Apexpages.Standardsetcontroller setController = new Apexpages.Standardsetcontroller(works);        extension.setController = setController;                return extension;    }        private static ADM_AddWorkToPrioritizerExtension getExtensionSet() {        System.currentPageReference().getParameters().put('scrumteamId', team.id);        Apexpages.Standardsetcontroller setController = new Apexpages.Standardsetcontroller(works);        ADM_AddWorkToPrioritizerExtension extension = new ADM_AddWorkToPrioritizerExtension(setController);                return extension;    }        /*        test case ID: a0B20000007nYh0EAE        user story ID: a0A200000027arX        Expected Results: Verify the page loads without a visual force exception        Long Desc: Login to GUS. Go to work prioritizer page. Remove the scrumteam Id value not the actual variable name like this: * scrumteamId=     */        static testMethod void testWithoutScrumteam() {    	System.currentPageReference().getParameters().put('scrumteamId','');    	Apexpages.Standardsetcontroller setController = new Apexpages.Standardsetcontroller(works);        ADM_AddWorkToPrioritizerExtension extension = new ADM_AddWorkToPrioritizerExtension(setController);        System.assertEquals(null,extension.scrumteam.Id);    }        static testMethod void testGetWorkWithWork() {        	System.currentPageReference().getParameters().put('scrumteamId', team.Id);    	Apexpages.Standardcontroller std = new Apexpages.Standardcontroller(team);    	ADM_AddWorkToPrioritizerExtension ext = new ADM_AddWorkToPrioritizerExtension(std);    	        Apexpages.Standardsetcontroller setController = new Apexpages.Standardsetcontroller(new List<ADM_Work__c>{});            	List<ADM_WorkWrapper> ww = ext.getWorks();    	System.assert(ww.isEmpty() == true,'error: work wrapper should have been empty! + _' + ww + '_');    	        ext.setController = setController;        ww = ext.getWorks();            	System.assert(Apexpages.hasMessages() == true,'error: should have had an apex page message generated! _' + ww + '_');    	System.assert(ext.rowStart == 0,'error: row start should have been 0 since we do not have any work records in this request + _' + ext.rowStart + '_');    }        static testMethod void testWithSet() {    	//ADM_AddWorkToPrioritizerExtension ext = getExtensionSet();    	    	//System.assert(ext.rowEnd > 0,'error: ' + ext.rowEnd + ' was not greater than 0!');    }        static testMethod void testPrioritize() {        ADM_AddWorkToPrioritizerExtension ext = getExtension();                Pagereference pr = ext.prioritize();        System.assert(pr == null,'error occurred! -> pr != null _' + pr + '_');    }        static testMethod void testCreate() {        ADM_AddWorkToPrioritizerExtension ext = getExtension();                Pagereference pr = ext.create();        Pagereference create = Page.ADM_WorkEdit;                System.assert(pr.getUrl() == create.getUrl(),'error occurred! -> pr _' + pr.getUrl() + '_ != create _' + create.getUrl() + '_');    }        static testMethod void testRows() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();                System.assert(extension.rowStart > 0,'error rowStart was not greater than 0->' + extension.rowStart);        System.assert(extension.rowEnd == 1,'error: rowEnd was not equal to 1->' + extension.rowEnd);            }        static testMethod void testTemplateName() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();                System.assert(extension.templateName == ADM_Work.TEMPLATE_RECORD_TYPE_NAME,'error: ' + extension.templateName + ' != ' + ADM_Work.TEMPLATE_RECORD_TYPE_NAME);            }        static testMethod void testGetMessages() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();                System.assert(extension.messages != null, 'error: message was null!');            }        static testMethod void testGetMessage() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();                System.assert(extension.getMessage() == null, 'error: message was not null!');            }        static testMethod void testGetScrumteam() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();        System.assert(extension.scrumteamId == extension.scrumteam.Id,'error: the scrum team Ids were not the same!');            }        static testMethod void testGetWork() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();                System.assert(extension.getWorks().size() > 0,'error: we should have had some work records returned! ' + extension.getWorks().size());            }        static testMethod void testSave() {        ADM_AddWorkToPrioritizerExtension extension = getExtension();        List<ADM_WorkWrapper> workFromExtension = extension.getWorks();                for(ADM_WorkWrapper wrapper : workFromExtension) {        	wrapper.checked = false;        }                Test.startTest();            Pagereference pr = extension.save();        Test.stopTest();        String message = pr.getParameters().get('message');                System.assert(message == success,'error: ' + message + ' != ' + success);            }}