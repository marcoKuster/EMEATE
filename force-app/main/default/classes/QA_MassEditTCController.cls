//Controller for mass edit Test Cases page, takes in parameter 'cases' of test//case ids seperated by ';' to mass edit.//Zuye Zhengpublic with sharing class QA_MassEditTCController{        //String of Case Ids        String caseQr = '';        //String of Case Ids for testing        String caseQr_t = '';        //Split URL parameter into individual case ids        String[] caseIds = new String[]{};        //List containing all the test cases to be operated on        QA_Test_Case__c[] testCases = new QA_Test_Case__c[]{};        //Base Test Case object for the page        QA_Test_Case__c baseTC = new QA_Test_Case__c();        //Initialize error message to nothing        String errorMessage = '';        String hierError = '';        String returnID = '';                //Boolean values indicating if a particular field should be operated on        boolean changeHierarchy = false;        boolean changePriority = false;        boolean changeEType = false;        boolean changeRelatedTo = false;        public QA_MassEditTCController(){                try{                        //Get the URL parameter 'cases' defining which cases should be operated on                        this.caseQr = System.currentPageReference().getParameters().get('cases');                        this.returnID = System.currentPageReference().getParameters().get('rid');                }catch(Exception e){                        //Static TC ids for testing                        this.caseQr = this.caseQr_t;                }        }        //Initializes the page, return true on error and false if successful        public boolean getInit(){                if(this.caseQr == '' || this.caseQr == null) this.caseQr = this.caseQr_t;                //If no cases are passed to the page, generate error message                if(this.caseQr == ''){                        this.errorMessage = 'No Test Cases selected, please go back and select at least one Test Case to modify.';                        return true;                //Else parse TC ids                }else{                        this.testCases = new QA_Test_Case__c[]{};                        this.errorMessage = '';                        //Split the string containing all ids into a list                        this.caseIds = this.caseQr.split(';',0);                        //Retrieve the TCs                        try{                            this.testCases = [SELECT Id, Name, Brief_Description__c, Hierarchy__c, Execution_Type__c, Priority__c, Order__c FROM QA_Test_Case__c WHERE id in: this.caseIds];                        } catch( Exception e ){                        	System.debug( 'Exception thrown: ' + e );                        	this.errorMessage = 'Problem with test case ids, please try again.';                        	return true;                        }                                                return false;                }        }        public void setCaseQr_t(String s){                this.caseQr_t = s;        }                //Get-Set functions for the checkbox-boolean values indicating which fields should be operated on        public boolean getChangeHierarchy(){                return this.changeHierarchy;        }        public void setChangeHierarchy(boolean b){                this.changeHierarchy = b;        }                public boolean getChangePriority(){                return this.changePriority;        }        public void setChangePriority(boolean b){                this.changePriority = b;        }                public boolean getChangeEType(){                return this.changeEType;        }        public void setChangeEType(boolean b){                this.changeEType = b;        }                public boolean getChangeRelatedTo(){                return this.changeRelatedTo;        }        public void setChangeRelatedTo(boolean b){                this.changeRelatedTo = b;        }        public String getHierarchyError() {                return hierError;        }        //Returns the error message        public String getErrorMessage() {                return this.errorMessage;        }        //Returns false if an error was found and true if not        public boolean getIfError(){                return this.errorMessage == '';        }         //Returns the TCs retrieved from the TC ids        public QA_Test_Case__c[] getCases() {        		this.getInit();                return this.testCases;        }                //Gets-Sets the base TC        public QA_Test_Case__c getBase(){                return this.baseTC;        }        public PageReference handleCancel(){                PageReference p = new PageReference(this.returnID);                       return p;        }                //Performs the mass edit        public PageReference handleSave(){        	// if you are changing hierarcies           	if(this.changeHierarchy){           		// makes sure there is a hierarchy there				if(this.baseTC.Hierarchy__c == null){					hierError = 'Hierarchy required!';					return null;				}								// a variable for the hierarchy of the last test case processed, starts as the to switch to hierarchy                String prevHier = this.baseTC.Hierarchy__c;                // a list of all the test cases to update                List<QA_Test_Case__c> toUpdateTCs = new List<QA_Test_Case__c>();                // a variable for the max order in the hierarchy that you're switching to                Double maxOrder = 0;                                // queries to see what the top order is            	QA_Test_Case__c[] tmpTCs = [SELECT Order__c from QA_Test_Case__c WHERE Hierarchy__c =: this.baseTC.Hierarchy__c ORDER BY Order__c DESC LIMIT 1];                if(tmpTCs.size() == 0)                	maxOrder = 0;                else                	maxOrder = tmpTCs[0].Order__c + 1;                	                // goes through each test case to update the hierarchy and the order                for(QA_Test_Case__c testCase : this.testCases){                    testCase.Order__c = maxOrder;                    maxOrder++;                    testCase.Hierarchy__c = this.baseTC.Hierarchy__c;                }            }                            //For each test case change the fields that need to be changed            for(Integer i=0; i< this.testCases.size(); i++){            	if(this.changePriority) this.testCases[i].Priority__c = this.baseTC.Priority__c;                if(this.changeEType) this.testCases[i].Execution_Type__c = this.baseTC.Execution_Type__c;            }                        try{            	update(testCases);            } catch (Exception e) {            	return null;            	//should be reversed automatically             }                             PageReference p = new PageReference(this.returnID);            return p;        }/**    *@testcaseID a0B20000009dyQkEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Select several test cases     *@userstory a07B0000000DfNG    *@expectedResults The Mass edit page appears showing a list of the selected test cases. This list shows the brief description, hierarchy, priority and execution type*//**    *@testcaseID a0B20000009dyQlEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Cancel Mass Edit    *@userstory a07B0000000DfNG    *@expectedResults User cancels the mass edit and no test cases get edited*//**    *@testcaseID a0B20000009dyQmEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Click on brief description    *@userstory a07B0000000DfNG    *@expectedResults The Mass edit page appears showing a list of the selected test cases. This list shows the brief description as a link to the test case detail page*//**    *@testcaseID a0B20000009dyQnEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change hierarchy    *@userstory a07B0000000DfNG    *@expectedResults The test cases are not changed*//**    *@testcaseID a0B20000009dyQoEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change hierarchy    *@userstory a07B0000000DfNG    *@expectedResults The test cases are transported to the desired hierarchy*//**    *@testcaseID a0B20000009dyQpEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change hierarchy    *@userstory a07B0000000DfNG    *@expectedResults The test cases are not changed (there should be an error message stating the hierarchy does not exist)*//**    *@testcaseID a0B20000009dyQqEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change priority    *@userstory a07B0000000DfNG    *@expectedResults The test cases are not changed*//**    *@testcaseID a0B20000009dyQrEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change Priority    *@userstory a07B0000000DfNG    *@expectedResults test cases are changed to a new priority*//**    *@testcaseID a0B20000009dyQsEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change Execution Type    *@userstory a07B0000000DfNG    *@expectedResults The test cases are not changed*//**    *@testcaseID a0B20000009dyXwEAI    *@hierarchy GUS.QaforceToGUS.Mass Edit.Change Execution Type    *@userstory a07B0000000DfNG    *@expectedResults test cases are changed to a new execution type*/  /* TEST TEMP DISABLED UNTIL IT IS RE-FACTORED TO NOT RELY ON EXISTING DATA
	
      private static testMethod void testMassEditTC(){                //TC ids string                String testIdStr = '';                //Orginal TCs                QA_Test_Case__c[] testTCs = new List<QA_Test_Case__c>();                //TC ids list                String[] testIds = new List<String>();                //Create 4 new TCs for the test                String[] eTypes = new String[]{'Manual','Ftest','Silktest','Utest'};                String[] relatedTo = new String[]{'Accounts','Account Teams','Alerts','Activities'};                for(Integer i=1;i<=4;i++){                        QA_Test_Case__c tmpCase = new QA_Test_Case__c();                        tmpCase.Brief_Description__c = 'TestTC' + i;                        tmpCase.Hierarchy__c = 'API.TCMassEdit.Test';                        tmpCase.Priority__c = 'Medium';                        tmpCase.Execution_Type__c = eTypes[i-1];                        insert(tmpCase);                        testIdStr = testIdStr + tmpCase.id;                        if(i!=4)testIdStr = testIdStr + ';';                        testTCs.add(tmpCase);                        testIds.add(tmpCase.id);                }                                //Create a new object for the tests                QA_MassEditTCController testObj = new QA_MassEditTCController();                                //set returnID                testObj.returnID = 'foo';                                //Trivial tests////////////////////////////////////////////////////                testObj.setChangeRelatedTo(true);                System.assertEquals(testObj.getChangeRelatedTo(), true);                testObj.setChangeEType(true);                System.assertEquals(testObj.getChangeEType(), true);                testObj.setChangeHierarchy(true);                System.assertEquals(testObj.getChangeHierarchy(), true);                testObj.setChangePriority(true);                System.assertEquals(testObj.getChangePriority(), true);                //The real deal/////////////////////////////////////////////////////                //Initialize without any TC ids, should return true, meaning failed                System.assertEquals(testObj.getInit(), true);                //Should return an error message and return false indicating an error                System.assertEquals(testObj.getErrorMessage(), 'No Test Cases selected, please go back and select at least one Test Case to modify.');                System.assertEquals(testObj.getIfError(), false);                                //Re-Initialize with TC ids                testObj.setCaseQr_t(testIdStr);                //Should return false indicating initialization passed                System.assertEquals(testObj.getInit(), false);                //Return no error message and true                System.assertEquals(testObj.getErrorMessage(), '');                System.assertEquals(testObj.getIfError(), true);                                //Set all change booleans to false so a call on save should not modify any TCs                testObj.setChangeRelatedTo(false);                testObj.setChangeEType(false);                testObj.setChangeHierarchy(false);                testObj.setChangePriority(false);                testObj.handleSave();                                //Get the same TCs and check if they match with the originals                Integer i=0;                QA_Test_Case__c[] tmpCases = [select Id, Name, Brief_Description__c, Hierarchy__c, Execution_Type__c, Priority__c from QA_Test_Case__c where id in: testIds];                                        for( QA_Test_Case__c tmpCase : tmpCases ){                        System.assertEquals(tmpCase.Id, testTCs[i].Id);                        System.assertEquals(tmpCase.Brief_Description__c, testTCs[i].Brief_Description__c);                        System.assertEquals(tmpCase.Hierarchy__c, testTCs[i].Hierarchy__c);                        System.assertEquals(tmpCase.Execution_Type__c, testTCs[i].Execution_Type__c);                        System.assertEquals(tmpCase.Priority__c, testTCs[i].Priority__c);                        i++;                }                //Set all change booleans to true so a call on save should mass edit all TCs                testObj.setChangeRelatedTo(true);                testObj.setChangeEType(true);                testObj.setChangeHierarchy(true);                testObj.setChangePriority(true);                                //Set mass edit values                testObj.baseTC.Hierarchy__c = 'API.TCMassEdit.Test New';                testObj.baseTC.Priority__c = 'Medium';                testObj.baseTC.Execution_Type__c = 'Systest';                System.assertEquals(testObj.getBase().Hierarchy__c, 'API.TCMassEdit.Test New');                System.assertEquals(testObj.getBase().Priority__c, 'Medium');                System.assertEquals(testObj.getBase().Execution_Type__c, 'Systest');                                System.assertEquals(testObj.getCases(), testObj.testCases);                testObj.handleCancel();                testObj.handleSave();                                //Get the TCs and make sure the mass edits went into effect                QA_Test_Case__c[] tmpCases2 = [select Id, Name, Hierarchy__c, Execution_Type__c, Priority__c from QA_Test_Case__c where id in: testIds];                                       for( QA_Test_Case__c tmpCase : tmpCases2 ){                        System.assertEquals(tmpCase.Hierarchy__c, 'API.TCMassEdit.Test New');                        System.assertEquals(tmpCase.Priority__c, 'Medium');                        System.assertEquals(tmpCase.Execution_Type__c, 'Systest');                }        } */}