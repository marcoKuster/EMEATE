/* * Copyright, 2008, SALESFORCE.com* All Rights Reserved* Company Confidential* * Utility class used to parse text and add HREF HTML markup to valid urls*/public class ADM_URLUtils {		//Suitable for list of url strings, such as ADM_Work__c.Related_URL	public static String formatURLStringAsHref(String content) {			Integer beginindex = 0;					Integer endindex = 0;							String htmlcontent = '';		String frmtlink = '';		String unfrmtlink = '';		/*Search content to find next occurance of url prefix (\\, https:, www)		take the index of the first url prefix and the index of the following one 		as the start and end points of the url */		do {			//reset unfrmtlink from previous iteration			unfrmtlink = '';				beginindex = indexOfNextURLPrefix(content, endindex, 0);			endindex = 	indexOfNextURLPrefix(content, beginindex, 1); //1 turns on the padindexflag to make sure the same prefix is not found twice			//if no urls are found at all then begin index will be -1			if (beginindex != -1) {				if (endindex == -1) {					//reached end of content.  Use length of string as the end index point					unfrmtlink = content.substring(beginindex, content.length());				} else {					unfrmtlink = content.substring(beginindex, endindex);				}												//handle edge cases of url with two valid prefixes e.g. 'https://www.google.com' or blank space				if (unfrmtlink.equals('https://') || unfrmtlink.equals('&nbsp;')) {													//do nothing - if all url comprises of is the prefix (the real url will be caught next iteration beginning with www prefix)				} else {					if(unfrmtlink.length() > 0) {														frmtlink = formatHREF(unfrmtlink);						htmlcontent = htmlcontent + ' &nbsp; ' + frmtlink;					}					}			} else {				//return original string as no links have been found				htmlcontent = content;				}																	} while (endindex > -1); //if endindex is -1 no more url prefies exist					return htmlcontent;	}		testMethod static void testFormatURLStringAsHref() {		String urls = 'https://digg.com ftp://ftp.uwm.edu/pub/ https://bbc.co.uk https://www.google.com www.google.com';		String results = formatURLStringAsHref(urls);		//count the number of link objects		Integer urlcount = 0;		Integer index = 0;		Integer previousIndex = 0;		while(index > -1) {						//search for next occurance of href using previous index as a baseline.			index = results.indexOf('href', previousIndex);			previousIndex = index + 4; //add 4 to account for the length of the href			if(index > -1) {				urlcount = urlcount + 1;			}		}		//five links should have been added					System.assertEquals(5, urlcount, 'Unexpected Number of HREF tags. Result String:' + results);	}			//Suitable for a block of text with urls included through out	public static String formatTextAsHref(String content) {		Integer beginindex = 0;					Integer endindex = 0;		Integer tagindex = 0;		Integer spaceindex = 0;		String frmtlink = '';		String unfrmtlink = '';		Integer searchFlag = 1;				//loop and add HREF markup to any urls in the body of text				do {			//reset unfrmtlink from previous iteration			unfrmtlink = '';			/*Search content to find next occurance of url prefix (\\, https:, www)			take the index of the first url prefix and the index of the next white space character */			beginindex = indexOfNextURLPrefix(content, endindex, 0); //index of next url prefix			tagindex = content.indexOf('<', beginindex);			spaceindex = content.indexOf(' ', beginindex); 						//use which ever comes first between tagindex and spaceindex for the end index			if(tagindex == -1 && spaceindex == -1) {				endindex = -1;				} else if (tagindex != -1 && spaceindex == -1) {				endindex = tagindex;				} else if (spaceindex != -1 && tagindex == -1) {				endindex = spaceindex;				} else if (tagindex < spaceindex) {				//now we're handling the case of not found (-1) we can directly compare size				endindex = tagindex;				} else if (spaceindex < tagindex) {				endindex = spaceindex;				}					 									if(beginindex == -1) {				//no more URLs found - turn off search flag to exit loop								searchFlag = 0;				} else if (endindex == -1) {								// begin index was found so text must end in URL.  Use remaining length of string as the end index point				unfrmtlink = content.substring(beginindex, content.length());				//final link so turn off searchFlag to exit loop after this iteration				searchFlag = 0;							} else {				//capture link				unfrmtlink = content.substring(beginindex, endindex);			}											//handle edge cases of url with two valid prefixes e.g. 'https://www.google.com' or blank space			if (unfrmtlink.equals('https://') || unfrmtlink.equals('&nbsp;')) {												//do nothing - if all url comprises of is the prefix (the real url will be caught next iteration beginning with www prefix)			} else {				if(unfrmtlink.length() > 0) {					//format the link													frmtlink = formatHREF(unfrmtlink);					//replace link text with HREF markup										if (endindex == -1) {						//text body ends with a url so append marked up link to the end of the text body						content = content.substring(0, beginindex) + frmtlink;						} else {												content = content.substring(0, beginindex) + frmtlink + content.substring(endindex, content.length());						}												//increase end index to account for extra characters added by the HREF tag					endindex = beginindex + frmtlink.length();									}				}																		} while (searchFlag > 0); 					return content;					}			testMethod static void testTextAsHref() {		String content = 'hello www.google.com world this is a https://bbc.co.uk certified test of the www.link.com parser';		String results =  formatTextAsHref(content);		//count the number of link objects		Integer urlcount = 0;		Integer index = 0;		Integer previousIndex = 0;		while(index > -1) {						//search for next occurance of href using previous index as a baseline.			index = results.indexOf('href', previousIndex);			previousIndex = index + 4; //add 4 to account for the length of the href			if(index > -1) {				urlcount = urlcount + 1;			}		}		//three links should have been added					System.assertEquals(3, urlcount);			}				private static Integer indexOfNextURLPrefix(String content, Integer baseIndex, Integer padIndexFlag) {				List<String> prefixes = new List<String>();		List<Integer> indexes = new List<Integer>();		prefixes.add('www');		prefixes.add('https://');		prefixes.add('ftp://');        prefixes.add('https:&#47;&#47;');        prefixes.add('ftp:&#47;&#47;');		String backSlash = '\\\\this'; 		backSlash = backSlash.replace('this', ''); //Hack to be able to build backslash terminated character string see - http://forums.sforce.com/sforce/board/message?board.id=apex&message.id=5549#M5549		prefixes.add(backSlash);		//prefixes.add('\\\\');						//build array of possible url prefixes.  Broken out into two iterations to be more readable and debuggable		for (String prefix: prefixes) {						//capture index of each url prefix based on the base index to prevent finding duplicates			if (padindexflag == 1) {								indexes.add(content.indexOf(prefix, baseindex + prefix.length()));				//			} else {								indexes.add(content.indexOf(prefix, baseindex));				//			}			}					//set starting index to arbitrary large number. Apex does not seem to support java's Integer.MAX_VALUE;		Integer largenumber = 999999;		Integer indexmain = largenumber;				for(Integer index: indexes) {						//compare each iteration to indexmain to find the first instance of a valid url prefix			if (index == -1) {								//do nothing -1 indicates the prefix was never found							} else {								//see if this index is earlier then previously found index				indexmain = Math.min(indexmain, index);			}						}				if (indexmain == largenumber) {							//indexmain intial value was never updated.  Return -1 to indicate no url prefix has been found			indexmain = -1;		}			return indexmain;	}			private static String formatHREF(String urlname) {		String newurl;		//apex has bug escaping backslashes see: http://bugforce.eng.salesforce.com/bug/bugDetail.jsp?id=100000000000rrq		String backSlash = '\\this'; 		backSlash = backSlash.replace('this', ''); //Hack to be able to build backslash terminated character string		//test to see if file prefix should be added					if (urlname.startsWith(backSlash)) {			newurl = '<a target="_blank" href="file:///' + urlname + '">' + urlname + '</a>';		} else if (urlname.startsWith('w')) {			//url is missing https prefix - add to avoid core app treating it as a relative link			newurl = '<a target="_blank" href="https://' + urlname + '">https://' + urlname + '</a>';		} else {			//leave original formatting in place			newurl = '<a target="_blank" href="' + urlname + '">' + urlname + '</a>';		}							return newurl;	}		}