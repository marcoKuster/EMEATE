public with sharing class QA_AddTCtoUSController {        //String of Case Ids        String caseQr = '';        //String of Case Ids for testing        String caseQr_t = '';        //Split URL parameter into individual case ids        String[] caseIds = new String[]{};        QA_Test_Execution__c curTE = new QA_Test_Execution__c();        ADM_Work__c curUS = new ADM_Work__c();        Integer curStep = 1;        QA_Test_Case__c[] testCases = new QA_Test_Case__c[]{};        QA_Test_Case__c[] uniqueTCs = new QA_Test_Case__c[]{};        dupTCContainer[] duplicateTCs = new dupTCContainer[]{};        QA_Test_Case__c[] allTCs = new QA_Test_Case__c[]{};        String errorMessage = '';        String returnID = '';		public boolean testing {        	get {        		if( testing == null )        			testing = false;        		return testing;        	}        	set;        }        public class dupTCContainer {                QA_Test_Case__c TC;                boolean cbox;                public dupTCContainer (QA_Test_Case__c tc){                        this.cbox = false;                        this.TC = tc;                }                public QA_Test_Case__c getTc(){                        return this.TC;                }                public void setTc(QA_Test_Case__c tc){                        this.TC = tc;                }                public boolean getCbox(){                        return this.cbox;                }                public void setCbox(boolean b){                        this.cbox = b;                }        }        public QA_AddTCtoUSController() {                try{                        //Get the URL parameter 'cases' defining which cases should be operated on                        this.caseQr = System.currentPageReference().getParameters().get('cases');                        this.returnID = System.currentPageReference().getParameters().get('rid');                }catch(Exception e){                        //Static TC ids for testing                        this.caseQr = this.caseQr_t;                }        }                public boolean getInit(){                if(this.caseQr == '' || this.caseQr == null) this.caseQr = this.caseQr_t;                //If no cases are passed to the page, generate error message                if(this.caseQr == ''){                        this.errorMessage = 'No Test Cases selected, please go back and select at least one Test Case.';                        return true;                //Else parse TC ids                }else{                        this.testCases = new QA_Test_Case__c[]{};                        this.errorMessage = '';                        //Split the string containing all ids into a list                        this.caseIds = this.caseQr.split(';',0);                        //Retrieve the TCs                        this.testCases = [select id, name, Hierarchy__c, Brief_Description__c, Expected_Results__c from QA_Test_Case__c where id in :caseIds];                        return false;                }        }        public String getDateRequired() {                if(curTE.Status__c == 'Passed' || curTE.Status__c == 'Failed')                         return 'true';                else                        return 'false';        }                public String getErrorMessage() {                return this.errorMessage;        }        public boolean getIfStep1() {                return this.curStep == 1;        }        public boolean getIfStep2() {                return this.curStep == 2;        }        public boolean getIfStep3(){                return this.curStep == 3;        }        public boolean getIfUniqueTCs(){                return uniqueTCs.size() > 0;        }        public boolean getIfDuplicateTCs(){                return duplicateTCs.size() > 0;        }          public QA_Test_Execution__c getCurTE() {                return this.curTE;        }        public void setCurTE(QA_Test_Execution__c te) {                this.curTE = te;        }        public ADM_Work__c getCurUS() {                return this.curUS;        }        public QA_Test_Case__c[] getCases() {                return this.testCases;        }        public QA_Test_Case__c[] getUniqueCases() {                return this.uniqueTCs;        }        public dupTCContainer[] getDuplicateCases() {                return this.duplicateTCs;        }        public QA_Test_Case__c[] getAllCases() {                return this.allTCs;        }        public void selectAll(){                for(dupTCContainer dupTC: this.duplicateTCs){                        dupTC.cbox = true;                }        }        public void selectNone(){                for(dupTCContainer dupTC: this.duplicateTCs){                        dupTC.cbox = false;                }        }        public void setUS() {        	if(curTE.User_Story__c != null){       			this.curUS = [select id, name, Sprint__c from ADM_Work__c where id =: this.curTE.User_Story__c];        		this.curStep = 2;								// makes a new list of all the test case ids				Map<String, QA_Test_Case__c> testCaseIds = new Map<String, QA_Test_Case__c>();				for( QA_Test_Case__c testCase : this.testCases )					testcaseIds.put( testCase.Id, testCase );								// gets all the test executions linked to this user story with this test case                 for(QA_Test_Execution__c curTE : [select id, Test_Case__c from QA_Test_Execution__c where Test_Case__c in :testCaseIds.keySet() and User_Story__c =: this.curTE.User_Story__c]){                    // if you can remove this from the list of strings (aka this is the first time the test case came up)                    QA_Test_Case__c tempTC = testCaseIds.remove( curTE.Test_Case__c );                    if( tempTC != null ){                    	// add a new dupliate test case to the list                    	this.duplicateTCs.add( new dupTCContainer( tempTC ) );                    	// if there are no more test cases, breaks out                    	if( testCaseIds.size() <= 0 )                    		break;                    }                }                                // then after all the dups are removed, add all the unique ones that are left                for( QA_Test_Case__c curTC : testCaseIds.values() )                	this.uniqueTCs.add( curTC );            }        }        public void setTCs() {                this.allTCs.addAll(this.uniqueTCs);                for(dupTCContainer dupTC: this.duplicateTCs){                        if(dupTC.cbox) this.allTCs.add(dupTC.TC);                }                this.curStep = 3;        }        public PageReference handleCancel(){                PageReference p = new PageReference('/apex/' + this.returnID);                return p;        }        public PageReference handleSave(){        	if((curTE.Status__c == 'Passed' || curTE.Status__c == 'Failed') && curTE.Date_of_Last_Execution__c == null) return null;            if(this.curTE.Status__c == null) this.curTE.Status__c = 'Planned';                        List<QA_Test_Execution__c> toAddTEs = new List<QA_Test_Execution__c>();                            for(QA_Test_Case__c testCase: allTCs){            	QA_Test_Execution__c newTE = new QA_Test_Execution__c();                newTE.Test_Case__c = testCase.id;                newTE.User_Story__c = this.curTE.User_Story__c;                newTE.Assignee__c = this.curTE.Assignee__c;                newTE.Type__c = this.curTE.Type__c;                newTE.Status__c = this.curTE.Status__c;                newTE.Bugs__c = this.curTE.Bugs__c;                if(this.curTE.Number_of_Executions__c == null) {		    if((curTE.Status__c == 'Passed' || curTE.Status__c == 'Failed')) {			  newTE.Number_of_Executions__c = 1;		    } else {			  newTE.Number_of_Executions__c = 0;		    }                }               	else                	newTE.Number_of_Executions__c = this.curTE.Number_of_Executions__c;                                       	newTE.Build_of_Last_Execution__c = this.curTE.Build_of_Last_Execution__c;                newTE.Date_of_Last_Execution__c = this.curTE.Date_of_Last_Execution__c;								toAddTEs.add( newTE );                         }                        try{             	insert(toAddTEs);            	}catch(Exception e){             	System.debug('expcetion error msg' + e);                if( !testing )                	ApexPages.addMessages(e);                    return null;            	}                        	PageReference p = new PageReference('/' + this.curTE.User_Story__c);            return p;        }/** * @testcaseID a0B20000009ebB4EAI * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Add test case to US detail * @expectedResults User is able to click and be taken back to test case */ /** * @testcaseID a0B20000009ebB5EAI * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Add test case to US detail * @expectedResults User is able to click All then continue. Test cases appear under the selected test cases section */ /** * @testcaseID a0B20000009ebCQEAY * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Add test case to US detail * @expectedResults User is able to click None then continue. No Test cases appear under the selected test cases section */ /** * @testcaseID a0B20000009ebCREAY * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Select User Story * @expectedResults A user is able to select a user story from the lookup button and save the test cases to that user story */ /** * @testcaseID a0B20000009dtrkEAA * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Select User Story * @expectedResults A user (should) receives an error message that there needs to be a user story before hitting continue */ /** * @testcaseID a0B20000009dtrlEAA * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Select User Story * @expectedResults A user (should) receives an error message that there needs to be a user story before hitting continue */ /** * @testcaseID a0B20000009duG8EAI * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Select User Story * @expectedResults A user is able to select a user story from the lookup button and save the test cases to that user story */ /** * @testcaseID a0B20000009ebAeEAI * @userStory a07B0000000DfMh * @hierarchy GUS.QaforceToGUS.Add Test Cases to User Story.Select User Story * @expectedResults A user is able to select a user story from the lookup button and save the test cases to that user story */        private static testMethod void testAddTCtoUS(){            if([select count() from QA_Hierarchy__c where Name = 'API'] == 0) {                QA_Hierarchy__c hierarchy = new QA_Hierarchy__c();                hierarchy.Name = 'API';                hierarchy.Depth__c = 0;                insert hierarchy;            }        	            //TC ids string            String testIdStr = '';            //Orginal TCs            QA_Test_Case__c[] testTCs = new List<QA_Test_Case__c>();            //TC ids list            String[] testIds = new List<String>();            //Create 4 new TCs for the test            String[] eTypes = new String[]{'Manual','Ftest','Silktest','Utest'};            String[] relatedTo = new String[]{'Accounts','Account Teams','Alerts','Activities'};            for(Integer i=1;i<=4;i++){                QA_Test_Case__c tmpCase = new QA_Test_Case__c();				tmpCase.Brief_Description__c = 'TestTC' + i;				tmpCase.Hierarchy__c = 'API.TCMassEdit.Test';				tmpCase.Priority__c = 'Medium';				tmpCase.Execution_Type__c = eTypes[i-1];								insert(tmpCase);				testIdStr = testIdStr + tmpCase.id;				if(i!=4)testIdStr = testIdStr + ';';				testTCs.add(tmpCase);				testIds.add(tmpCase.id);			}                			//Create a new object for the tests            QA_AddTCtoUSController testObj = new QA_AddTCtoUSController();            testObj.testing =  true;                        //first test with blank            testObj.caseQr_t = '';            testObj.getInit();            System.assert(testObj.errorMessage != null);                        testObj.caseQr_t = testIdStr;            testObj.getInit();                        ADM_Work__c testUS = ADM_Work.createTestWork('User Story');                        User[] users = [SELECT Id FROM User LIMIT 1];            QA_Test_Execution__c testTE = new QA_Test_Execution__c();            testTE.User_Story__c = testUS.Id;             testTE.Status__c = 'Planned';            testTE.Bugs__c = '777700,777701';            testTE.Assignee__c = ((users != null && users.size() == 1) ? users[0].Id : null );            testTE.Number_Of_Executions__c = 5;            if( testTE.Assignee__c == null ) {            	QA_Test_Execution__c[] tempTEList =             		[SELECT User_Story__c, Status__c, Bugs__c, Assignee__c, Number_Of_Executions__c            		 FROM QA_Test_Execution__c LIMIT 1];            	if( tempTEList != null && tempTEList.size() == 1 )            		testTE = tempTEList[0];            	else            		System.debug( 'No Users or Test Executions found... please add one to the org before running this test.' );					            }            testObj.setCurTE(testTE);                        System.assertEquals('false', testObj.getDateRequired());            System.assert(testObj.getErrorMessage() == '');                        System.assertEquals(true, testObj.getIfStep1());            testObj.setUS();            System.assertEquals(true, testObj.getIfStep2());            testObj.setTCs();            System.assertEquals(true, testObj.getIfStep3());                        System.assertEquals(false, testObj.getIfDuplicateTCs());            System.assertEquals(true, testObj.getIfUniqueTCs());                        System.assertEquals('Planned', testObj.getCurTE().Status__c);                        testObj.selectAll();            testObj.selectNone();                        System.assertEquals(4, testObj.getUniqueCases().size());            System.assertEquals(0, testObj.getDuplicateCases().size());            System.assertEquals(4, testObj.getAllCases().size());            System.assertEquals(4, testObj.getCases().size());                        if (testObj.returnID == null) {	    	testObj.returnID = 'testing';	    }	    System.assert(testObj.handleCancel().getUrl().endsWith(testObj.returnID));        System.assert(testObj.handleSave() != null);                            QA_Test_Case__c testTC = new QA_Test_Case__c();            testTC.Brief_Description__c = 'Test TC';            dupTCContainer testDupCont = new dupTCContainer(testTC);            testDupCont.setTC(testTC);            testDupCont.setCbox(true);            System.assertEquals('Test TC', testDupCont.getTC().Brief_Description__c);            System.assertEquals(true, testDupCont.getCbox());                        System.assert(testObj.getCurUS() != null);                    }}