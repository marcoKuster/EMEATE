/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * * Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an organization are executed whenever Apex code is deployed * to a production organization to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production organization. In addition, all triggers must have some code coverage. * * The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the organization size limit for all Apex scripts. * * See the Apex Language Reference for more information about Testing and Code Coverage. */@isTestprivate class ADM_TeamDependencyUtilsTest { private static ADM_Scrum_Team__c scrumteam {        get {            if(scrumteam == null) scrumteam = ADM_ScrumTeam.createTestScrumTeam();                        return scrumteam;        }        set;    }        private static ADM_Work__c work {        get {            if(work == null){                 work = ADM_Work.setupTestWork('Bug');                 ADM_Product_Tag__c tag = [select id, Team__c from ADM_Product_Tag__c where id=:work.Product_Tag__c];                 tag.Team__c = scrumteam.id;                 update tag;                 work.Product_Tag__c = tag.id;                 insert work;                 work = [select id, Name, Scrum_Team__c, Product_Tag__c from ADM_Work__c where id=: work.id];            }            return work;        }        set;    }         private static ADM_Work__c workNew {        get {            if(workNew == null){                 workNew = ADM_Work.setupTestWork('Bug');                 ADM_Product_Tag__c tag = [select id, Team__c from ADM_Product_Tag__c where id=:workNew.Product_Tag__c];                 tag.Team__c = ADM_ScrumTeam.createAndInsertScrumTeamWithRandomName().Id;                 update tag;                 workNew.Product_Tag__c = tag.id;                 insert workNew;                 workNew = [select id, Name, Scrum_Team__c, Product_Tag__c from ADM_Work__c where id=: workNew.id];            }            return workNew;        }        set;    }    static testMethod void testGetSObjectChangeWithoutChanges() {               List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                        works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = System.today();        td.Dependency_Status__c = 'New';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);        els2Insert.add(tdNew);                insert els2Insert;                Map<String, ADM_FieldWrapper> teamDependencyFields = ADM_TeamDependencyUtils.TEAM_DEPENDENCY_MAP;                        for(String fieldName : teamDependencyFields.keySet()) {            Sobject elOld, elNew = null;            if(td != null) elOld = td;            if(tdNew != null) elNew = tdNew;                        changes = ADM_TeamDependencyUtils.getSObjectChange(elOld, elNew, fieldName, teamDependencyFields.get(fieldName).fieldLabel, changes);        }                Test.stopTest();                System.assert(changes.isEmpty(),'error: changes should have been empty! -> changes_' + changes + '_');    }    static testMethod void testGetSObjectChangeWithChangeToDate() {               List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = System.today();        td.Dependency_Status__c = 'New';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);                tdNew.Deliver_By__c = System.today().addDays(2);        els2Insert.add(tdNew);                insert els2Insert;                        Map<String, ADM_FieldWrapper> teamDependencyFields = ADM_TeamDependencyUtils.TEAM_DEPENDENCY_MAP;                        for(String fieldName : teamDependencyFields.keySet()) {            Sobject elOld, elNew = null;            if(td != null) elOld = td;            if(tdNew != null) elNew = tdNew;                        changes = ADM_TeamDependencyUtils.getSObjectChange(elOld, elNew, fieldName, teamDependencyFields.get(fieldName).fieldLabel, changes);        }                Test.stopTest();                System.assert(changes.get(0).contains('changed'),'error: changes should have been made! -> changes_' + changes + '_');    }    static testMethod void testGetSObjectChangeRemovingToDate() {               List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Scrum_Team__c dependentTeam = scrumteam;        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = System.today();        td.Dependency_Status__c = 'New';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);                tdNew.Deliver_By__c = null;        els2Insert.add(tdNew);                insert els2Insert;                        Map<String, ADM_FieldWrapper> teamDependencyFields = ADM_TeamDependencyUtils.TEAM_DEPENDENCY_MAP;                        for(String fieldName : teamDependencyFields.keySet()) {            Sobject elOld, elNew = null;            if(td != null) elOld = td;            if(tdNew != null) elNew = tdNew;                        changes = ADM_TeamDependencyUtils.getSObjectChange(elOld, elNew, fieldName, teamDependencyFields.get(fieldName).fieldLabel, changes);        }                Test.stopTest();                System.assert(changes.get(0).contains('removed'),'error: changes should have been made! -> changes_' + changes + '_');    }        static testMethod void test_openTeamDependenciesEmpty() {        Map<String,ADM_Work__c> workIdToObjectMap = new Map<String,ADM_Work__c>();        ADM_TeamDependencyUtils.updateTeamDependenciesBasedOnWorkStatus(workIdToObjectMap);    }        static testMethod void test_closeTeamDependenciesEmpty() {        Map<String,ADM_Work__c> workIdToObjectMap = new Map<String,ADM_Work__c>();        ADM_TeamDependencyUtils.updateTeamDependenciesBasedOnWorkStatus(workIdToObjectMap);    }        static testMethod void test_closeTeamDependenciesException() {        ADM_Work__c closedUserStory = ADM_Work.createTestBug();        Map<String,ADM_Work__c> workIdToObjectMap = new Map<String,ADM_Work__c>();        workIdToObjectMap.put(closedUserStory.Id, closedUserStory);        ADM_TeamDependencyUtils.updateTeamDependenciesBasedOnWorkStatus(workIdToObjectMap);    }/**    Ensure that when a user story that's saved under the "Dependencies other teams have on us" is closed, the team dependency on that story is also auto-closed    This is the long Description.    *@testcaseID a0B20000006bp9zEAA    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies. Edit dependency    *@userstory a01T00000034dceIAA    *@expectedResults The user story under the "Dependencies other teams have on us" section is closed*/        static testMethod void test_closeTeamDependencies() {                       List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'Completed';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);                tdNew.Deliver_By__c = System.today();        els2Insert.add(tdNew);                insert els2Insert;                Map<String,ADM_Work__c> workIdToObjectMap = new Map<String,ADM_Work__c>();        for(ADM_Work__c el : works) {            workIdToObjectMap.put(el.Id, el);        }        ADM_TeamDependencyUtils.updateTeamDependenciesBasedOnWorkStatus(workIdToObjectMap);    }    /**    Dependency Status should change to "Never" if work item is "Nevered"*/        static testMethod void test_TeamDependencyNeverOnWorkStatusChangeToNever() {                       List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();              ADM_Work__c deliverableStory = ADM_Work.setupTestWork('Bug');                insert deliverableStory;                td.Deliverable__c = 'test';        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'New';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                els2Insert.add(td);                insert els2Insert;        deliverableStory.Status__c = 'Never';        update deliverableStory;        ADM_Team_Dependency__c[] deps = [select id, dependency_status__c, Provider_User_Story__c from ADM_Team_Dependency__c where provider_user_story__c = :deliverableStory.Id];                System.assertEquals(deps[0].dependency_status__c, 'Never');                    }/**    Ensure that when a user story that's saved under the "Dependencies other teams have on us" is re-opened, the team dependency on that story is also auto-reopened    This is the long Description.    *@testcaseID a0B20000006bpA2EAI    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies. Edit dependency    *@userstory a01T00000034dceIAA    *@expectedResults The user story under the "Dependencies other teams have on us" section is re-opened*/        static testMethod void test_openTeamDependencies() {                       List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                        works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'Completed';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);                tdNew.Deliver_By__c = System.today();        els2Insert.add(tdNew);                insert els2Insert;                Map<String,ADM_Work__c> workIdToObjectMap = new Map<String,ADM_Work__c>();        for(ADM_Work__c el : works) {            workIdToObjectMap.put(el.Id, el);        }        ADM_TeamDependencyUtils.updateTeamDependenciesBasedOnWorkStatus(workIdToObjectMap);    }    static testMethod void testGetSObjectChangeAddingToDate() {               List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();      /*  ADM_Scrum_Team__c dependentTeam = scrumteam;        ADM_Work__c dependentStory = work;        dependentStory.Scrum_Team__c = dependentTeam.Id;                ADM_Scrum_Team__c providingTeam = dependentTeam.clone(false,true);        providingTeam.Name = 'testGetSObjectChangeAddingToDate';        insert providingTeam;        ADM_Work__c deliverableStory = workNew;        deliverableStory.Scrum_Team__c = providingTeam.Id;                works.add(dependentStory);        works.add(deliverableStory);                update works;*/                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = work.Id;        td.Dependent_Team__c = work.Scrum_Team__c;        td.Provider_Team__c = workNew.Scrum_Team__c;        td.Provider_User_Story__c = workNew.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'New';                                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);                tdNew.Deliver_By__c = System.today();        els2Insert.add(tdNew);                insert els2Insert;                        Map<String, ADM_FieldWrapper> teamDependencyFields = ADM_TeamDependencyUtils.TEAM_DEPENDENCY_MAP;                        for(String fieldName : teamDependencyFields.keySet()) {            Sobject elOld, elNew = null;            if(td != null) elOld = td;            if(tdNew != null) elNew = tdNew;                        changes = ADM_TeamDependencyUtils.getSObjectChange(elOld, elNew, fieldName, teamDependencyFields.get(fieldName).fieldLabel, changes);        }                Test.stopTest();                System.assert(changes.get(0).contains('added'),'error: changes should have been made! -> changes_' + changes + '_');    }        public testMethod static void test_asyncSendUserStoryUpdateMessage_withEmptySet() {        Test.startTest();        Set<Id> workUpdatedSprintOrBuild = new Set<Id>();        Test.stopTest();        ADM_TeamDependencyUtils.asyncSendUserStoryUpdateMessage(workUpdatedSprintOrBuild);    }/**    Ensure that  a user cannot add a dependency with status = Prioritized if "User Story For Deliverable" is empty    This is the long Description.    *@testcaseID a0B20000006bpitEAA    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies. Edit dependency    *@userstory a01T00000034dceIAA    *@expectedResults user cannot add a dependency with status = Prioritized if "User Story For Deliverable" is empty*/    static testMethod void test_savePrioritizedWithoutDependentWork() {        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        td.Dependency_Status__c = 'Prioritized';        try {           Database.insert(td);           System.assert(false, 'Test should have a thrown a DML exception');        } catch(DmlException e) {            System.assert(e.getMessage().contains('user story for the deliverable must be linked to the dependency in order to set the dependency status to &quot;Prioritized&quot; or &quot;Committed&quot;'));        }            }/**    Ensure that  a user cannot add a dependency with status = Committed if "User Story For Deliverable" is empty    This is the long Description.    *@testcaseID a0B20000006bpiuEAA    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies. Edit dependency    *@userstory a01T00000034dceIAA    *@expectedResults user cannot add a dependency with status = Prioritized if "User Story For Deliverable" is empty*/    static testMethod void test_saveCommittedWithoutDependentWork() {        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        td.Dependency_Status__c = 'Committed';        try {           Database.insert(td);            System.assert(false, 'Test should have a thrown a DML exception');        } catch(DmlException e) {            System.assert(e.getMessage().contains('user story for the deliverable must be linked to the dependency in order to set the dependency status to &quot;Prioritized&quot; or &quot;Committed&quot;'));        }            }/**    Ensure that when the dependency team under the "Dependencies we have on other teams" section changes, Scrum master,product owner and program manager from both teams receive emails    This is the long Description.    *@testcaseID a0B20000006bpA3EAI    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies. Edit dependency    *@userstory a01T00000034dceIAA    *@expectedResults Scrum master,product owner and program manager from both teams receive emails*//**    Ensure that when a user changes status on a team dependency under the "Dependencies we have on other teams" section, Scrum master,product owner and program manager from both teams receive emails    This is the long Description.    *@testcaseID a0B20000006bpirEAA    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies. Edit dependency    *@userstory a01T00000034dceIAA    *@expectedResults Scrum master,product owner and program manager from both teams receive emails*/        static testMethod void test_workUpdatedSprintOrBuild_withProviderUserStoryNew() {          Set<Id> workUpdatedSprintOrBuild = new Set<Id>();                     List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'New';                ADM_Team_Dependency__c tdNew = td.clone(false,true);                elsOld.add(td);        elsNew.put(td.Id,td);                els2Insert.add(td);                tdNew.Deliver_By__c = System.today();        els2Insert.add(tdNew);                insert els2Insert;                for(ADM_Work__c el : works) {            workUpdatedSprintOrBuild.add(el.Id);        }        ADM_TeamDependencyUtils.asyncSendUserStoryUpdateMessage(workUpdatedSprintOrBuild);    }    /**    Ensure that fields Dependency Status, Team with Dependency, Deliverable and Team Providing Deliverable are mandatory fields    This is the long Description.    *@testcaseID a0B20000006bpdPEAQ    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies.New dependency    *@userstory a01T00000034dceIAA    *@expectedResults Fields Dependency Status, Team with Dependency, Deliverable and Team Providing Deliverable are mandatory fields*//**    Ensure that fields User Story with Dependency,Target Build, Needed by (date), User Story for Deliverable, Notes are optional fields    This is the long Description.    *@testcaseID a0B20000006bpdQEAQ    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies.New dependency    *@userstory a01T00000034dceIAA    *@expectedResults Fields User Story with Dependency,Target Build, Needed by (date), User Story for Deliverable, Notes are optional fields*/        static testMethod void test_requiredFields_DependencyStatus() {                       List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'Completed';                Database.insert(td);                td.Dependency_Status__c = null;                try {            Database.update(td);        } catch(DmlException e) {            System.assert(e.getMessage() != null);                    try {                td.Dependent_Team__c = 'Completed';                td.Dependent_Team__c = null;                Database.update(td);            } catch(DmlException ex) {                System.assert(ex.getMessage() != null);                                try {                    td.Provider_Team__c = null;                    td.Dependent_Team__c = dependentStory.Scrum_Team__c;                     Database.insert(td);                } catch(DmlException exc) {                    System.assert(exc.getMessage() != null);                }            }        }    }/**    Ensure that the Needed By date is greater than today    This is the long Description.    *@testcaseID a0B20000006c6GeEAI    *@hierarchy GUS.ScrumforceToGUS.ScrumTeams.Dependencies.New dependency    *@userstory a01T00000034dceIAA    *@expectedResults If Needed by date is not greater that today, generate error*/        static testMethod void test_deliverableDateInPast() {                       List<ADM_Work__c> works = new List<ADM_Work__c>();        List<ADM_Team_Dependency__c> els2Insert = new List<ADM_Team_Dependency__c>();        List<ADM_Team_Dependency__c> elsOld = new List<ADM_Team_Dependency__c>();        Map<Id,ADM_Team_Dependency__c> elsNew = new Map<Id,ADM_Team_Dependency__c>();        ADM_Team_Dependency__c td = new ADM_Team_Dependency__c();        List<String> changes = new List<String>();                Test.startTest();        ADM_Work__c dependentStory = work;        ADM_Work__c deliverableStory = workNew;                works.add(dependentStory);        works.add(deliverableStory);                update works;                td.Deliverable__c = 'test';        td.Dependent_User_Story__c = dependentStory.Id;        td.Dependent_Team__c = dependentStory.Scrum_Team__c;        td.Provider_Team__c = deliverableStory.Scrum_Team__c;        td.Provider_User_Story__c = deliverableStory.Id;        td.Deliver_By__c = null;        td.Dependency_Status__c = 'Completed';                Database.insert(td);                try {            td.Deliver_By__c = System.today().addDays(-3);            Database.update(td);             System.assert(false, 'Test should have a thrown a DML exception');        } catch(DmlException e) {            System.assert(e.getMessage() != null);        }    }   }