public class ADM_ChangelistDetailAccumulator {  private ADM_Change_List__c changelist;  private List<ADM_Change_List__c> changelists;    public static final String orgName = '@' + ADM_Organization.getOrganizationName().toLowerCase() + '.com';  public ADM_ChangelistDetailAccumulator() {    changelist = new ADM_Change_List__c();    changelists = new List<ADM_Change_List__c>();  }  public List<ADM_Change_List__c> getChangelists(ADM_Perforce_Connector__c[] connectors) {    for(ADM_Perforce_Connector__c connector : connectors) {      changelists.add(getChangelist(connector.Describe__c, connector.Changelist__c, connector.Work__c, connector.Release__c, connector.User__c, connector.Task__c));    }    return this.changelists;  }  public ADM_Change_List__c getChangelist(String describe, String changelistNumber, String workId, String release, String user, String task) {    List<String> lines = describe.split('\n');    String invalidIdError = 'The task ID entered is invalid';    changelist.External_ID__c = changelistNumber + '@' + workId;    changelist.Perforce_Changelist__c = changelistNumber;    changelist.Work__c = workId;    changelist.Release_Name__c = release;    changelist.Comments__c = '';    changelist.Check_In_By__c = user;    changelist.Task__c = task;    assignCheckinIfo(lines);    assignComment(describe);    return changelist;  }  private void assignComment(String describe) {    Pattern descriptionPattern = Pattern.compile('\nDescription:');    Matcher description = descriptionPattern.matcher(describe);    if(description.find()) {      changelist.Comments__c = describe.substring(description.end());    }  }  private void assignCheckinIfo(String[] lines) {    Pattern patternDate = Pattern.compile('^Date:\\s*(\\d+)/(\\d+)/(\\d+)\\s+(\\d+):(\\d+):(\\d+)\\s*');    matcher clMatcher;    for(String line : lines) {      if(changelist.Check_In_Date__c == null) {        clMatcher = patternDate.matcher(line);        if(clMatcher.find()) {          changelist.Check_In_Date__c = Datetime.newInstance(            Integer.valueOf(clMatcher.group(1)),            Integer.valueOf(clMatcher.group(2)),            Integer.valueOf(clMatcher.group(3)),            Integer.valueOf(clMatcher.group(4)),            Integer.valueOf(clMatcher.group(5)),            Integer.valueOf(clMatcher.group(6))          );        }      }    }  }  public Set<String> getChangelistIds(List<ADM_Change_List__c> changelists) {    List<Database.Upsertresult> results = Database.upsert(changelists, ADM_Change_List__c.External_ID__c, false);    Set<String> changelistIds = new Set<String>();    for(Database.Upsertresult result : results) {      if(result.isSuccess()) {        changelistIds.add(result.getId());      } else {        System.debug('Warning - false to upsert changelists.  Errors:' + result.getErrors());      }    }    return changelistIds;  }}