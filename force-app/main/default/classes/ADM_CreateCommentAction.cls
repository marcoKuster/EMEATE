global class ADM_CreateCommentAction {	// called by the before insert/update trigger	public static void beforeInsertOrUpdate(ADM_Work__c[] works) {		for(ADM_Work__c work : works) {			            			if(work.Is_Ignorable__c == false) {				if(work.Priority_Override_Explanation__c != null && !work.Priority_Override_Explanation__c.equalsIgnoreCase(adm_work.PRIORITY_OVERRIDE_EXPLANATION)) {					String priorityOverride = 'Priority override explanation: ' + work.Priority_Override_Explanation__c; 					if(work.Description__c == null) {						work.Description__c = priorityOverride;					} else {						work.Description__c += '\n\n' + priorityOverride;					}				}				work.Priority_Override_Explanation_Copy__c = work.Priority_Override_Explanation__c;				work.Priority_Override_Explanation__c = '';				work.Priority_Mapping_Copy__c = work.Priority_Mapping__c;				work.Priority_Mapping__c = null; 				work.Comment_Copy__c = work.Description__c;				work.Description__c = null;				work.Preserve_Formatting_Copy__c = work.Preserve_Formatting__c;				work.Preserve_Formatting__c = false;				work.Last_Modified_By_Copy__c = work.Last_Modified_By__c;				work.Last_Modified_By__c = null;				work.Scheduled_Build_Copy__c = null;				work.Found_In_Build_Copy__c = null;								work.Email_On_Save_Copy__c = work.Email_On_Save__c;				work.Email_On_Save__c = false;												if(work.Closed__c > 0 || work.Resolved__c > 0) 				    work.Perforce_Status__c = null;											} else { 				//ignorable flag has been set so skip beforeInsertOrUpdate() operations this time.  Reset flag for the next				//time this record is edited				work.Is_Ignorable__c = false;				//reset comment copy as we want everything to be ignored in this situation				work.Comment_Copy__c = null;			}						            		}	}    /**     * Gets a list of comments with the specified Work ID value.     */	WebService static ADM_Comment__c[] get( String value ){		ADM_Comment__c[] c;					c = [ 					Select a.Preserve_Formatting__c,a.LastModifiedBy.Email, a.LastModifiedBy.Name, a.LastModifiedBy.FirstName, a.LastModifiedBy.LastName, a.LastModifiedById, a.Id, a.CreatedDate, a.CreatedBy.Email, a.CreatedBy.Name, a.CreatedBy.FirstName, a.CreatedBy.LastName, a.CreatedById, a.Comment_Created_Date__c, a.Comment_Created_By__r.Email, a.Comment_Created_By__r.Name, a.Comment_Created_By__r.FirstName, a.Comment_Created_By__r.LastName, a.Comment_Created_By__c, a.Body__c 			From ADM_Comment__c a			 			Where a.Work__c =: value 			Order By a.CreatedDate DESC		];					for(ADM_Comment__c comment : c) {				if(comment.Body__c != null) comment.Body__c = Matcher.quoteReplacement(comment.Body__c);		}				return c;		}		public static testMethod void testGet() {		ADM_Work__c work = ADM_Work.createTestBug();				ADM_Comment__c comment = new ADM_Comment__c();		comment.Work__c = work.Id;		comment.Body__c = 'test';		insert comment;				ADM_Comment__c[] comments = ADM_CreateCommentAction.get(work.Id);		System.assertEquals(1, comments.size());	}		public static boolean wasCommentInserted(ADM_Work__c work) {		if( work.Comment_Copy__c != null ) {			return true;		}				return false;	}		static testMethod void testWasCommentInserted() {		ADM_Work__c work = ADM_Work.createTestBug();		work.Comment_Copy__c = null;		System.assert(ADM_CreateCommentAction.wasCommentInserted(work) != true, 'Expected to see that a comment was not inserted here -> ' + work.Comment_Copy__c);		work.Comment_Copy__c = 'test 123';		System.assert(ADM_CreateCommentAction.wasCommentInserted(work) == true, 'Expected to see that a comment was inserted here -> ' + work.Comment_Copy__c);	}		public static boolean hasManualLastModifiedBy(ADM_Work__c work) {		if(work.Last_Modified_By_Copy__c != null) {			return true;		}		return false;	}		static testMethod void testHasManualLastModifiedBy() {		ADM_Work__c work = ADM_Work.createTestBug();		User u = [select Id from User limit 1];		work.Last_Modified_By_Copy__c = u.Id;		System.assert(ADM_CreateCommentAction.hasManualLastModifiedBy(work) == true,'Expected this should have a manually set last modified by value! -> ' + work.Last_Modified_By_Copy__c);		work.Last_Modified_By_Copy__c = null;		System.assert(ADM_CreateCommentAction.hasManualLastModifiedBy(work) != true,'Expected this should not have a manually set last modified by value! -> ' + work.Last_Modified_By_Copy__c);	}		public static void save(List<ADM_CommentWrapper> comments) {		ADM_Comment.save(comments);	}		static testMethod void testSaveCommentWrapper() {		ADM_Work__c work = ADM_Work.createTestBug();		User author = ADM_WorkUser.createTestUser();		ADM_CommentWrapper commentWrapper = new ADM_CommentWrapper(work, new List<String>{'test\nline2'}, author);				Test.startTest();		ADM_CreateCommentAction.save(new List<ADM_CommentWrapper>{commentWrapper});		Test.stopTest();				List<ADM_Comment__c> comments = [select Body__c from ADM_Comment__c where Work__c = :work.Id];		System.assertEquals(1, comments.size(), 'Expected one comment to be created from the wrapper');		System.assertEquals('test\nline2', comments.get(0).Body__c, 'Expected the body of the comment to be the same as the change list description');	}		static testMethod void testBeforeInsertOrUpdate() {		String text = 'hello world';		ADM_Work__c work = ADM_Work.createTestWork();		work.Description__c = text;		work.Preserve_Formatting__c = true;		work.Priority_Override_Explanation__c = text;				//Database.update(work);		//ADM_Work__c uWork = [select Description__c, Comment_Copy__c, Preserve_Formatting__c, Preserve_Formatting_Copy__c, Priority_Override_Explanation_Copy__c from ADM_Work__c where Id =: work.Id];		ADM_CreateCommentAction.beforeInsertOrUpdate(new List<ADM_Work__c>{work});						System.assertEquals(null, work.Description__c, 'Description__c ->' + work.Description__c);		System.assert(work.Comment_Copy__c.contains(text), 'Comment_Copy__c ->' + work.Comment_Copy__c);		System.assertEquals(false, work.Preserve_Formatting__c, 'Preserve_Formatting__c ->' + work.Preserve_Formatting__c);		System.assertEquals(true, work.Preserve_Formatting_Copy__c, 'Preserve_Formatting_Copy__c ->' + work.Preserve_Formatting_Copy__c);		System.assertEquals(text, work.Priority_Override_Explanation_Copy__c, 'Priority_Override_Explanation_Copy__c ->' + work.Priority_Override_Explanation_Copy__c);	}}