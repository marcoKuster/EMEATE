// @author: Alexis Williams// purpose: This class is used to set the Fixed_On, Fixed_By, Closed_On, and Closed_By custom field values // 			based upon the Status__c value// formula used for Resolved__c CASE( ADM__Status__c, "Fixed", 1, "Tested", 1, "Closed", 1, "Not Reproducible", 1, "Not a bug", 1, "Duplicate", 1, "Never", 1,"Closed-U/Ftest", 1, "Closed-Untested", 1, "QA In Progress", 1,0)public class ADM_WorkFixedAndClosedActions {// This method takes in the Trigger then evaulates whether or not the old and new values match up	// You will not be calling this on insert because the closed and field status on insert	public static boolean returnValue = true;		public static Pattern ClosedStatusPattern = Pattern.compile('Closed|Not|Duplicate|Never');	public static Pattern FixedStatusPattern = Pattern.compile('Fixed|Tested|QA In Progress');		public static void setDependentFields( ADM_Work__c[] worksNew, ADM_Work__c[] worksOld ) {							             				if(worksNew != null && worksOld != null) {			for ( Integer i = 0; i < worksOld.size(); i++ ) {				// make sure the old and new values are not ==							if ( worksNew[i].Resolved__c != worksOld[i].Resolved__c ) {					if( worksNew[i].Resolved__c == 1 ){						setResolvedValues(worksNew[i]);					} else if( worksNew[i].Resolved__c == 0 ){						removeResolvedValues(worksNew[i]);										}				}								// make sure the old and new values are not == 				if ( worksNew[i].Closed__c != worksOld[i].Closed__c ) {									if( worksNew[i].Closed__c == 1 ){						setClosedValues(worksNew[i]);							setQAEngineerIfNull(worksNew[i]);					} else if( worksNew[i].Closed__c == 0 ){						removeClosedValues(worksNew[i]);					}				}			}		}	}		public static void setDependentFields( ADM_Work__c[] worksNew) {							             				if(worksNew != null) {			for ( Integer i = 0; i < worksNew.size(); i++ ) {				//if being created with resolved or closed status set dependent fields accordingly								if ( worksNew[i].Resolved__c == 1) {					setResolvedValues(worksNew[i]);				}								if ( worksNew[i].Closed__c == 1) {					setClosedValues(worksNew[i]);				}							}		}						}		private static List<ADM_Work__c> convertItemMapToItemList(Map<Id, ADM_Work__c> iMap) {		List<ADM_Work__c> itemList = new List<ADM_Work__c>();		for(Id id : iMap.keyset()) {			itemList.add(iMap.get(id));		}		return itemList;			}			testMethod static void testConvertItemMapToItemList() {		Map<Id, ADM_Work__c> itemMap = new Map<Id, ADM_Work__c>();		ADM_Work__c work1 = ADM_Work.createTestWork();		ADM_Work__c work2 = ADM_Work.createTestWork();		itemMap.put(work1.id, work1);		itemMap.put(work2.id, work2);		List<ADM_Work__c> items = convertItemMapToItemList(itemMap);		System.assert(items != null);		System.assertEquals(2, items.size());		}			// just used to set the values for fixed stuff	public static void setResolvedValues( ADM_Work__c w ) {						w.Resolved_By__c = Userinfo.getUserName();				w.Resolved_On__c = System.now();									}		public static void removeResolvedValues( ADM_Work__c w ) {				w.Resolved_By__c = null;		w.Resolved_On__c = null;					}		// just used to set the ADM_Work__c closed values when called	public static void setClosedValues( ADM_Work__c w ) {		w.Closed_By__c = Userinfo.getUserName();		w.Closed_On__c = System.now();			}		//jhatton bug#181294 if the QAEngineer is empty/blank and currrent user closes the bug,	//then the QAEngineer field is set to the current user.  Same as Bugforce.	public static void setQAEngineerIfNull( ADM_Work__c w ) {		if(w.QA_Engineer__c == null && w.Type__c != 'ToDo') {						w.QA_Engineer__c = Userinfo.getUserId();		}					}		/*	@testcaseID a1DB00000000qMC	@userstoryID a0790000000D8RR	@Hierarchy GUS.ScrumforceToGUS.Work Page.Bug.Detail Page	@Expected Results User receives an error that QA Engineer is a mandatory field	@Author James Hatton	*/	testMethod static void testSetQAEngineerIfNull() {							ADM_Work__c workinput = ADM_Work.createTestBug();		workinput.QA_Engineer__c = null;		workinput.Closed_By__c = UserInfo.getUserId();		ADM_WorkFixedAndClosedActions.setQAEngineerIfNull(workinput);		//QA Eng is null so QA Engineer should have been set to equal user who closed the bug		System.assertEquals(workinput.Closed_By__c, workinput.QA_Engineer__c);		//double check they don't just equal because QA is null		System.assertNotEquals(null, workinput.QA_Engineer__c);	}		/*	@testcaseID a1DB00000001CIt	@userstoryID a0790000000D8RR	@Hierarchy GUS.ScrumforcetoGUS.Assignment Rules page.RuleVerification.New	@Expected Results Unit test relies on two users existing in the org.	@Author James Hatton	*/	testMethod static void testSetQAEngineerISNotSetForToDos() {							ADM_Work__c workinput = ADM_Work.createTestWork('ToDo');		workinput.Type__c = 'ToDo';		workinput.QA_Engineer__c = null;		ADM_WorkFixedAndClosedActions.setQAEngineerIfNull(workinput);		System.assertEquals(null, workinput.QA_Engineer__c);	}		public static void removeClosedValues( ADM_Work__c w ) {					w.Closed_By__c = null;		w.Closed_On__c = null;						}		// used to upsert the list of ADM_Work__c items when they have reached 200 in the method above is where we were calling this 1	    	public static Integer flush(List<ADM_Work__c> items) {        Integer upserted = 0;                try {        	        	// upsert into our DB	        List< Database.upsertResult > uResults = Database.upsert( items, false );	        	        // loop over the results	        for( Database.upsertResult result : uResults ){	        		        	// check to make sure it all went good	        	if( result.isSuccess() && result.isCreated() ){	        			        		// increase the upsert counter	        		upserted += 1;		        	}		        }        	        	        // clear out the items	        items.clear();	        }                catch( DmlException e ) {              	        	System.debug( e.getMessage() );        		        }                return upserted;    }        testMethod static void testFlush() {    	ADM_Work__c work1 = ADM_Work.createTestWork();    	ADM_Work__c work2 = ADM_Work.createTestWork();    	List<ADM_Work__c> works = new List<ADM_Work__c>();    	works.add(work1);    	works.add(work2);    	System.assert(ADM_WorkFixedAndClosedActions.flush(works) != null);	    }	        testMethod static void testWorkFixedAndClosed() {    	ADM_Work__c work = ADM_Work.createTestWork();    	ADM_WorkFixedAndClosedActions.setResolvedValues(work);    	System.assert(work != null);    	//TODO: figure way to populate last updated by (which resolved by depends on) inside a unit test.  Can't use existing data due to packaging and User object doesn't allow DML      	//System.assert(work.Resolved_By__c != null);    	//System.assert(work.Resolved_On__c != null);    	ADM_WorkFixedAndClosedActions.removeResolvedValues(work);    	System.assert(work.Resolved_By__c == null);    	System.assert(work.Resolved_On__c == null);    	ADM_WorkFixedAndClosedActions.setClosedValues(work);    	System.assert(work.Closed_By__c != null);    	//System.assert(work.Closed_On__c != null);    	ADM_WorkFixedAndClosedActions.removeClosedValues(work);    	System.assert(work.Closed_By__c == null);    	System.assert(work.Closed_On__c == null);    	    }	}