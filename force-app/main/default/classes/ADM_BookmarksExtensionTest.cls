/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * * Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an organization are executed whenever Apex code is deployed * to a production organization to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production organization. In addition, all triggers must have some code coverage. * * The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the organization size limit for all Apex scripts. * * See the Apex Language Reference for more information about Testing and Code Coverage. */@isTestprivate class ADM_BookmarksExtensionTest {	private static final String bookmarkUrl = 'http://google.com';	private static final String bookmarkTitle = 'Google';    private static ADM_Bookmark__c bookmark {    	get {    		if(bookmark == null) {    			System.runAs(user) {	    			bookmark = new ADM_Bookmark__c();	                bookmark.Url__c = bookmarkUrl;	                bookmark.Title__c = bookmarkTitle;	                insert bookmark;    			}    		}    		return bookmark;    	}    	set;    }    private static User user {        get {            if(user == null) user = ADM_WorkUser.createTestUser();            return user;        }        set;    }    private static List<ADM_Bookmark__c> bookmarks {    	get {    		if(bookmarks == null) {    			bookmarks = new List<ADM_Bookmark__c>();    			bookmarks.add(bookmark);    		}    		return bookmarks;    	}    	set;    }    testMethod static void testMessagesDisplayedWithNoBookmarks() {    	System.runAs(user) {	    	ADM_BookmarksExtension ext = new ADM_BookmarksExtension();	    	Integer numBookmarks = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	    	System.assert(ext.bookmarks.size() == numBookmarks,'bookmarks were not numBookmarks!=>' + numBookmarks + 'actual number found =>' + ext.bookmarks.size());    	}    } /*      @testcaseID a0B20000007jhs9EAA      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create bookmark in IE      @userstory a0790000000DEd1      @expectedResults: The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */        /*      @testcaseID a0B20000006eCUoEAM      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create new bookmark      @userstory a0790000000DEd1      @expectedResults: The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */        /*      @testcaseID a0B20000006eCUpEAM      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create new bookmark      @userstory a0790000000DEd1      @expectedResults: The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */        /*      @testcaseID a0B20000006eCUqEAM      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create new bookmark      @userstory a0790000000DEd1      @expectedResults: The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */        /*      @testcaseID a0B20000006eCUrEAM      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create new bookmark      @userstory a0790000000DEd1      @expectedResults: The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */        /*      @testcaseID a0B20000006eCUsEAM      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create new bookmark      @userstory a0790000000DEd1      @expectedResults:The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */        /*      @testcaseID a0B20000006eCV3EAM      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Create new bookmark      @userstory a0790000000DEd1      @expectedResults: The user is able to save. The bookmark shows under the Bookmarks section on the left sidebar panel, after the Recent Items list    */    testMethod static void testCreatingBookmark() {    	System.runAs(user) {	    	ADM_BookmarksExtension ext = new ADM_BookmarksExtension();	    	ext.newBookmark.Title__c = bookmarkTitle;	    	ext.newBookmark.URL__c = bookmarkUrl;	        Integer numBookmarksThen = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	    	ext.save();	        Integer numBookmarksNow = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	        System.assert(numBookmarksNow > numBookmarksThen,'I do not have more bookmarks then before!');    	}    }   /*      @testcaseID a0B20000006eCVBEA2      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Delete bookmark      @userstory a0790000000DEd1      @expectedResults: Message displayed: "Are you sure you want to delete this link?" User is able to delete bookmark    */          /*      @testcaseID a0B20000007kbW7EAI      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Delete bookmark      @userstory a0790000000DEd1      @expectedResults: User is not allowed to delete bookmark created by another user    */    testMethod static void testDeletingBookmark() {    	System.runAs(user) {	    	ADM_Bookmark__c bookmarkFactory = bookmark;	        Integer numBookmarksThen = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	        System.assert(numBookmarksThen == 1);	        ADM_BookmarksExtension ext = new ADM_BookmarksExtension();	        System.assert(ext.bookmarks.size() == numBookmarksThen);	        ext.bookmarkId = bookmarkFactory.Id;	        ext.deleteBookmark();	        Integer numBookmarksNow = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	        System.assert(numBookmarksNow < numBookmarksThen,'I have more bookmarks then before! now' + numBookmarksNow + ' then' + numBookmarksThen);	        System.assert(ext.rowEnd == 1,'my row end is not right! # of bookmarks->' + numBookmarksNow + ' ext.rowEnd->' + ext.rowEnd);	        System.assert(ext.rowStart == 1);    	}    }   /*      @testcaseID a1DB00000000TP0      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Access next page of bookmarks      @userstory a0790000000DEd1      @expectedResults: User is able to see the list of bookmarks after clicking next    */      /*      @testcaseID a1DB00000000VC2      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Access next page of bookmarks in IE      @userstory a0790000000DEd1      @expectedResults: User is able to see the list of bookmarks after clicking next    */      /*      @testcaseID a1DB00000000TP1      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Access next page of bookmarks      @userstory a0790000000DEd1      @expectedResults:User is able to see the previous list of bookmarks after clicking Previous    */      /*      @testcaseID a1DB00000000VC3      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Access previous page of bookmarks in IE      @userstory a0790000000DEd1      @expectedResults: User is able to see the previous list of bookmarks after clicking Previous    */    testMethod static void testPaginThroughBookmarks() {    	System.runAs(user) {	    	for(Integer i = 0; i < 101; i++) {	    		ADM_Bookmark__c clone = bookmark.clone(false,false);	    		bookmarks.add(clone);	    	}	    	upsert bookmarks;	        ADM_BookmarksExtension ext = new ADM_BookmarksExtension();	        Integer numBookmarksNow = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	        System.assert(ext.rowEnd == 5,'my row end is not right!');    	}    }              /*      @testcaseID a1DB00000000yWu      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Delete bookmark      @userstory a07B0000000ETlG      @expectedResults: Deleted Bookmark should not show on page and page should not gack    */    testMethod static void testDeletingBookmarkAlreadyDeleted() {    	System.runAs(user) {	    	ADM_Bookmark__c bookmarkFactory = bookmark;	        Integer numBookmarksThen = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	        System.assert(numBookmarksThen == 1);	        ADM_BookmarksExtension ext = new ADM_BookmarksExtension();	        System.assert(ext.bookmarks.size() == numBookmarksThen);	        ext.bookmarkId = bookmarkFactory.Id;	        delete bookmarkFactory;	        ext.deleteBookmark();	        Integer numBookmarksNow = [select count() from ADM_Bookmark__c where CreatedById =: Userinfo.getUserId()];	        System.assert(numBookmarksNow < numBookmarksThen,'I have more bookmarks then before! now' + numBookmarksNow + ' then' + numBookmarksThen);	        System.assert(ext.rowEnd == 1,'my row end is not right! # of bookmarks->' + numBookmarksNow + ' ext.rowEnd->' + ext.rowEnd);	        System.assert(ext.rowStart == 1);    	}    }          /*      @testcaseID a1DB00000000yX9      @hierarchy GUS.ScrumforceToGUS.Bookmarks.Delete bookmark      @userstory a07B0000000ETlG      @expectedResults: Deleted Bookmark should not show on page and page should not gack    */    testMethod static void testSavingAfterDeleting() {    	System.runAs(user) {	    	ADM_Bookmark__c bookmarkFactory = bookmark;	        ADM_BookmarksExtension ext = new ADM_BookmarksExtension();	        ext.bookmarkId = bookmarkFactory.Id;	        delete bookmarkFactory;	    	ext.newBookmark.Title__c = bookmarkTitle;	    	ext.newBookmark.URL__c = bookmarkUrl;	        ext.save();    	}    }}