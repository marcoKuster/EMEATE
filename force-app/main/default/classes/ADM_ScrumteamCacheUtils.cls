public with sharing class ADM_ScrumteamCacheUtils {        /**     * Tries to create and insert "new" team caches for the specified teams. If the cache for a scrum team is not      * created and inserted successfully it will not be found in the returned list.     */    public static List<ADM_Scrum_Team_Cache__c> createAndInsertNewTeamCaches(ADM_Scrum_Team__c[] teams) {        return createAndInsertTeamCaches(teams, true, false);    }        /**     * Tries to create and insert "delete" team caches for the specified teams. If the cache for a scrum team is not      * created and inserted successfully it will not be found in the returned list.     */    public static List<ADM_Scrum_Team_Cache__c> createAndInsertDeleteTeamCaches(ADM_Scrum_Team__c[] teams) {        return createAndInsertTeamCaches(teams, false, true);    }        public static List<ADM_Scrum_Team_Cache__c> getTeamMemberCaches(ADM_Scrum_Team_Member__c[] members, Boolean isInsert, Boolean isDelete) {        List<ADM_Scrum_Team_Cache__c> scrumteamMemberCaches = new List<ADM_Scrum_Team_Cache__c>();                List<System.Exception> exceptions = new List<System.Exception>();        for(ADM_Scrum_Team_Member__c member : members) {        	try {	        	ADM_Scrum_Team_Cache__c memberCache = new ADM_Scrum_Team_Cache__c();	        	memberCache.Name__c = member.Member_Name__c;	        	memberCache.ScrumteamOrScrumteamMember__c = member.Id;	            memberCache.Inserted__c = isInsert;	            memberCache.Deleted__c = isDelete;	            memberCache.Type__c = 'GroupMember';	            memberCache.Group_ID__c = member.Group_ID__c;	            scrumteamMemberCaches.add(memberCache);        	} catch(Exception exc) {        		exceptions.add(exc);        	}        }                ADM_ExceptionHandler.saveExceptions(exceptions, 'Occurred while creating team cache objects');                return scrumteamMemberCaches;    }        public static List<Id> pluckId(List<ADM_Scrum_Team_Cache__c> caches) {        List<String> scrumteamCacheIds = new List<String>();        for(ADM_Scrum_Team_Cache__c cache : caches) {            scrumteamCacheIds.add(cache.Id);        }        return scrumteamCacheIds;    }        public static List<String> idsFromScrumTeamField(List<ADM_Scrum_Team_Cache__c> caches) {        List<String> ids = new List<String>();                if(!caches.isEmpty()) {            for(ADM_Scrum_Team_Cache__c cache : caches) {                ids.add(cache.ScrumteamOrScrumteamMember__c);            }        }                return ids;    }        public static List<String> userIdFromScrumTeamField(List<ADM_Scrum_Team_Cache__c> caches) {    	List<String> ids = new List<String>();    	    	if(!caches.isEmpty()) {    		for(ADM_Scrum_Team_Cache__c cache : caches) {    			if(cache != null && cache.Name__c != null && !cache.Name__c.toLowerCase().endsWith('scrum team')) ids.add(cache.Name__c);    		}    	}    	    	return ids;    }        private static List<ADM_Scrum_Team_Cache__c> createAndInsertTeamCaches(ADM_Scrum_Team__c[] teams, Boolean isInsert, Boolean isDelete) {        List<ADM_Scrum_Team_Cache__c> scrumteamCaches = new List<ADM_Scrum_Team_Cache__c>();                for(ADM_Scrum_Team__c team : teams) {            ADM_Scrum_Team_Cache__c teamCache = new ADM_Scrum_Team_Cache__c();            teamCache.Name__c = team.Name + ' Scrum Team';            teamCache.ScrumteamOrScrumteamMember__c = team.Id;            teamCache.Inserted__c = isInsert;            teamCache.Deleted__c = isDelete;            teamCache.Group_ID__c = team.Team_Email_Group_ID__c;            scrumteamCaches.add(teamCache);        }                Database.Saveresult[] results = Database.insert(scrumteamCaches, false);                //process each of the save results, only returning the successfully saved teams to the caller        List<Database.SaveResult> failedSaveResults = new List<Database.SaveResult>();        List<ADM_Scrum_Team_Cache__c> successfulTeams = new List<ADM_Scrum_Team_Cache__c>();        for(Integer index = 0; index < results.size(); index++) {            Database.Saveresult result = results.get(index);            if(result.isSuccess()) {            	 successfulTeams.add(scrumteamCaches.get(index));            } else {                System.debug('an error occurred: ' + result.getErrors());                failedSaveResults.add(result);            }        }        ADM_ExceptionHandler.saveExceptions(failedSaveResults, null, 'Failed to save ADM_Scrum_Team_Cache__c objects', null,true);                return successfulTeams;    }}