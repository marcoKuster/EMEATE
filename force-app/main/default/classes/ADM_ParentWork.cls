/* * Copyright, 2008, SALESFORCE.com* All Rights Reserved* Company Confidential** Provides a wrapper around CRUD functionality for ADM_ParentWork records, grouping them in a central location */public class ADM_ParentWork {    public static ADM_Parent_Work__c[] get(String id){        ADM_Parent_Work__c[] parents;               parents = [select id, parent_work__c, parent_work__r.recordTypeId, child_work__c, Duplicate__c from ADM_Parent_Work__c where child_work__c =: id and child_work__c != null];               return parents;                  }        public static ADM_Parent_Work__c[] getChildren(String id){        ADM_Parent_Work__c[] children;               children = [select id, parent_work__c, parent_work__r.recordTypeId, child_work__c, child_work__r.recordTypeId, Duplicate__c from ADM_Parent_Work__c where parent_work__c =: id and child_work__c != null];               return children;                  }        public static void evaluateWorkRelationships(List<ADM_Work__c> works) {    	List<ADM_Work__c> worksP = new List<ADM_Work__c>();    	List<ADM_Work__c> worksC = new List<ADM_Work__c>();    	    	for(ADM_Work__c work : works) {	    	//if the work item is not a template and the Parent ID is populated then create a parent releationship	        if(!work.is_Template__c) {	            if(work.Parent_ID__c != null || work.Child_ID__c != null) {                                           	                //create Parent relationship based on Parent ID (populated when a template is created)	                if (work.Parent_ID__c != null) worksP.add(work);                     	                //create Child releationship based on Child ID (populated when the related list new button is pressed)	                if (work.Child_ID__c != null) worksC.add(work); 	            }                   	        }    	}    	//create the relationships in bulk    	ADM_ParentWork.createParentWork(worksP);    	ADM_ParentWork.createChildWork(worksC);     	//remove parent & child work IDs after addition - combine lists to clean up in one batch    	worksP.addAll(worksC);	    ADM_ParentWork.cleanUpParentChildWork(worksP);               }        public static void createParentWork(ADM_Work__c work) {        List<ADM_Work__c> works = new List<ADM_Work__c>{work};        ADM_ParentWork.createParentWork(works);    }        public static void createParentWork(List<ADM_Work__c> works) {    	List<ADM_Parent_Work__c> parents = new List<ADM_Parent_Work__c>();    	for(ADM_Work__c work : works) {	    	List<ADM_Work__c> validatedWorkItems = validateWorkItems(trimWorkItems(splitWorkItems(work.Parent_ID__c)));	        //for each valid parent work ID entered check if a relationship already exists and if it doesn't create one 	        for( ADM_Work__c validPWork : validatedWorkItems ){	            //if it doesn't exist then insert relationship	            List<ADM_Parent_Work__c> existingParentList = [select id from ADM_Parent_Work__c where Child_Work__c = :work.id and Parent_Work__c = :validPWork.id];	            if(existingParentList.size() == 0) {	                ADM_Parent_Work__c parent = new ADM_Parent_Work__c(Child_Work__c = work.Id, Parent_Work__c = validPWork.Id); 	             	parents.add(parent); 	            }	        }    	}    	Database.insert(parents);        }        public static void createChildWork(ADM_Work__c work) {    	List<ADM_Work__c> works = new List<ADM_Work__c>{work};        ADM_ParentWork.createChildWork(works);    }        public static void createChildWork(List<ADM_Work__c> works) {    	List<ADM_Parent_Work__c> children = new List<ADM_Parent_Work__c>();    	for(ADM_Work__c work : works) {	    	List<ADM_Work__c> validatedWorkItems = validateWorkItems(trimWorkItems(splitWorkItems(work.Child_ID__c)));	        //for each valid child work ID entered check if a relationship already exists and if it doesn't create one 	        for( ADM_Work__c validCWork : validatedWorkItems ){	            	            if(!ADM_WorkTreeUtils.childExists(work.id, validCWork.id)) {	            	//work item is not already a child	            	ADM_Parent_Work__c child = new ADM_Parent_Work__c(Child_Work__c = validCWork.id, Parent_Work__c = work.id); 	                //Database.SaveResult sr = ADM_ParentWork.add(child); 	                children.add(child);	            }	        }    	}    	Database.insert(children);        }        testMethod static void testCreateChildWork() {    	List<ADM_Work__c> validWork = new List<ADM_Work__c>();         validWork.add([select id, Name from ADM_Work__c where id = : ADM_Work.createTestWork().id]);               ADM_Work__c work = ADM_Work.createTestWork();        work.Number_of_Cases__c = 0;        work.Child_ID__c = validWork[0].Name;                createChildWork(work);        //verify that three parent relationships were created        List<ADM_Parent_Work__c> children = [select id from ADM_Parent_Work__c where Parent_Work__c = :work.id and Child_Work__c in :validWork];        System.assertEquals(validWork.size(), children.size(), 'Child Work not created properly');                //verify getChildren() method of retrieval         List<ADM_Parent_Work__c> children2  = ADM_ParentWork.getChildren(work.id);                System.assertEquals(children.size(), children2.size());    }    	            testMethod static void testCreateParentWork() {        List<ADM_Work__c> validWork = ADM_Work.createListOfWork(4, 'Bug');                insert validWork;                //retrieve the WOrk IDs                validWork = [select id, Name from ADM_Work__c where id in: validWork];                ADM_Work__c work = ADM_Work.createTestWork('Bug');         work.Parent_ID__c = validWork[0].Name + ', ' + validWork[1].Name + ', ' + validWork[2].Name;        createParentWork(work);        //verify that three parent relationships were created        List<ADM_Parent_Work__c> parents = [select id from ADM_Parent_Work__c where Child_Work__c = :work.id and Parent_Work__c in :validWork];        System.assertEquals(3, parents.size(), 'Parent Work not created properly. work:' + work + ' valid work:' + validWork);                //verify get() method of retrieval of Parent work        List<ADM_Parent_Work__c> parents2  = ADM_ParentWork.get(work.id);                System.assertEquals(parents.size(), parents2.size());    }        public static String[] splitWorkItems(String workIDs) {        //create pattern to split up list of Parent Work IDs        Pattern p = Pattern.compile(';|,');        String[] arrParentWorkIds;        //split on delimiters        arrParentWorkIds = p.split(workIDs);        return arrParentWorkIds;    }        testMethod static void testSplitWorkItems() {        ADM_Work__c work = new ADM_Work__c();        work.Number_of_Cases__c = 0;        String commaTest = 'W-000001, W-000002, W-000003';        String semicolonTest = 'W-000001; W-000002; W-000003';              //comma        work.Parent_ID__C = commaTest;        String[] results = splitWorkItems(work.Parent_ID__c);        System.assertEquals(3, results.size(), 'Comma Test (' + commaTest + ') failed');        //semi-colon        work.Parent_ID__C = semicolonTest;        results = splitWorkItems(work.Parent_ID__c);        System.assertEquals(3, results.size(), 'Semi-colon Test (' + semicolonTest + ') failed');    }               public static List<String> trimWorkItems(String[] arrParentWorkIds) {        List<String> foundValues = new List<String>();              //trim white space and convert to SOQL IN CLAUSE compatible List                    for( String s : arrParentWorkIds ){                foundValues.add(s.trim());        }        return foundValues;         }        testMethod static void testTrimWorkItems() {        String[] workItems = new String[4];        workItems[0] = '     W-000001     '; //leading and trailing white space        workItems[1] = 'W-000002 ';//trailing white space        workItems[2] = ' W-000003';//leadning white space        workItems[3] = 'W-000003';//no white space         List<String> trimmedItems = trimWorkItems(workItems);        for(String s: trimmedItems) {            //test length of string            System.assertEquals(8, s.length(), 'String length should have had leading and trailing white space trimed');        }           }           public static List<ADM_Work__c> validateWorkItems(List<String> workItems) {        //validate workIDs to ensure they exist        List<ADM_Work__c> validatedWorkList = [select id, Name, RecordType.Name from ADM_Work__c where Name in :workItems];        return validatedWorkList;    }        testMethod static void testValidateWorkItems() {        List<String> testWork = new List<String>();        //build list of valid work items        //List<ADM_Work__c> validWork = [select Name from ADM_Work__c limit 2];        List<ADM_Work__c> validWork = new List<ADM_Work__c>(); //[select Name from ADM_Work__c limit 3];        validWork.add([select id, Name from ADM_Work__c where id = : ADM_Work.createTestWork().id]);        validWork.add([select id, Name from ADM_Work__c where id = : ADM_Work.createTestWork().id]);                for(ADM_Work__c work: validWork) {            testWork.add(work.Name);        }        //add an invalid Work ID to mix        testWork.add('abc123');        System.assertEquals(validWork.size(), validateWorkItems(testWork).size(), 'Invalid work item was not removed');     }                   public static Database.SaveResult add(ADM_Parent_Work__c parent) {              Database.SaveResult sr = Database.insert(parent);                       return sr;    }        testMethod static void testAdd() {        //List<ADM_Work__c> validWork = [select Name from ADM_Work__c limit 2];        List<ADM_Work__c> validWork = new List<ADM_Work__c>(); //[select Name from ADM_Work__c limit 3];        validWork.add(ADM_Work.createTestWork());        validWork.add(ADM_Work.createTestWork());                ADM_Parent_Work__c parent = new ADM_Parent_Work__c(Child_Work__c = validWork[0].Id, Parent_Work__c = validWork[1].Id);         Database.SaveResult sr = add(parent);               //assert no errrors occured             System.assert(sr.getErrors().size() == 0);    }        public static Database.SaveResult modify(ADM_Parent_Work__c parent) {               Database.SaveResult sr = Database.update(parent);                       return sr;    }        testMethod static void testModify() {        //add a record to test with        List<ADM_Work__c> validWork = new List<ADM_Work__c>(); //[select Name from ADM_Work__c limit 3];        validWork.add(ADM_Work.createTestWork());        validWork.add(ADM_Work.createTestWork());        validWork.add(ADM_Work.createTestWork());        ADM_Parent_Work__c parent = new ADM_Parent_Work__c(Child_Work__c = validWork[0].Id, Parent_Work__c = validWork[1].Id);         Database.insert(parent);        //change the record        parent.Child_Work__c = validWork[2].Id;         ADM_ParentWork.modify(parent);              //assert the modification was made          ADM_Parent_Work__c modifiedParent = [select Child_Work__c from ADM_Parent_Work__c where id = :parent.id];           System.assertEquals(parent.Child_Work__c, modifiedParent.Child_Work__c, 'ADM_Parent_Work__c (id:' + parent.id + ') should have been modified');    }        public static Database.DeleteResult remove(ADM_Parent_Work__c parent) {             Database.DeleteResult dr = Database.delete(parent);                     return dr;    }        testMethod static void testRemove() {            //setup record to test with            //List<ADM_Work__c> validWork = [select Name from ADM_Work__c limit 2];            List<ADM_Work__c> validWork = new List<ADM_Work__c>(); //[select Name from ADM_Work__c limit 3];        	validWork.add(ADM_Work.createTestWork());        	validWork.add(ADM_Work.createTestWork());                    ADM_Parent_Work__c parent = new ADM_Parent_Work__c(Child_Work__c = validWork[0].Id, Parent_Work__c = validWork[1].Id);             Database.insert(parent);            //remove            remove(parent);            System.assertEquals(0, [select count() from ADM_Parent_Work__c where id = :parent.id], 'ADM_Parent_Work (id:' + parent.id + ') should have been removed');    }           public static void cleanUpParentChildWork(List<ADM_Work__c> works) {        //here we have to retrieve the work objects from the DB again as post trigger copy is read only                            List<ADM_Work__c> works2 = new List<ADM_Work__c>();        for(ADM_Work__c work : works) {        	ADM_Work__c work2 = [select id from ADM_Work__c where id = :work.id];        	//remove parent IDs - these are maintained in the Work objects related list        	work2.Parent_ID__c = null;	        work2.Child_ID__c = null;	        //turn on ignorable flag as many items in work trigger don't apply	        work2.Is_Ignorable__c = true;	                	        	        works2.add(work2);        }        Database.update(works2);    }        testMethod static void testCleanUpParentWork() {                List<ADM_Work__c> validWork = new List<ADM_Work__c>(); //[select Name from ADM_Work__c limit 3];         List<ADM_Work__c> listOfWorks =  new List<ADM_Work__c>();         ADM_Work__c work1 = ADM_Work.setUpTestWork(ADM_Work.BUG_RECORD_TYPE_NAME);         listOfWorks.add(work1);         ADM_Work__c work = ADM_Work.setUpTestWork(ADM_Work.BUG_RECORD_TYPE_NAME);                 listOfWorks.add(work);         insert listOfWorks;         validWork.add(work1);                       work.Parent_ID__c = validWork[0].Name;        Database.SaveResult sr = Database.update(work);                 //assert no errrors occured during setup                System.assert(sr.getErrors().size() == 0);               ADM_ParentWork.cleanUpParentChildWork(new List<ADM_Work__c>{work});        //test that the work item has had its parentID removed        ADM_Work__c work2 = [select id, Parent_ID__c from ADM_Work__c where id = :work.id];        System.assertEquals(null, work2.Parent_ID__c, 'Parent ID is still populated');                  }        public static List<ADM_Parent_Work__c> getParentWorkByChildWithLimit(Integer customLimit, Id childID) {        if (customLimit != -1) {            return [select Id, Parent_Work__r.Assignee__c, Parent_Work__r.Subject__c, Parent_Work__r.Status__c, Parent_Work__r.Type__c, Parent_Work__r.Priority__c, Parent_Work__r.Scheduled_Build__c, Parent_Work__r.Resolved__c, Parent_Work__r.Closed__c, Parent_Work__c, Duplicate__c from ADM_Parent_Work__c where Child_Work__c = :childID and Parent_Work__c != null LIMIT :customLimit];         } else {            return [select Id, Parent_Work__r.Assignee__c, Parent_Work__r.Subject__c, Parent_Work__r.Status__c, Parent_Work__r.Type__c, Parent_Work__r.Priority__c, Parent_Work__r.Scheduled_Build__c, Parent_Work__r.Resolved__c, Parent_Work__r.Closed__c, Parent_Work__c, Duplicate__c from ADM_Parent_Work__c where Child_Work__c = :childID and Parent_Work__c != null];            }       }        testMethod static void testGetParentWorkByChildWithLimit() {        Id childID = parentWorkTestSetupParents(2);        //retrieve records and assert limit has been enforced            List<ADM_Parent_Work__c> parents = getParentWorkByChildWithLimit(1, childID);        System.assertEquals(1, parents.size(), 'Created 2 parents and was supposed to enforce limit of 1.');        //check that all records are returned if limit is higher then list contents        parents = getParentWorkByChildWithLimit(50, childID);        System.assertEquals(2, parents.size(), 'Created 2 parents and requested arbitary high limit of 50 so all 3 parents should be returned');          }           public static Integer getParentWorkCount(Id childID) {        return [select count() from ADM_Parent_Work__c where Child_Work__c = :childID and Parent_Work__c != null];     }         testMethod static void testGetParentWorkCount() {        Id childID = parentWorkTestSetupParents(2);        System.assertEquals(2, getParentWorkCount(childID), 'Created 2 parents but count did not match');    }        //test case helper method to create a number of parents related to the same ChildID which is returned    public static Id parentWorkTestSetupParents(Integer numOfNewRecords) {                List<ADM_Work__c> validWork = new List<ADM_Work__c>();        for (Integer i=0; i <= numOfNewRecords; i++) {        	validWork.add(ADM_Work.createTestWork());        }	        ADM_Parent_Work__c link;                //set i to 1 as first object is reserved for the child ID        Integer i = 1;        while(i <= numOfNewRecords) {            link = new ADM_Parent_Work__c();            link.Child_Work__c = validWork[0].id;            link.Parent_Work__c = validWork[i].id;            Database.insert(link);            i++;        }           //return the childID        return validWork[0].id;    }                   }