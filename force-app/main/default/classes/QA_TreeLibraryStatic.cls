public with sharing class QA_TreeLibraryStatic {    /**    * Private container class to store the status of the TEs query and HTML generation since we had to hardcode    * the queries in case a tree has more than 200 TEs.    **/    private class ProcessTEStatus{        public String lastStatus;        public String lastAssignee;        public String lastHierarchy;        public String curStatusBranch;        public String curUserBranch;        public String html;        public Boolean ifFirst;        public String lastUserStory;        public String currUserStoryBranch;        public String currHierarchyBranch;        public ProcessTEStatus(){            lastStatus = '';            lastAssignee = '';            lastHierarchy = '';            curStatusBranch = '';            curUserBranch = '';            html = '';            ifFirst = true;            lastUserStory = '';            currUserStoryBranch = '';            currHierarchyBranch = '';        }    }    /**    * Generates the HTML for the message box above the tree.    **/    public static String generateMessageBox(Integer status, String message){        String iconName;        if(status == 1) iconName = 'confirm24';        else if(status == 2) iconName = 'warning24';        else if(status == 3) iconName = 'error24';        else iconName = 'info24';        String html = '<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';        html += '<tr><td>';        html += '<table width=\"100%\" bgcolor=\"#F2F2F2\" cellpadding=\"4\" cellspacing=\"0\" class=\"textRegular borderLeftDark borderRightDark borderTopDark borderBottomDark\">';        html += '<tr>';        html += '<td width=\"24px\"><img src=\"/img/msg_icons/' + iconName + '.gif\" /></td>';        html += '<td style=\"vertical-align: middle; text-align: left\">' + message + '</td>';        html += '</tr>';        html += '</table>';        html += '</td></tr>';        html += '<tr><td height=\"4px\"></td></tr>';        html += '</table>';        return html;    }    /**    * Helper function for getBaseTETree, processes a single TE and builds the HTML for that TE. Had to be seperated out because the SOQL queries had to be hardcoded to overcome query limits.    **/    private static void processTE(QA_Test_Execution__c curTE, ProcessTEStatus teStatus, Boolean showAddTCBtn, Schema.SObjectType sobjectType){	    if(sobjectType == QA_Test_Plan__c.getSObjectType()){	    	if(teStatus.ifFirst){	    		teStatus.lastUserStory = curTE.User_Story__r.Subject__c;	    		teStatus.lastAssignee = curTE.Assignee__r.Name;	    		teStatus.lastHierarchy = curTE.Test_Case__r.Hierarchy__c;	            teStatus.lastStatus = curTE.Status__c;	            teStatus.ifFirst = false;	        }	        if (!teStatus.lastUserStory.equals(curTE.User_Story__r.Subject__c)){	        	teStatus.currHierarchyBranch += generateBranch(teStatus.lastStatus, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.' + teStatus.lastStatus, '', false, false, false, showAddTCBtn);				teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.', teStatus.currHierarchyBranch, true, true, false, showAddTCBtn);	            teStatus.currUserStoryBranch += generateBranch(teStatus.lastAssignee, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.', teStatus.curUserBranch, true, true, false, showAddTCBtn);	            teStatus.html += generateBranch(teStatus.lastUserStory, teStatus.lastUserStory + '~', teStatus.currUserStoryBranch, true, true, false, showAddTCBtn);		        teStatus.currHierarchyBranch = '';	            teStatus.curUserBranch = '';	            teStatus.currUserStoryBranch = '';	        }	        else if(!teStatus.lastAssignee.equals(curTE.Assignee__r.Name)){	        	teStatus.currHierarchyBranch += generateBranch(teStatus.lastStatus, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.' + teStatus.lastStatus, '', false, false, false, showAddTCBtn);				teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.', teStatus.currHierarchyBranch, true, true, false, showAddTCBtn);	            teStatus.currUserStoryBranch += generateBranch(teStatus.lastAssignee, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.', teStatus.curUserBranch, true, true, false, showAddTCBtn);	            teStatus.currHierarchyBranch = '';	            teStatus.curUserBranch = '';	        }	        else if(!teStatus.lastHierarchy.equals(curTE.Test_Case__r.Hierarchy__c)){	        	teStatus.currHierarchyBranch += generateBranch(teStatus.lastStatus, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.' + teStatus.lastStatus, '', false, false, false, showAddTCBtn);				teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.', teStatus.currHierarchyBranch, true, true, false, showAddTCBtn);	            teStatus.currHierarchyBranch = '';	        }	        else if(!teStatus.lastStatus.equals(curTE.Status__c)){	        	teStatus.currHierarchyBranch += generateBranch(teStatus.lastStatus, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.' + teStatus.lastStatus, '', false, false, false, showAddTCBtn);			}	        if (curTE.User_Story__r.Subject__c != null) teStatus.lastUserStory = curTE.User_Story__r.Subject__c;	        if (curTE.Test_Case__r.Hierarchy__c != null) teStatus.lastAssignee = curTE.Assignee__r.Name;	        if (curTE.Assignee__r.Name != null) teStatus.lastHierarchy = curTE.Test_Case__r.Hierarchy__c;	        if (curTE.Status__c != null)  teStatus.lastStatus = curTE.Status__c;	    }	    else{	    	if(teStatus.ifFirst){	            teStatus.lastStatus = curTE.Status__c;	            teStatus.lastAssignee = curTE.Assignee__r.Name;	            teStatus.lastHierarchy = curTE.Test_Case__r.Hierarchy__c;	            teStatus.ifFirst = false;	        }	        if (!teStatus.lastStatus.equals(curTE.Status__c)){	            teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy, '', false, false, false, showAddTCBtn);	            teStatus.curStatusBranch += generateBranch(teStatus.lastAssignee, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~', teStatus.curUserBranch, true, true, false, showAddTCBtn);	            teStatus.html += generateBranch(teStatus.lastStatus, teStatus.lastStatus + '~', teStatus.curStatusBranch, true, true, false, showAddTCBtn);	            teStatus.curUserBranch = '';	            teStatus.curStatusBranch = '';	        } else if (!teStatus.lastAssignee.equals(curTE.Assignee__r.Name)){	            teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy, '', false, false, false, showAddTCBtn);	            teStatus.curStatusBranch += generateBranch(teStatus.lastAssignee, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~', teStatus.curUserBranch, true, true, false, showAddTCBtn);	            teStatus.curUserBranch = '';	        } else if (!teStatus.lastHierarchy.equalsIgnoreCase(curTE.Test_Case__r.Hierarchy__c)){	            teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy, '', false, false, false, showAddTCBtn);	        }	        if (curTE.Status__c != null) teStatus.lastAssignee = curTE.Assignee__r.Name;	        if (curTE.Assignee__r.Name != null) teStatus.lastStatus = curTE.Status__c;	        if (curTE.Test_Case__r.Hierarchy__c != null) teStatus.lastHierarchy = curTE.Test_Case__r.Hierarchy__c;	    }    }    /**    * Generates the HTML for TE tree.    **/    public static String getBaseTETree(Schema.SObjectType sobjectType, Integer uiWidth, String statusFilterStr, String relatedToFilterStr, String executionTypeFilterStr, String id, Boolean showAddTCBtn){        ProcessTEStatus teStatus = new ProcessTEStatus();        teStatus.html = '<table width=\"' + uiWidth + '\" bgcolor=\"#F2F2F2\" id=\"All.table\" cellpadding=\"0\" cellspacing=\"0\" class=\"textRegular borderLeftDark borderRightDark borderTopDark borderBottomDark\"><tbody><tr><td><div id=\"All.div\">';        //see if any filters are used        Boolean statusFilter = !statusFilterStr.equals('All');        Boolean relatedToFilter = !relatedToFilterStr.equals('All');        Boolean executionTypeFilter = !executionTypeFilterStr.equals('All');        //have to do the queries the hard way since dynamic soql queries only support a max of 200 objects        if(sobjectType == ADM_Sprint__c.getSObjectType()){            if(statusFilter && relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr  AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter && relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                 AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);        }else if(sobjectType == QA_Test_Plan__c.getSObjectType()){            if(statusFilter && relatedToFilter && executionTypeFilter)                 for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                AND Status__c = :statusFilterStr  AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter)                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                AND Status__c = :statusFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter && relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                AND Status__c = :statusFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                AND Status__c = :statusFilterStr AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null AND User_Story__r.Subject__c != null                                                 AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else                for(QA_Test_Execution__c curTE : [SELECT User_Story__c, User_Story__r.Subject__c, Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id AND Status__c != null AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null  AND User_Story__r.Subject__c != null                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);        }else if(sobjectType == ADM_Work__c.getSObjectType()){            if(statusFilter && relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr  AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter && relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(statusFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                AND Status__c = :statusFilterStr AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else if(relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                 AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);            else                for(QA_Test_Execution__c curTE : [SELECT Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id AND Status__c != null AND Test_Case__r.Hierarchy__c != null AND Assignee__r.Name != null                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    processTE(curTE, teStatus, showAddTCBtn, sobjectType);        }else{            return 'Tree not initialized. Incorrect Standard Controller.';        }        if(sobjectType == QA_Test_Plan__c.getSObjectType() && !teStatus.lastUserStory.equals('')){    		teStatus.currHierarchyBranch += generateBranch(teStatus.lastStatus, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.' + teStatus.lastStatus, '', false, false, false, showAddTCBtn);			teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy + '~.', teStatus.currHierarchyBranch, true, true, false, showAddTCBtn);            teStatus.currUserStoryBranch += generateBranch(teStatus.lastAssignee, teStatus.lastUserStory + '~.' + teStatus.lastAssignee + '~.', teStatus.curUserBranch, true, true, false, showAddTCBtn);            teStatus.html += generateBranch(teStatus.lastUserStory, teStatus.lastUserStory + '~', teStatus.currUserStoryBranch, true, true, false, showAddTCBtn);        	teStatus.html += '</div></td></tr>';            teStatus.html += '</tbody></table>';        }        else if(!(sobjectType == QA_Test_Plan__c.getSObjectType()) && !teStatus.lastStatus.equals('')){            //finish up and return the generated HTML            teStatus.curUserBranch += generateBranch(teStatus.lastHierarchy, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~.' + teStatus.lastHierarchy, '', false, false, false, showAddTCBtn);            teStatus.curStatusBranch += generateBranch(teStatus.lastAssignee, teStatus.lastStatus + '~.' + teStatus.lastAssignee + '~', teStatus.curUserBranch, true, true, false, showAddTCBtn);            teStatus.html += generateBranch(teStatus.lastStatus, teStatus.lastStatus + '~', teStatus.curStatusBranch, true, true, false, showAddTCBtn);            teStatus.html += '</div></td></tr>';            teStatus.html += '</tbody></table>';        }else{            return 'No Test Executions found.';        }        return teStatus.html;    }    /**    * Generate a branch for a TC hierarchy and store it in this.tree.curBranch.    **/    public static void loadTEBranch(Schema.SObjectType sobjectType, String statusFilterStr, String relatedToFilterStr, String executionTypeFilterStr, String id, List<String> curBranch, List<String> pathArr, String retUrl){        //see if any filters are used        Boolean statusFilter = !statusFilterStr.equals('All');        Boolean relatedToFilter = !relatedToFilterStr.equals('All');        Boolean executionTypeFilter = !executionTypeFilterStr.equals('All');        //have to do the queries the hard way since dynamic soql queries only support a max of 200 objects        if(sobjectType == ADM_Sprint__c.getSObjectType()){            if(statusFilter && relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr  AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(statusFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(statusFilter && relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(statusFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                 AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Sprint__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));        }        else if(sobjectType == ADM_Work__c.getSObjectType()){            if(statusFilter && relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr  AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(statusFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(statusFilter && relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(statusFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                AND Status__c = :statusFilterStr AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else if(relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                 AND Type__c = :executionTypeFilterStr                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));            else                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Id = :id                                                AND Status__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2]                                                ORDER BY Status__c, Assignee__r.Name, Test_Case__r.Hierarchy__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2], curTE.Id, pathArr[0], retUrl));        }        else if(sobjectType == QA_Test_Plan__c.getSObjectType()){            if(statusFilter && relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                AND Status__c = :statusFilterStr  AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else if(statusFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                AND Status__c = :statusFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else if(relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else if(executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else if(statusFilter && relatedToFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                AND Status__c = :statusFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else if(statusFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                AND Status__c = :statusFilterStr AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else if(relatedToFilter && executionTypeFilter)                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                 AND Type__c = :executionTypeFilterStr                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));            else                for(QA_Test_Execution__c curTE : [SELECT Test_Case__r.Brief_Description__c, Id FROM QA_Test_Execution__c                                                WHERE User_Story__r.Test_Plan__r.Id = :id                                                AND User_Story__r.Subject__c = :pathArr[0] AND Assignee__r.Name = :pathArr[1] AND Test_Case__r.Hierarchy__c = :pathArr[2] AND Status__c = :pathArr[3]                                                ORDER BY User_Story__r.Subject__c, Assignee__r.Name, Test_Case__r.Hierarchy__c, Status__c])                    curBranch.add(generateTestExecution(curTE.Test_Case__r.Brief_Description__c, pathArr[0] + '~.' + pathArr[1] + '~.' + pathArr[2] + '~.' + pathArr[3], curTE.Id, pathArr[0], retUrl));        }    }    /**    * Generates the HTML for a branch in the tree.    **/    public static String generateBranch(String name, String path, String content, Boolean ifOpen, Boolean ifLoaded, Boolean ifEscaped, Boolean showAddTCBtn){        //encode both the name and the path so characters do not impact the generated HTML        String nameE = EncodingUtil.urlEncode(name, 'UTF-8');        String pathE = EncodingUtil.urlEncode(path, 'UTF-8');        //depending on which flags, the default values and appearance are set        String ifOpenStr = ifOpen ? '' : 'none';        String arrowSrc = ifOpen ? 'twistySubhDown' : 'twistySubhRight';        String ifLoadedStr = ifLoaded ? 'true' : 'false';        //generate the HTML depending on if escaped        String html;        if(ifEscaped){            html = '<div id=\\"' + pathE + '.div\\">';            html += '<table cellpadding=\\"0\\" cellspacing=\\"0\\" class=\\"textRegular sizeFill\\"><tbody>';            html += '<tr id=\\"' + pathE + '.highlight\\" height=\\"22\\" onmouseover=\\"toggleHighlight(\'' + pathE + '\')\\" onmouseout=\\"toggleHighlight(\'' + pathE + '\')\\" class=\\"defaultCursor\\">';            html += '<td width=\\"20\\" bgcolor=\\"#DDDDDD\\" onmousedown=\\"toggleBranch(\'' + pathE + '\')\\" style=\\"vertical-align: middle; text-align: right\\"><img id=\\"' + pathE + '.twist\\" src=\\"/img/' + arrowSrc + '.gif\\"/></td>';            html += '<td>';            html += '<table border=\\"0\\" cellpadding=\\"0\\" cellspacing=\\"0\\"  class=\\"textRegular sizeFill\\"><tr><td onmousedown=\\"toggleBranch(\'' + pathE + '\')\\" style=\\"vertical-align: middle; text-align: left\\">';            html += '<input type=\\"hidden\\" id=\\"' + pathE + '.count\\" value=\\"0\\" />';            html += '<input type=\\"hidden\\" id=\\"' + pathE + '.name\\" value=\\"' + nameE + '\\" />';            html += '<input type=\\"hidden\\" id=\\"' + pathE + '.loaded\\" value=\\"' + ifLoadedStr + '\\" />';            html += '<div id=\\"' + pathE + '.label\\" class=\\"textBold\\">&nbsp;&nbsp;' + escapeSpecials(name, true) + '</div>';            html += '</td><td width=\\"200\\" style=\\"vertical-align: middle; text-align: right\\">';            html += '(Select <a onmousedown=\\"openAllSubBranches(\'' + pathE + '\',\'selectBranch(\\\\\'' + pathE + '\\\\\')\')\\" class=\\"textLink\\">All</a> | <a onmousedown=\\"openAllSubBranches(\'' + pathE + '\',\'deselectBranch(\\\\\'' + pathE + '\\\\\')\')\\" class=\\"textLink\\">None</a>)';            if(showAddTCBtn) html += ' (<a onmousedown=\\"addTCs(\'' + pathE + '\')\\" class=\\"textLink\\">Add Test Cases</a>)';            html += '&nbsp;&nbsp;</td></tr></table>';            html += '</td>';            html += '</tr>';            html += '<tr><td height=\\"2\\" colspan=\\"2\\" bgcolor=\\"#BBBBBB\\"></td></tr>';            html += '<tr id=\\"' + pathE + '.branch\\" style=\\"display:' + ifOpenStr + '\\">';            html += '<td bgcolor=\\"#EEEEEE\\"></td>';            html += '<td><div id=\\"' + pathE + '.content\\">' + content + '</div></td>';            html += '</tr>';            html += '</tbody></table>';            html += '</div>';        }else{            html = '<div id="' + pathE + '.div">';            html += '<table cellpadding="0" cellspacing="0" class="textRegular sizeFill"><tbody>';            html += '<tr id="' + pathE + '.highlight" height="22" onmouseover="toggleHighlight(\'' + pathE + '\')" onmouseout="toggleHighlight(\'' + pathE + '\')" class="defaultCursor">';            html += '<td width="20" bgcolor="#DDDDDD" onmousedown="toggleBranch(\'' + pathE + '\')" style="vertical-align: middle; text-align: right"><img id="' + pathE + '.twist" src="/img/' + arrowSrc + '.gif"/></td>';            html += '<td>';            html += '<table border="0" cellpadding="0" cellspacing="0"  class="textRegular sizeFill"><tr><td onmousedown="toggleBranch(\'' + pathE + '\')" style="vertical-align: middle; text-align: left">';            html += '<input type="hidden" id="' + pathE + '.count" value="0" />';            html += '<input type="hidden" id="' + pathE + '.name" value="' + nameE + '" />';            html += '<input type="hidden" id="' + pathE + '.loaded" value="' + ifLoadedStr + '" />';            html += '<div id="' + pathE + '.label" class="textBold">&nbsp;&nbsp;' + escapeSpecials(name, false) + '</div>';            html += '</td><td width="200" style="vertical-align: middle; text-align: right">';            html += '(Select <a onmousedown="openAllSubBranches(\'' + pathE + '\',\'selectBranch(\\\'' + pathE + '\\\')\')" class="textLink">All</a> | <a onmousedown="openAllSubBranches(\'' + pathE + '\',\'deselectBranch(\\\'' + pathE + '\\\')\')" class="textLink">None</a>)';            if(showAddTCBtn) html += ' (<a onmousedown="addTCs(\'' + pathE + '\')" class="textLink">Add Test Cases</a>)';            html += '&nbsp;&nbsp;</td></tr></table>';            html += '</td>';            html += '</tr>';            html += '<tr><td height="2" colspan="2" bgcolor="#BBBBBB"></td></tr>';            html += '<tr id="' + pathE + '.branch" style="display:' + ifOpenStr + '">';            html += '<td bgcolor="#EEEEEE"></td>';            html += '<td><div id="' + pathE + '.content">' + content + '</div></td>';            html += '</tr>';            html += '</tbody></table>';            html += '</div>';        }        return html;    }    /**    * Generates the HTML for a single row in the details drop down.    **/    public static String generateDetailRow(String name, String value, Boolean border){        String html = '<tr><td width=\\"150\\"><strong>' + name + '</strong></td>';        if(value == null)            html += '<td>Information not provided.</td>';        else            html += '<td>' + value + '</td>';        html += '</tr>';        if(border){            html += '<tr>';            html += '<td height=\\"1\\" colspan=\\"2\\" bgcolor=\\"#CCCCCC\\"></td>';            html += '</tr>';        }        return html;    }    /**    * Generates the HTML for a TE element in the tree.    **/    public static String generateTestExecution(String name, String path, String id, String status, String retUrl){        //encode the names and paths so they do not interfere with the HTML and initialize the default values        String pathE = EncodingUtil.urlEncode(path, 'UTF-8');        String nameE = EncodingUtil.urlEncode(name, 'UTF-8');        String elemId = pathE + '|~|' + id;        String editPath = id + '/e?retURL=' + retUrl;        String className = '';        //select the correct style for the status        if(status.equals('Passed')){            className = 'colorPassed';        }else if(status.equals('Planned')){            className = 'colorPlanned';        }else if(status.equals('Failed')){            className = 'colorFailed';        }else if(status.equals('Blocked')){            className = 'colorBlocked';        }        //generate the HTML        String html = '<a id=\\"' + elemId + '.a\\"></a>';        html += '<table id=\\"' + elemId + '\\" cellpadding=\\"0\\" cellspacing=\\"0\\" class=\\"textRegular sizeFill\\"><tbody>';        html += '<tr id=\\"' + elemId + '.highlight\\">';        html += '<td width=\\"24\\">';        html += '<input type=\\"checkbox\\" onclick=\\"toggleSelect(\'' + elemId + '\')\\" id=\\"' + elemId + '.cbox\\"/>';        html += '<input type=\\"hidden\\" id=\\"' + elemId + '.loaded\\" value=\\"false\\" />';        html += '</td>';        html += '<td onclick=\\"toggleDetails(\'' + elemId + '\')\\" onmouseover=\\"toggleHighlight(\'' + elemId + '\')\\" onmouseout=\\"toggleHighlight(\'' + elemId + '\')\\" class=\\"defaultCursor ' + className + '\\" style=\\"vertical-align: middle; text-align: left\\"> ' + escapeSpecials(name, true) + '</td>';        html += '<td width=\\"120\\" style=\\"vertical-align: middle; text-align: right\\">';        html += '(<a href=\\"/' + editPath + '\\" target=\\"_parent\\" class=\\"textLink\\">edit</a> | <a href=\\"/' + id + '\\" target=\\"_parent\\" class=\\"textLink\\">details</a>) &nbsp;&nbsp;';        html += '</td>';        html += '</tr>';        html += '<tr style=\\"display:none\\" id=\\"' + elemId + '.details\\" bgcolor=\\"#F8F8E9\\">';        html += '<td>&nbsp;</td>';        html += '<td><div id=\\"' + elemId + '.content\\"></div></td>';        html += '<td>&nbsp;</td>';        html += '</tr>';        html += '<tr><td height=\\"1\\" colspan=\\"3\\" bgcolor=\\"#BBBBBB\\"></td></tr>';        html += '</tbody></table>';        return html;    }    /**    * Generates the HTML for a TC element in the tree.    **/    public static String generateTestCase(String name, String path, Integer order, String id, Boolean isObsolete, Boolean ifEscaped, String retUrl){        //encode the names and paths so they do not interfere with the HTML and initialize the default values        String pathE = EncodingUtil.urlEncode(path, 'UTF-8');        String nameE = EncodingUtil.urlEncode(name, 'UTF-8');        String elemId = pathE + '|~|' + id;        String editPath = id + '/e?retURL=' + retUrl;        String ifDisabled = '';        String nameStyle = '';        String nameD = name;        if(isObsolete){            ifDisabled = 'DISABLED';            nameD = '(Obsolete) ' + nameD;            nameStyle = 'style=\\\"font-style: italic;\\\"';        }        //generate the HTML        String html;        if(ifEscaped){            html = '<a id=\\"' + elemId + '.a\\"></a>';            html += '<table id=\\"' + elemId + '\\" cellpadding=\\"0\\" cellspacing=\\"0\\" class=\\"textRegular sizeFill\\"><tbody>';            html += '<tr id=\\"' + elemId + '.highlight\\">';            html += '<td width=\\"24\\">';            html += '<input type=\\"checkbox\\" onclick=\\"toggleSelect(\'' + elemId + '\')\\" id=\\"' + elemId + '.cbox\\"' + ifDisabled + '/>';            html += '<input type=\\"hidden\\" id=\\"' + elemId + '.loaded\\" value=\\"false\\" />';            html += '</td>';            html += '<td ' + nameStyle + ' onclick=\\"toggleDetails(\'' + elemId + '\')\\" onmouseover=\\"toggleHighlight(\'' + elemId + '\')\\" onmouseout=\\"toggleHighlight(\'' + elemId + '\')\\" class=\\"defaultCursor\\" style=\\"vertical-align: middle; text-align: left\\">' + escapeSpecials(name, true) + '</td>';            html += '<td width=\\"120\\" style=\\"vertical-align: middle; text-align: right\\">';            html += '(<a href=\\"/' + editPath + '\\" target=\\"_parent\\" class=\\"textLink\\">edit</a> | <a href=\\"/' + id + '\\" target=\\"_parent\\" class=\\"textLink\\">details</a>) ';            html += '<input type=\\"text\\" class=\\"textRegular\\" onkeyup=\\"changeOrder(event)\\" style=\\"border: 1px solid rgb(102, 102, 102); text-align:center; width: 30px; background-color: rgb(242,242,242);\\" id=\\"' + elemId + '.order\\" value=\\"' + order + '\\" />&nbsp;&nbsp;';            html += '</td>';            html += '</tr>';            html += '<tr style=\\"display:none\\" id=\\"' + elemId + '.details\\" bgcolor=\\"#F8F8E9\\">';            html += '<td>&nbsp;</td>';            html += '<td><div id=\\"' + elemId + '.content\\"></div></td>';            html += '<td>&nbsp;</td>';            html += '</tr>';            html += '<tr><td height=\\"1\\" colspan=\\"3\\" bgcolor=\\"#BBBBBB\\"></td></tr>';            html += '</tbody></table>';        }else{            html = '<a id="' + elemId + '.a"></a>';            html += '<table id="' + elemId + '" cellpadding="0" cellspacing="0" class="textRegular sizeFill"><tbody>';            html += '<tr id="' + elemId + '.highlight">';            html += '<td width="24">';            html += '<input type="checkbox" onclick="toggleSelect(\'' + elemId + '\')" id="' + elemId + '.cbox"' + ifDisabled + '/>';            html += '<input type="hidden" id="' + elemId + '.loaded" value="false" />';            html += '</td>';            html += '<td ' + nameStyle + ' onclick="toggleDetails(\'' + elemId + '\')" onmouseover="toggleHighlight(\'' + elemId + '\')" onmouseout="toggleHighlight(\'' + elemId + '\')" class="defaultCursor" style="vertical-align: middle; text-align: left">' + escapeSpecials(name, false) + '</td>';            html += '<td width="120" style="vertical-align: middle; text-align: right">';            html += '(<a href="/' + editPath + '" target="_parent" class="textLink">edit</a> | <a href="/' + id + '" target="_parent" class="textLink">details</a>) ';            html += '<input type="text" class="textRegular" onkeyup="changeOrder(event)" style="border: 1px solid rgb(102, 102, 102); text-align:center; width: 30px; background-color: rgb(242,242,242);" id="' + elemId + '.order" value="' + order + '" />&nbsp;&nbsp;';            html += '</td>';            html += '</tr>';            html += '<tr style="display:none" id="' + elemId + '.details" bgcolor="#F8F8E9">';            html += '<td>&nbsp;</td>';            html += '<td><div id="' + elemId + '.content"></div></td>';            html += '<td>&nbsp;</td>';            html += '</tr>';            html += '<tr><td height="1" colspan="3" bgcolor="#BBBBBB"></td></tr>';            html += '</tbody></table>';        }        return html;    }    /**    * Escapes special HTML characters.    **/    public static String escapeSpecials(String str, Boolean backslashes){        if(str == null) {            return null;        } else {            //protect against SOQL injection            str = String.escapeSingleQuotes(str);            if(backslashes) {                return str.replace('>', '&gt;').replace('<', '&lt;').replace('"', '&quot;').replace('\r\n','<br />').replace('\n','<br />').replace('\r','<br />').replace('\\', '\\\\');            } else {                return str.replace('>', '&gt;').replace('<', '&lt;').replace('"', '&quot;').replace('\r\n','<br />').replace('\n','<br />').replace('\r','<br />');            }        }        }    public static String escapeHierarchy(String str){        if(str == null) {            return null;        } else {            //protect against SOQL injection            str = String.escapeSingleQuotes(str);            return str.replace('\\', '\\\\').replace('\'', '\\\'');        }        }}