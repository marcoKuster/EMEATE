public with sharing class QA_TreeTestUtils {	public static User createUser(String name) {        Profile newProfile = [SELECT Id FROM profile WHERE name = 'Standard User'];        User newUser = new User(alias = name, email = 'test@TreeLibraryTestSuite.com',                           emailencodingkey = 'UTF-8', lastname=  'Testing', languagelocalekey = 'en_US',                           localesidkey = 'en_US', profileid = newProfile.Id,                           timezonesidkey = 'America/Los_Angeles', username = 'test@TreeLibraryTestSuite.com');        insert(newUser);        return(newUser);    }    public static ADM_Sprint__c createSprint(String name){        //Sprint_Backlog__c newSprint = new Sprint_Backlog__c(Name = name);        //insert(newSprint);        ADM_Sprint__c newSprint = ADM_Sprint.createTestSprint();        return(newSprint);    }    public static ADM_Work__c createUS(String name){        //User_Story__c newUS = new User_Story__c(Name = name);        //insert(newUS);        return ADM_Work.createTestWork('User Story');    }    public static ADM_Work__c createUS(String name, ADM_Sprint__c sprint){        //ADM_Work__c newUS = new ADM_Work__c(Name = name, Sprint_Backlog__c = sprint.Id);        //insert(newUS);        ADM_Work__c newUS = ADM_Work.setupTestWork('User Story');        newUS.Sprint__c = sprint.id;        newUS.Priority__c = 'P1';        insert newUS;        return newUS;    }    public static ADM_Work__c createUS(String name, String goal, String description, ADM_Sprint__c sprint){                ADM_Work__c newUS = ADM_Work.setupTestWork('User Story');        newUS.Description__c = description;        newUS.Sprint__c = sprint.id;        newUS.Priority__c = 'P1';        insert newUS;        return newUS;    }    public static QA_Hierarchy__c createBaseHiers(String path){        String[] pathArr = path.split('[.]');        QA_Hierarchy__c newHier = new QA_Hierarchy__c(Name = pathArr[pathArr.size()-1], Depth__c = pathArr.size()-1, Count__c = 0, Full_Path__c = path);        insert(newHier);        return newHier;    }    public static QA_Test_Case__c[] createTCs(String description, Integer n, String baseHier){        QA_Test_Case__c[] newTCs = new QA_Test_Case__c[n];        for(Integer i=0; i<n; i++){            newTCs[i] = new QA_Test_Case__c(Brief_Description__c = description + ' ' + i, Hierarchy__c = baseHier,                                          Priority__c = 'Medium', Execution_Type__c = 'Automated');        }        insert(newTCs);        return newTCs;    }    public static QA_Test_Execution__c[] createTEs(List<QA_Test_Case__c> tcs, ADM_Work__c us, String status, String userId, Integer n){        QA_Test_Execution__c[] newTEs = new QA_Test_Execution__c[n*tcs.size()];        Integer curTEIndex = 0;        for(QA_Test_Case__c curTC : tcs){            for(Integer i=0; i<n; i++){                if(status.equals('In Progress') || status.equals('Passed') || status.equals('Failed') || status.equals('Blocked')){                    newTEs[curTEIndex] = new QA_Test_Execution__c(Test_Case__c = curTC.Id, User_Story__c = us.Id, Assignee__c = userId,                                                                Number_of_Executions__c = 1, Status__c = status,                                                                Date_of_Last_Execution__c = datetime.now());                }else{                    newTEs[curTEIndex] = new QA_Test_Execution__c(Test_Case__c = curTC.Id, User_Story__c = us.Id, Assignee__c = userId,                                                                Number_of_Executions__c = 0, Status__c = 'Planned', Date_of_Last_Execution__c = datetime.now());                }                curTEIndex++;            }        }        insert(newTEs);        return newTEs;    }}