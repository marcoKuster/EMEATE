@isTestprivate class ADM_ScrumTeamMemberUtilsTest {/*@testcaseID a1DB000000013nq@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.Public Groups.Edit Scrum Team Member@Expected Results Scrum team member becomes in sync with the public group of the scrum team, showing up in the list of members in the public group*/    static testMethod void testUpdateScrumteamMember() {        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        User user = ADM_WorkUser.createTestUser();        User user2 = ADM_WorkUser.createTestUser();                User runAsUser = ADM_WorkUser.createTestUser();        System.runAs(runAsUser) {            Test.startTest();                        ADM_Scrum_Team_Member__c member = ADM_ScrumTeamMemberUtils.createScrumteamMember(team.Id, user);                        member.Member_Name__c = user2.Id;            update member;            Test.stopTest();        }                List<GroupMember> members = [Select g.UserOrGroupId, g.SystemModstamp, g.Id, g.Group.Name, g.GroupId From GroupMember g Where g.UserOrGroupId = :user2.Id];        Boolean foundUpdate = false;                System.assertEquals(1, members.size(), 'Expected a group member to be added to the public group');        System.assertEquals(true, members.get(0).Group.Name.contains(team.Name));    }/**    Create new scrum team and ensure a public group is generated    *@testcaseID a0B20000006cYHDEA2    *@hierarchy GUS.ScrumforceToGUS.Public Groups.New Scrum Team    *@userstory a01T00000035RnwIAE    *@expectedResults Scrum team is created. An apex trigger generates a team group id and a link to that group under the Administrator Information section. The public group created contains the scrum team + group as a name*//**    Add new team member to a scrum team with a public group    *@testcaseID a0B20000006cYHEEA2    *@hierarchy GUS.ScrumforceToGUS.Public Groups.New Scrum Team    *@userstory a01T00000035RnwIAE    *@expectedResults When a user is added as a scrum team member, this user appears on the Scrum team members list and the public group member list*//**    Remove team member to a scrum team with a public group    *@testcaseID a0B20000006cYHFEA2    *@hierarchy GUS.ScrumforceToGUS.Public Groups.New Scrum Team    *@userstory a01T00000035RnwIAE    *@expectedResults When a user is added as a scrum team member, this user appears on the Scrum team members list and the public group member list*//**    Delete existing scrum team and public group linked to scrum team    *@testcaseID a0B20000006cYHGEA2    *@hierarchy GUS.ScrumforceToGUS.Public Groups.Delete Scrum Team    *@userstory a01T00000035RnwIAE    *@expectedResults When a user deletes a scrum team, the public group linked to that scrum team is deleted as well*/    static testMethod void testCreateAndDeleteScrumteamMember() {        Test.startTest();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c member = ADM_ScrumTeamMemberUtils.createScrumteamMember(team.Id, user);        Test.stopTest();                ADM_Scrum_Team_Cache__c[] caches = [select Inserted__c, Deleted__c, Name__c, ScrumteamOrScrumteamMember__c, CreatedDate from ADM_Scrum_Team_Cache__c where CreatedDate >= : System.now() and (ScrumteamOrScrumteamMember__c = : team.Id or ScrumteamOrScrumteamMember__c = : member.Id) order by CreatedDate desc];        ADM_Scrum_Team_Cache__c cacheTeam;        ADM_Scrum_Team_Cache__c cacheMember;                    for(ADM_Scrum_Team_Cache__c cache : caches) {            if(cache.ScrumteamOrScrumteamMember__c == member.Id) {                cacheMember = cache;            } else if(cache.ScrumteamOrScrumteamMember__c == team.Id) {                cacheTeam = cache;            }           }                //test the auditing capability of the scrum team cache object for a little CYA in the future!        //System.assert(cacheMember.Inserted__c,'This member cache was not an insert!');                ADM_Scrum_Team__c teamFound;        Group[] groups = [select Name, Type, Id from Group];        Group groupFound;        for(Group g : groups) {            if(g.Type != null && g.Type == 'Regular') {                if(g.Name != null && g.Name.contains(team.Name)) {                    groupFound = g;                    teamFound = [select Name, External_Name__c, Id, Team_Email_Group_Id__c from ADM_Scrum_Team__c where Team_Email_Group_Id__c = : groupFound.Id];                    System.debug('here is groupFound ->' + groupFound + ' teamFound -> ' + teamFound);                }            }        }                System.assert(groupFound != null, 'did not find a matching group for this scrum team ' + team + ' here are all the groups ' + groups);                Boolean groupMemberFound = false;        for(GroupMember gm : [select UserOrGroupId, GroupId from GroupMember where GroupId =: groupFound.Id]) {            if(gm.GroupId == groupFound.Id) {                groupMemberFound = true;            } else {                System.debug('##>_' + groupFound + '_ gm##>_' + gm + '_');            }           }                //System.assert(groupMemberFound, 'did not find a group member!');                member.Member_Name__c = user.Id;        update member;                 caches = [select Inserted__c, Deleted__c, Name__c, ScrumteamOrScrumteamMember__c, CreatedDate from ADM_Scrum_Team_Cache__c where ScrumteamOrScrumteamMember__c = : member.Id];        System.assert(caches.size() >= 1, '->size:_'+ caches.size());                    }         /*@testcaseID a1DB00000000S0r@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.Public Groups.Delete Scrum Team Member@Expected Results User is ablet to delete scrum team member after deleting its belonging to the public group*/     static testMethod void testDeleteFlagsForScrumTeamAndMember() {    	Test.startTest();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c member = ADM_ScrumTeamMemberUtils.createScrumteamMember(team.Id, user);                member.Member_Name__c = user.Id;        update member;                ADM_Scrum_Team_Cache__c cacheTeam;        ADM_Scrum_Team_Cache__c cacheMember;        ADM_Scrum_Team_Cache__c[] caches = [select Inserted__c, Deleted__c, Name__c, ScrumteamOrScrumteamMember__c, CreatedDate from ADM_Scrum_Team_Cache__c where ScrumteamOrScrumteamMember__c = : member.Id];        delete member;        delete team;                Test.stopTest();                caches = [select Inserted__c, Deleted__c, Name__c, ScrumteamOrScrumteamMember__c, CreatedDate from ADM_Scrum_Team_Cache__c where CreatedDate <= : System.now() and (ScrumteamOrScrumteamMember__c = : team.Id or ScrumteamOrScrumteamMember__c = : member.Id) order by CreatedDate desc];                for(ADM_Scrum_Team_Cache__c cache : caches) {            if(cache.ScrumteamOrScrumteamMember__c == member.Id && cache.Deleted__c) {                cacheMember = cache;            } else if(cache.ScrumteamOrScrumteamMember__c == team.Id && cache.Deleted__c) {                cacheTeam = cache;            }           }                //test the auditing capability of the scrum team cache object for a little CYA in the future!        System.assert(cacheTeam.Deleted__c,'This team cache was not an delete!_' + cacheTeam);        System.assert(cacheMember.Deleted__c,'This member cache was not an delete!_' + cacheMember);    	    }/**    Delete Scrum Team member that belongs to two teams    *@testcaseID a0B20000007kLFiEAM    *@hierarchy GUS.ScrumforceToGUS.Public Groups.Delete Scrum Team Member    *@userstory a0790000000DG5YAAW    *@expectedResults Scrum team member is deleted from the scrum team as well as the public group. Scrum team member still belongs to the other scrum team*/        static testMethod void testDeletingOneMembershipOnly() {        Test.startTest();        ADM_Scrum_Team__c teamStimpy = ADM_ScrumTeam.createTestScrumTeam('Stimpy');        ADM_Scrum_Team__c teamRen = ADM_ScrumTeam.createTestScrumTeam('Ren');                User user = ADM_WorkUser.createTestUser();        ADM_Scrum_Team_Member__c memberOfStimpy = ADM_ScrumTeamMemberUtils.createScrumteamMember(teamStimpy.Id, user);        ADM_Scrum_Team_Member__c memberOfRen = ADM_ScrumTeamMemberUtils.createScrumteamMember(teamRen.Id, user);        System.assert(memberOfStimpy.id != null);        System.assert(memberOfRen.id != null);        delete memberOfRen;        Integer i = [select count() from ADM_Scrum_Team_Member__c where Member_Name__c =: user.Id];        Test.stopTest();        System.assert(i == 1,'There was not 1 group membership for this user->' + i);    }  /*@testcaseID a1DB00000000VAk@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.ScrumTeamMembers.Create new Scrum team member@Expected Results gus users can create STMs*/      static testMethod void testCreateScrumTeamMember() {        Test.startTest();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = ADM_WorkUser.createTestUser().Id, Scrum_Team__c = team.id, Allocation__c=100);        insert member;        Test.stopTest();        System.assert(member.id != null);    }    /*@testcaseID a1DB00000000VAl@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.ScrumTeamMembers.Delete Scrum team member	@Expected Results Error is generated. User should not be allowed to delete a scrum team member from a scrum team that has tasks and sprints allocated*/    static testMethod void testCreateScrumTeamMemberAndDeleteWithInvalidCacheObject() {        Test.startTest();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = ADM_WorkUser.createTestUser().Id, Scrum_Team__c = team.id, Allocation__c=100);        insert member;        ADM_Scrum_Team_Cache__c cache = [select Id, Deleted__c, Inserted__c, Name__c from ADM_Scrum_Team_Cache__c where ScrumteamOrScrumteamMember__c =: member.Id limit 1];        cache.Name__c = null;        update cache;        delete member;        Test.stopTest();    }       /*@testcaseID a1DB000000013tb@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.ScrumTeamMembers.Create new Scrum team member@Expected Results An error message states that you cannot save a member with an allocation over 100%*/      static testMethod void testCreateScrumTeamMemberOverAllocation() {        Test.startTest();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = ADM_WorkUser.createTestUser().Id, Scrum_Team__c = team.id, Allocation__c=120);        try {            insert member;            System.assert(false, 'Test should have thrown a DML exception before it reached here');        } catch (DmlException e) {             System.assert(e.getMessage().contains('Allocation percent should not exceed 100%'), e.getMessage());        }        Test.stopTest();    } /*@testcaseID a1DB000000013tg@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.ScrumTeamMembers.Create new Scrum team member@Expected Results User is able to save the team member with allocation under 100%*/    static testMethod void testCreateTwoScrumTeamMembershipsBelow100PercentAllocation() {        Test.startTest();        User u = ADM_WorkUser.createTestUser();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team.id, Allocation__c=50);        ADM_Scrum_Team__c team2 = ADM_ScrumTeam.createTestScrumTeam('Tom and Jerry');        ADM_Scrum_Team_Member__c member2 = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team2.id, Allocation__c=40);        insert member;        insert member2;        Test.stopTest();        System.assert(member.id != null);        System.assert(member2.id != null);    }    /*@testcaseID a1DB000000013tl@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.ScrumTeamMembers.Create new Scrum team member@Expected Results User is not able to save the team member on second scrum team because allocation exceeds 100%*/    static testMethod void testCreateTwoScrumTeamMembershipsOver100PercentAllocation() {        Test.startTest();		Id internal = [select id from RecordType where Name =:'Internal'].id;        User u = ADM_WorkUser.createTestUser();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team.id, Allocation__c=50, RecordTypeId = internal);        ADM_Scrum_Team__c team2 = ADM_ScrumTeam.createTestScrumTeam('Tom and Jerry');        ADM_Scrum_Team_Member__c member2 = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team2.id, Allocation__c=60, RecordTypeId = internal);        try {            insert member;            insert member2;            System.assert(false, 'Test should have thrown a DML exception before it reached here');        } catch (DmlException e) {             System.assert(e.getMessage().contains('This person is overallocated'), e.getMessage());        }        Test.stopTest();    } /*@testcaseID a1DB000000013tm@userstory a07B0000000EuFiIAK@Hierarchy GUS.ScrumforceToGUS.ScrumTeamMembers.Create new Scrum team member@Expected Results User is not able to save a duplicate record*/    static testMethod void testCreateDuplicateScrumTeamMembership() {        Test.startTest();        User u = ADM_WorkUser.createTestUser();        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');				Id internal = [select id from RecordType where Name =:'Internal'].id;		        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team.id, Allocation__c=50, RecordTypeId=internal);                ADM_Scrum_Team_Member__c member2 = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team.id, Allocation__c=40, RecordTypeId=internal);        try {            insert member;            insert member2;            System.assert(false, 'Test should have thrown a DML exception before it reached here');        } catch (DmlException e) {             System.assert(e.getMessage().contains('This user already has a'), e.getMessage());        }    }    /*        https://gus.my.salesforce.com/apex/adm_bugdetail?id=a07B0000001DANT&sfdc.override=*/    static testMethod void testInactiveTeamsNotConsideredForTeamAllocation() {        Test.startTest();        User u = ADM_WorkUser.createTestUser();        Id internal = [select id from RecordType where Name =:'Internal'].id;        ADM_Scrum_Team__c team = ADM_ScrumTeam.createTestScrumTeam('Ren And Stimpy');        ADM_Scrum_Team_Member__c member = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team.id, Allocation__c=100, RecordTypeId =internal);        insert member;        ADM_Scrum_Team__c team2 = ADM_ScrumTeam.createTestScrumTeam('Tom and Jerry');        ADM_Scrum_Team_Member__c member2 = new ADM_Scrum_Team_Member__c(Member_Name__c = u.Id, Scrum_Team__c = team2.id, Allocation__c=40, RecordTypeId =internal);        try {            insert member2;            System.assert(false, 'Test should have thrown a DML exception before it reached here');        } catch (DmlException e) {             System.assert(e.getMessage().contains('This person is overallocated'), e.getMessage());        }        //Now let's make the first team inactive        team.Active__c = false;        update team;        //Now insert memeber2 and this should pass - because 'Ren And Stimpy' Scrum Team above is deactivated and its allocation of 100% don't count.        insert member2;                Test.stopTest();        System.assert(member.id != null);        System.assert(member2.id != null);    }}